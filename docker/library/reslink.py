#!/usr/bin/env python

import yaml
import sys
import argparse
import copy

parser = argparse.ArgumentParser(description='Process a heat template.')
parser.add_argument('-i','--infile', dest='in_filename', help='the in heat template filename',required=True)
parser.add_argument('-o','--outfile', dest='out_filename', help='the filename of the processed heat template',default='')
parser.add_argument('-l','--aliases-file', dest='aliases_filename', help='the filename generated by the python command: create-aliases.py',default='aliases.yaml')
parser.add_argument('-a','--ip-address-file', dest='ipaddress_filename', help='the filename containing the output of the neutron list command: neutron port-list',default='')
parser.add_argument('-m','--mac-address-file', dest='macaddress_filename', help='the filename containing the output of the neutron list command: neutron port-list',default='')
parser.add_argument('-p','--ports-file', dest='ports_filename', help='the filename containing the output of the neutron list command: neutron port-list',default='')
parser.add_argument('-n','--networks-file', dest='networks_filename', help='the filename containing the output of the command: neutron net-list',default='')
parser.add_argument('-s','--subnetworks-file', dest='subnetworks_filename', help='the filename containing the output of the command: neutron subnet-list',default='')
parser.add_argument('-v','--volume-file', dest='volumes_filename', help='the filename containing the output of the command: cinder list',default='')
parser.add_argument('-b','--source-volid-file_noroot', dest='source_volid_filename_noroot', help='the filename containing the output of the command: cinder list',default='')
parser.add_argument('-e','--source-volid-file', dest='source_volid_filename', help='the filename containing the output of the command: cinder list',default='')
parser.add_argument('-r','--routers-file', dest='routers_filename', help='the filename containing the output of the command: neutron router-list',default='')
parser.add_argument('-f','--flavors-file', dest='flavors_filename', help='the filename containing the output of the command: nova flavor-list',default='')
parser.add_argument('-u','--upgrade', dest='upgrade', default=True)
parser.add_argument('-t','--scheduler_hints', dest='scheduler_hints', default='')
parser.add_argument('-c','--copy', dest='copy', default=False)
parser.add_argument('-d','--debug', dest='debug_level', default='0')
parser.add_argument('-y','--dependency', dest='dependecny_kind', help='the dependency kind',default='volume')

args = parser.parse_args()

debug_level=args.debug_level
error_level=1

keys=[]
allkeys=['active_device_id', 'allocation_pools',
    'availability_zone','binding:host_id','block_device_mapping','cidr','config_drive','device_name',
    'device_owner','enable_dhcp','end','evacuation_policy','fixed_ips','flavor','flavor_name',
    'gateway_ip','get_attr','get_file','get_resource','group','image','ip_address',
    'metadata','name','net_cidr','net_gateway','net_name','net_pool_end','net_pool_start',
    'network_id','networks','port','port_id','properties','provider:network_type',
    'provider:physical_network','provider:segmentation_id','ram_size','router:external',
    'router_id','scheduler_hints','size','source_volid','start','subnet_id','subnet_name',
    'type','user_data','user_data_format','value_specs','vcpus_number','volume_id']

lu_flavor=args.flavors_filename!=''
lu_network_id=args.networks_filename!=''
lu_port=args.ports_filename!=''
lu_port_id=args.ports_filename!=''
lu_router_id=args.routers_filename!=''
lu_subnet_id=args.subnetworks_filename!=''
lu_fixed_ips=args.ipaddress_filename!=''
lu_fixed_mac=args.macaddress_filename!=''
lu_volume_id=args.volumes_filename!=''
lu_source_volid_id=args.source_volid_filename!=''

flavor_by_name={}
net_by_name={}
port_by_name={}
ipaddr_by_name={}
macaddr_by_name={}
router_by_name={}
subnet_by_name={}
volume_by_name={}
source_volid_by_name={}
name_by_alias={}
type_aliases={}
network_cidr={}
network_pool_start={}


###----------------------------------------------------------------------------------------------

def error1(data):
    if error_level>0:
        print 'error:',data

def debug(data):
    if '10' in debug_level:
        print data

def debug2(data):
    if '2' in debug_level:
        print data

def debug3(data):
    if '3' in debug_level:
        print data

###----------------------------------------------------------------------------------------------

def print_lens():
    if lu_flavor:
        print 'flavor_by_name',len(flavor_by_name)
    if lu_network_id:
        print 'net_by_name',len(net_by_name)
    if lu_port:
        print 'port_by_name',len(port_by_name)
    if lu_fixed_ips:
        print 'ipaddr_by_name',len(ipaddr_by_name)
    if lu_router_id:
        print 'router_by_name',len(router_by_name)
    if lu_subnet_id:
        print 'subnet_by_name',len(subnet_by_name)
    if lu_volume_id:
        print 'volume_by_name',len(volume_by_name)
    if lu_source_volid_id:
        print 'source_volid_by_name',len(source_volid_by_name)
    if True:
        print 'name_by_alias',len(name_by_alias)

#print_lens()
def filter_ipaddr(str1):
    ipaddr=''
    try:
        tstr1=str1[str1.index("ip_address")+14:len(str1)]
        ipaddr=tstr1[0:tstr1.index('"')]
    except ValueError:
        debug( "Oops!  That was no valid number")
    return ipaddr

###----------------------------------------------------------------------------------------------

if args.volumes_filename!='':
    volfile=open(args.volumes_filename,'r')
    for line in volfile:
        if line[0]=='|':
            words =line.split('|')
            key=words[3].strip()
            if key != '':
                if key != 'Display Name':
                    volume_by_name[key]=words[1].strip()
    volfile.close()

if args.source_volid_filename!='':
    srcvolidfile=open(args.source_volid_filename,'r')
    for line in srcvolidfile:
        if line[0]=='|':
            words =line.split('|')
            key=words[3].strip()
            if key != '':
                if key != 'Display Name':
                    source_volid_by_name[key]=words[1].strip()
    srcvolidfile.close()

if args.source_volid_filename_noroot!='':
    srcvolidfile=open(args.source_volid_filename,'r')
    for line in srcvolidfile:
        if line[0]=='|':
            words =line.split('|')
            key=words[3].strip()
            if key != '':
                if key != 'Display Name':
                    source_volid_by_name[key]=words[1].strip()
    srcvolidfile.close()

if args.ports_filename!='':
    portfile=open(args.ports_filename,'r')
    for line in portfile:
        if line[0]=='|':
            words =line.split('|')
            key=words[2].strip()
            if key != '':
                if key != 'name':
                    port_by_name[key]=words[1].strip()
    portfile.close()

if args.ipaddress_filename!='':
    ipaddres_file=open( args.ipaddress_filename,'r')
    for line in ipaddres_file:
        if line[0]=='|':
            words =line.split('|')
            key=words[2].strip()
            if key != '':
                if key != 'name':
                    ipaddr=filter_ipaddr(words[4].strip())
                    if ipaddr != "":
                        if key not in ipaddr_by_name:
                            ipaddr_by_name[key]=ipaddr
                        else:
                            ipaddr_by_name[key]+=' '+ipaddr
    ipaddres_file.close()

if args.macaddress_filename!='':
    macaddres_file=open( args.macaddress_filename,'r')
    for line in macaddres_file:
        if line[0]=='|':
            words =line.split('|')
            key=words[2].strip()
            if key != '':
                if key != 'name':
                    macaddr=words[3].strip()
                    if macaddr != "":
                        if key not in macaddr_by_name:
                            macaddr_by_name[key]=macaddr
                        else:
                            macaddr_by_name[key]+=' '+macaddr
    macaddres_file.close()

if args.routers_filename!='':
        routerfile=open(args.routers_filename,'r')
        for line in routerfile:
            if line[0]=='|':
                words =line.split('|')
                key=words[2].strip()
                if key != '':
                    if key != 'name':
                        router_by_name[key]=words[1].strip()
        routerfile.close()

if args.networks_filename!='':
    netfile=open(args.networks_filename,'r')
    for line in netfile:
        if line[0]=='|':
            words =line.split('|')
            key=words[2].strip()
            if key != '':
                if key != 'name':
                    net_by_name[key]=words[1].strip()
    netfile.close()

if args.subnetworks_filename!='':
    subnetfile=open(args.subnetworks_filename,'r')
    for line in subnetfile:
        if line[0]=='|':
            words =line.split('|')
            key=words[2].strip()
            if key != '':
                if key != 'name':
                    subnet_by_name[key]=words[1].strip()
    subnetfile.close()

if args.flavors_filename!='':
    flavorfile=open(args.flavors_filename,'r')
    for line in flavorfile:
        if line[0]=='|':
            words =line.split('|')
            key=words[2].strip()
            if key != '':
                if key != 'name':
                    flavor_by_name[key]=words[1].strip()
    flavorfile.close()

###----------------------------------------------------------------------------------------------
#print_lens()
###----------------------------------------------------------------------------------------------

def replace_with_alias(aalias, atype, name):
    for k, v in type_aliases.iteritems():
        if k == aalias:
            for k1, v1 in v.iteritems():
                if k1 == atype:
                    for item in v1:
                        for k2, v2 in item.iteritems():
                            if k2 == name:
                                return v2
    return name

###----------------------------------------------------------------------------------------------

def id_of_volume(volume):
    match=''
    best=10000
    volume=replace_with_alias('typeless','OS::Cinder::Volume',volume)
    if volume in volume_by_name.keys():
        debug("match-volume "+volume)
        return volume_by_name[volume]
    return volume

def id_of_source_volid(source_volid):
    match=''
    best=10000
    msource_volid=replace_with_alias('typeless','OS::Cinder::Volume',source_volid)
    for k, v in source_volid_by_name.iteritems():
            if msource_volid in k:
                        debug3("match-source-volid "+msource_volid)
                        thislen=len(k)-len(msource_volid)
            if thislen<best:
                match=v
                best=thislen
    return match

def id_of_port(port):
    match=''
    best=10000
    mport=port
    for k, v in port_by_name.iteritems():
        if mport in k:
            debug("port-match "+ k)
            thislen=len(k)-len(mport)
            if thislen<best:
                match=v
                best=thislen
    return match

def ipaddress_of_port(port):
    match=''
    best=10000
    mport=port
    for k, v in ipaddr_by_name.iteritems():
        if mport in k:
            debug("port-match "+ k)
            thislen=len(k)-len(mport)
            if thislen<best:
                match=v
                best=thislen
    return match

def macaddress_of_port(port):
    match=''
    best=10000
    mport=port
    for k, v in macaddr_by_name.iteritems():
        if mport in k:
            debug("port-match "+ k)
            thislen=len(k)-len(mport)
            if thislen<best:
                match=v
                best=thislen
    return match

def id_of_router(router):
    match=''
    best=10000
    mrouter=replace_with_alias('typeless','OS::Neutron::Router',router)
    for k, v in router_by_name.iteritems():
        if mrouter in k:
            debug("router-match"+ k)
            thislen=len(k)-len(mrouter)
            if thislen<best:
                match=v
                best=thislen
    return match

def id_of_subnet(subnet):
    match=''
    best=10000
    m1subnet=replace_with_alias('typeless','OS::Neutron::Subnet',subnet)
    m2subnet=replace_with_alias('subnet','file:///home/atlasadm/network.yaml',subnet)
    m3subnet=replace_with_alias('subnet','file:///home/atlasadm/network_pool.yaml',subnet)
    for msubnet in [m1subnet, m2subnet, m3subnet]:
        debug2( subnet+' subreplaced by '+msubnet)
        for k, v in subnet_by_name.iteritems():
            if msubnet in k:
                debug2("subnet-match "+ k)
                thislen=len(k)-len(msubnet)
                if thislen<best:
                    match=v
                    best=thislen
    return match

def id_of_net(net):
    match=''
    best=10000
    m1net=replace_with_alias('typeless','OS::Neutron::Net',net)
    m2net=replace_with_alias('net','file:///home/atlasadm/network.yaml',net)
    m3net=replace_with_alias('net','file:///home/atlasadm/network_pool.yaml',net)
    for mnet in [m1net, m2net, m3net]:
        debug( net+' replaced by '+mnet)
        for k, v in net_by_name.iteritems():
            if mnet in k:
                debug( "net-match "+ k)
                thislen=len(k)-len(mnet)
                if thislen<best:
                    match=v
                    best=thislen
    return match

def id_of_flavor(flavor):
    match=''
    best=10000
#    mflavor=replace_with_alias('flavor', 'file:///home/atlasadm/flavor.yaml', flavor)
    mflavor=flavor

    debug( 'CHECKING for flavor '+flavor+' as '+mflavor)
    for k, v in flavor_by_name.iteritems():
        if mflavor in k:
            debug( "flavor-match "+ k)
            thislen=len(k)-len(mflavor)
            if thislen<best:
                match=v
                best=thislen
    return match

def lookup_uuid(name, seekprop):
    if lu_flavor and seekprop=='flavor':
        return id_of_flavor(name.strip())
    if lu_network_id and seekprop=='network_id':
        return id_of_net(name.strip())
    if lu_port and seekprop=='port':
        return id_of_port(name.strip())
    if lu_port_id and seekprop=='port_id':
        return id_of_port(name.strip())
    if lu_router_id and seekprop=='router_id':
        return id_of_router(name.strip())
    if lu_subnet_id and seekprop=='subnet_id':
        debug2 ('uuid lookup '+seekprop+' :: '+name)
        return id_of_subnet(name.strip())
    if lu_fixed_ips and seekprop=='fixed_ips':
        debug2 ('uuid lookup '+seekprop+' :: '+name)
        return id_of_subnet(name.strip())
    if lu_source_volid_id and seekprop=='source_volid_id':
        return id_of_source_volid(name.strip())
    if lu_volume_id and seekprop=='volume_id':
        return id_of_volume(name.strip())
    debug2 ('error lookup '+seekprop+' :: '+name)
    return ''

###----------------------------------------------------------------------------------------------

def find_atts(dict_value):
    for k, v in dict_value.items():
        debug( 'attsfp1:'+ k +' '+ str(type(v)))
        if type(v) is dict:
            for seekprop in ['subnet_id', 'network_id', 'flavor', 'fixed_ips']:
#           for seekprop in ['subnet_id', 'fixed_ips']:
                find_dict_value_attr_properties(v, seekprop,k)
            for seekprop in ['subnet_id', 'fixed_ips', 'networks', 'port']:
#           for seekprop in ['subnet_id', 'fixed_ips']:
                find_list_attr_properties(v, seekprop,k)
        else:
            debug( "atts CHECKPOINT LIST" )

def find_deps(dict_value):
    for k, v in dict_value.items():
        debug( 'attsfp1:'+ k +' '+ str(type(v)))
        if type(v) is dict:
            for seekprop in ['subnet_id', 'network_id', 'flavor', 'fixed_ips']:
#           for seekprop in ['subnet_id', 'fixed_ips']:
                find_dict_value_attr_deps(v, seekprop,k)
            for seekprop in ['subnet_id', 'fixed_ips', 'networks', 'port']:
#           for seekprop in ['subnet_id', 'fixed_ips']:
                find_list_attr_deps(v, seekprop, k)
        else:
            debug( "atts CHECKPOINT LIST" )


def find_seekprop_alias(dict_value, seekprop):
    for k, v in dict_value.items():
        if type(v) is str:
            if k == seekprop:
                return v.strip()
    return ''

def find_seekprop_alias_properties(dict_value, seekprop):
    for k, v in dict_value.items():
        if type(v) is dict:
            if k=='properties':
                return find_seekprop_alias(v, seekprop+"name")
    return ''

def get_type_aliases(dict_value, seekprop):
    tmp_aliases={}
    for k, v in dict_value.items():
        adict_value={}
        the_type=get_the_type(v)
        if type(v) is dict:
            found_alias=find_seekprop_alias_properties(v, seekprop)
        if found_alias!='':
            adict_value[k]=found_alias
            if the_type in tmp_aliases:
                tmp_aliases[the_type].append(adict_value)
            else:
                tmp_aliases[the_type]=[adict_value]
    the_sum=0
    return tmp_aliases


def find_str_resource(dict_value, seekprop):
    for k, v in dict_value.items():
        if k == seekprop:
            if type(v) is str:
                debug( 'f3: '+ k+' '+ type(v)+' ' +seekprop +' '+v )
            else:
                debug( 'f1: not str'+' '+ k+' '+ type(v)+seekprop )

def find_int_resource(dict_value, seekprop):
    for k, v in dict_value.items():
        if k == seekprop:
            if type(v) is int:
                debug ( 'f4:'+' '+ k+' '+ type(v)+' '+seekprop+' '+v)
            else:
                debug ( 'f1: not int'+' '+ k+' '+ type(v)+' '+seekprop)

###----------------------------------------------------------------------------------------------

def find_all_list_attr(list, seekprop):
    for item in list:
        if type(item) is str:
            debug2( 'al3: ' +  seekprop + ' ' + str(type(item))) # i.e. internal network
            if type(item) is str:
                debug2( 'al3 item: ' +  seekprop + ' ' + str(item))
                return item
        else:
            debug2( 'all-list-error:'+' '+ seekprop+' '+ type(item))
        return  ''

def find_all_dict_value_attr2(dict_value, seekprop,top):
    for k, v in dict_value.items():
        if k == 'get_attr':
            debug2('find_all_dict_value_att2 '+str(type(v))+' '+seekprop)
            if type(v) is str:
                if seekprop.strip()=="subnet_id":
                    debug2( 'a3-subnet-id: '+ top+' '+ seekprop+' '+ k+' '+ str(type(v))+' '+v)
                    return "this should be a ip address"
                else:
                    debug2( 'a3: '+ top+' >'+ seekprop+'< '+ k+' '+ str(type(v))+' '+v)
                    return lookup_uuid(v, seekprop)
            else:
                if type(v) is list:
                    debug2("a4 list-in-list"+ top+' '+ seekprop+' '+ k+' '+ str(type(v))+' '+v)
                    return lookup_uuid(find_all_list_attr(v, seekprop), seekprop)
                else:
                    debug2("error:all-dict_value-in-dict_value2")#, top, seekprop, k, type(v),v
    return ''

def find_all_dict_value_attr(dict_value, seekprop):
    for k, v in dict_value.items():
            if type(v) is dict:
                rv=find_all_dict_value_attr2(v,k, seekprop)
                if rv!='':
                    dict_value[k]=rv
            else:
                if type(v) is list:
                    debug2("a10 "+seekprop)
                    return lookup_uuid(find_all_list_attr(v, seekprop), seekprop)
                else:
                    if k == 'get_attr':
                        if type(v) is str:
                            debug2("a11 "+seekprop)
                            return lookup_uuid(v, seekprop)
    return ''

def find_dict_value_attr(dict_value, seekprop, toptop):
    debug2 ('find_dict_value_attr( '+str(type(dict_value))+' , '+seekprop+')')
    for k, v in dict_value.items():
        if k == seekprop:
            if type(v) is dict:
                debug2("dict_value-in-dict_value")#, type(v), seekprop
                rv=find_all_dict_value_attr(v,k)
                if rv != '':
                    debug2( "replace by find_dict_value_attr "+str(dict_value[k])+" with "+str(rv))
                    dict_value[k]=rv #flavor
            else:
                if type(v) is list:
                    debug2( "list-in-dict "+str(type(v))+' '+seekprop)
                    find_list_attr(v, seekprop)
                else:
                    if type(v) is str:
                        debug2("str-list "+str(v)+' '+seekprop)
                    else:
                        debug2("not dict_value or list or str"+str(type(v))+' '+seekprop)
    return ''

def find_dict_value_attr_properties(dict_value, seekprop, toptop):
    for k, v in dict_value.items():
        if k=='properties':
            if type(v) is dict:
                debug2('find_dict_value_attr '+seekprop+" , toptop: "+ toptop)
                find_dict_value_attr(v, seekprop, toptop)

def find_dict_value_depends_on(dict_value, seekdeps, toptop):
    for k, v in dict_value.items():
        if k=='depend_on':
            if type(v) is dict:
                debug2('find_dict_value_attr '+seekdeps+" , toptop: "+ toptop)
                find_dict_value_attr(v, seekdeps, toptop)

###----------------------------------------------------------------------------------------------

def find_list_attr(alist, seekprop):
    for v in alist:
            debug2('find_list_attr '+seekprop+' '+str(type(v)))
            if type(v) is dict:
                    debug2('find_list_attr type dict '+seekprop+' '+str(type(v)))
                    for k1, v1 in v.items():
                        if k1=='get_attr':
                            debug2('find_list_attr type dict level-1 deep '+k1+' '+str(type(v1)))
                            if type(v1) is list:
                                debug2 ("get_attr k1 ATTR LIST")
                                for item in v1:
                                    debug2 ( "get_attr_item level-1 deep: "+seekprop+''+item)
                                    return lookup_uuid(item, seekprop)
                            else:
                                error1( "this case of list_attr is not implemented "+str(type(v)) )
                        else:
                            if type(v1) is str:
                                    debug2("ignored here "+ seekprop + ' v1: '+v1 )
                            else:
                                if type(v1) is dict:
                                    rv=''
                                    for k2, v2 in v1.items():
                                        if k2=='get_attr':
                                            debug2('find_list_attr type dict level-2 deep '+k2+' '+str(type(v2))+' '+str(v2))
                                            if type(v2) is list:
                                                debug2 ("get_attr-2 ATTR LIST")
                                                for item in v2:
                                                    debug2 ( "get_attr-2_item: "+seekprop+' '+item)
                                                    if rv=='':
                                                        rv=lookup_uuid(item, seekprop)
                                else:
                                    error1( "this case of list_attr is not implemented "+str(type(v)) )
                                if rv!='':
                                    debug2 ( "get_attr-2_replace: "+str(v2)+'  with '+str(rv))
                                    v[k1]=rv
            else:
                error1( "this case of list_attr is not implemented "+str(type(v)) )
    return ''

def find_list_attr_properties(dict_value, seekprop, toptop):
    for k, v in dict_value.items():
        if k=='properties':
            if type(v) is list:
                debug2('find_list_attr_properties '+seekprop)
                find_list_attr(v, seekprop)


##############################################################################################################

def find_all_dict_value_resource2(dict_value, seekprop, top, topresource):
    for k, v in dict_value.items():
        if k == 'get_attr':
            if type(v) is str:
                if seekprop.strip()=="subnet_id":
                    debug2( 'lotto-a33x-dhcp_ask_subnet-id: '+ top+' '+ seekprop+' '+ k+' '+ str(type(v))+' '+v+ ' ' )
                    return "nodhcpanymore"
            else:
                if type(v) is list:
                    debug2( "lotto-list-3in-list,"+str(v)+' tk: '+topresource+' any: '+ seekprop)
                    return "nodhcpanymore"
                    #find_list_resource(v, seekprop, topresource)
                else:
                    debug2( "lotto-error:all3-dict_value-in-dict_value2")#+' '+ top+' '+ seekprop+' '+ k+' '+ type(v)+' '+v)
        elif k == 'get_resource':
            if type(v) is str:
                if seekprop.strip()=="subnet_id":
                    debug2( 'a3x-dhcp_ask_subnet-id: '+ top+' '+ seekprop+' '+ k+' '+ str(type(v))+' '+v+ ' ' )
                    return "keepdhcphere"
                else:
                    rv=lookup_uuid(v, seekprop)
                    debug2( 'a3x: '+ str(top) +' '+ seekprop +' '+ k +' '+ str(type(v)) +' ' + v +' '+ 'rv:' +' '+ str(rv))
                    return rv
            else:
                if type(v) is list:
                    debug( "list-in-list")
                    rv=find_list_resource(v, seekprop, topresource)
                else:
                    debug( "error:all-dict_value-in-dict_value2")#+' '+ top+' '+ seekprop+' '+ k+' '+ type(v)+' '+v)
    return ''

def find_all_dict_value_resource(dict_value, seekprop, topresource):
    for k, v in dict_value.items():
            if type(v) is list:
                debug2('aaaxx TK : '+topresource+' find_list_resource2  is list seekprop:'+seekprop)
                ivc=0
                for item in v:
                    debug2('aaaxx find_list_resource2  is list item:'+str(item))
                    if type(item) is dict:
                        rv=find_all_dict_value_resource(item, seekprop, topresource)
                        debug2("aaxx "+str(k)+' '+str(seekprop)+" - rv :: "+str(rv)+" tk: "+topresource)
                        if rv == 'nodhcpanymore' and ipaddress_of_port(topresource)!='':
                            debug2("aaxx nodhcpanymor item:"+str(item)+" k: "+str(k)+' '+str(seekprop)+" - rv :: "+str(rv)+" tk: "+topresource)
                            if lu_fixed_ips:
                                newip = {}
                                newip['ip_address']=ipaddress_of_port(topresource)
                                v.pop(ivc)
                                v.insert(ivc,newip)
                            if lu_fixed_mac:
                                newmac={}
                                newmac['mac_address']=macaddress_of_port(topresource)
                                return newmac
                    else:
                        if type(item) is list:
                            rv=find_list_resource(item, seekprop, topresource)
                        else:
                            debug2("ERROR uncovered case type: "+str(type(item)))
                ivc += 1
            elif type(v) is dict:
                rv=find_all_dict_value_resource2(v,k, seekprop, topresource)
                debug2 ( "all-dict_value-in-dict_value"+' '+ str(type(v))+' '+seekprop)
                if rv == 'keepdhcphere':
                    debug2( 'a2x-keep dhcp')
                    return rv
                if rv == 'nodhcpanymore':
                    debug2( 'a2x-no dhcp')
                    return rv
                elif rv != '':
                    debug( "replace by find_dict_value_resources"+' '+str(dict_value[k])+' '+"with"+' '+str(rv))
                    dict_value[k]=rv  #port
            else:
                if k == 'ip_address':
                            debug2( 'aaaip1:'+seekprop+' notype k ' + str(k)+ ' type_v: '+ str(type(v)) +' v: '+ str(v))
                elif k == 'get_resource':
                    if type(v) is str:
                        debug2 ( "attr_item: "+seekprop)#item
                        rv=lookup_uuid(v, seekprop)
                        debug2( 'xa3:'+' '+seekprop+' '+ k+' '+ str(type(v))+' '+v+' '+'rv:'+' '+rv)
                        return rv
                    else:
                        if type(v) is int:
                            debug2( 'xa4:'+seekprop+' '+ k+' '+ str(type(v))+' '+v)
                        else:
                            debug2( 'xa1:'+seekprop+' '+ k+' '+ str(type(v)) )
                else:
                    debug2( 'aaaxa2:TK'+topresource+' cha_ '+seekprop+' notype k ' + str(k)+ ' type_v: '+ str(type(v)) +' v: '+ str(v))
                    return ''
            if k=='subnet_id':
                debug2( 'aaaxa1_bingo:TK '+topresource+' cha_ '+seekprop+' notype k ' + str(k)+ ' type_v: '+ str(type(v)) +' v: '+ str(v))
                if type(v) is dict:
                    debug2 ( "bingo adict_r-value"+' '+ str(v)+' '+seekprop +" tk "+topresource)
#                   debug2 ( "bingo0 adict_get+attr-value"+' '+ str(type(v['get_attr']))+' '+str(v['get_attr']))
#                   if v['get_attr'] is dict:
#                       return 'nodhcpanymore'
            else:
                debug2( 'aaaxa1:TK '+topresource+' cha_ '+seekprop+' notype k ' + str(k)+ ' type_v: '+ str(type(v)) +' v: '+ str(v))
    return ''

###----------------------------------------------------------------------------------------------

def find_dict_value_resource(dict_value, seekprop, topresource):
    retval=""
    for k, v in dict_value.items():
        if k == seekprop:
            if type(v) is dict:
                debug2( "dict_value-in-dict_value"+' '+ str(type(v))+' '+ seekprop+" tk:"+topresource)
                rv=find_all_dict_value_resource(v, k, topresource)
                debug2("aab "+str(seekprop)+" - rv :: "+str(rv))
                if rv == 'nodhcpanymore':
                    debug2( 'a2x-dhcp')
                    retval=rv
                elif  seekprop=="subnet_id":
                    #dict_value["ip_address"]="0.0.0.0"
                    debug2(" aay: insert new key ip_address "+str(dict_value[k])+" with "+rv +" tk:"+topresource)
#                   return "IP(subnet_id)"
                    #del dict_value[k]
                elif  seekprop=="fixed_ips":
                    #dict_value["ip_address"]="0.0.0.0"
                    debug2(" aa3: insert new key ip_address "+str(dict_value[k])+" with "+rv +" tk:"+topresource)
#                   return "IP(fixed_ips)"
                    #del dict_value[k]
                elif rv != "":
                    debug2(" replace by find_dict_value_resources "+str(dict_value[k])+" with "+rv)
                    dict_value[k]=rv
            elif False:
                if seekprop == 'net_pool_start':
                    debug2('net_pool_start: '+str(v))
                    network_pool_start[topresource]=v
                elif seekprop == 'net_cidr':
                    debug2('net_cidr: '+str(v))
                    network_cidr[topresource]=v

                #if type(item) is list:
                    #debug( "list-in-list")
                    #find_list_resource(item, seekprop, topresource)
                #else:
                    #debug("not dict_value or list "+str(type(v))+" "+seekprop)
    return retval

def find_list_resource(dict_value, seekprop, topresource):
    for k, v in dict_value.items():
        if k == seekprop:
            if type(v) is list:
                debug2('find_list_resource is list seekprop:'+seekprop)
                ivc=0
                for item in v:
                    if type(item) is dict:
                        rv=find_all_dict_value_resource(item, seekprop, topresource)
                        if rv is dict:
                            print "FOUND MAC"
                            return rv
                        else:
                            debug2("aaa "+str(k)+' '+str(seekprop)+" - rv :: "+str(rv)+" tk: "+topresource)
                            if rv == 'nodhcpanymore' and ipaddress_of_port(topresource)!='':
                                debug2("aaax4 item:"+str(item)+" k: "+str(k)+' '+str(seekprop)+" - rv :: "+str(rv)+" tk: "+topresource)
                                if lu_fixed_ips:
                                    newip = {}
                                    newip['ip_address']=ipaddress_of_port(topresource)
                                    v.pop(ivc)
                                    v.insert(ivc,newip)
                                    debug2("aaax2 v[ivc]"+str(ivc)+" k: "+str(v[ivc]))
                            if rv == 'nodhcpanymore' and macaddress_of_port(topresource)!='':
                                debug2("aaax5 item:"+str(item)+" k: "+str(k)+' '+str(seekprop)+" - rv :: "+str(rv)+" tk: "+topresource)
                                if lu_fixed_mac:
                                    newmac={}
                                    newmac['mac_address']=macaddress_of_port(topresource)
                                    return newmac
                    else:
                        if type(item) is list:
                            rv=find_list_resource(item, seekprop, topresource)
                            if rv is dict:
                                print "FOUND MAC"
                        else:
                            debug2("ERROR uncovered case type: "+str(type(item)))
                ivc += 1
            else:
                debug2 ('ERROR, find_list_resource is not list seekprop:'+seekprop+' , '+topresource)

    return ''

###----------------------------------------------------------------------------------------------


def find_type_resource_properties(dtype, dict_value, seekprop,topresource):
    for k, v in dict_value.items():
        if type(v) is dict:
            if k=='properties':
                if dtype=='dlist':
                    debug2( 'find_list_resource() '+seekprop+' '+str(type(v))+' topresource: '+topresource)
                    rv=find_list_resource(v, seekprop, topresource)
                    if type(rv) is dict:
                        v['mac_address']=rv['mac_address']
                    return rv
                elif dtype=='ddict_value':
                    rv= find_dict_value_resource(v, seekprop, topresource)
                    debug2( 'find_dict_value_resource() '+seekprop+' '+str(type(v))+" rv:"+rv+' topresource: '+topresource)
                    if rv!='':
                        debug2( "find_dict_value_resource_properties("+str(dict_value)+","+ str(seekprop)+") rv:"+str(rv)+' topresource: '+str(topresource))
                        return rv
                elif dtype=='dint':
                    debug2( 'find_int_value_resource() '+seekprop+' '+str(type(v))+' topresource: '+topresource)
                    return find_int_resource(v, seekprop)
                elif dtype=='dstr':
                    debug2( 'find_srt_value_resource() '+seekprop+' '+str(type(v))+' topresource: '+topresource)
                    return find_str_resource(v, seekprop)
                else:
                    debug2('find_no prop_resource Key:'+str(k))
        else:
            debug2('find_notype topk '+topresource+' _resource Key:'+str(k)+' '+str(v))

    debug2( 'find_notype_resource() '+seekprop+' '+str(v)+' topresource: '+topresource)
    return ''

##################################################################################################

def find_resources(dict_value):
    for k, v in dict_value.items():
        debug2('..............................................................')
        debug2 ('find_resources:' + str(k)+' , '+ str(type(v)))
        if type(v) is dict:
            for seekprop in ['port_id','network_id','router_id','subnet_id','value_specs','net_cidr','net_pool_start']:
                find_type_resource_properties('ddict_value',v, seekprop,k)
            for seekprop in ['allocation_pools', 'block_device_mapping', 'fixed_ips', 'networks']:
                find_type_resource_properties('dlist',v, seekprop,k)

def find_nonroot_volumes(dict_value):
    for k, v in dict_value.items():
        if  v['type']=='OS::Cinder::Volume':
            if 'root' not in k:
                    if 'image' in v['properties']:
                            del  v['properties']['image']
                    if 'source_volid' not in v['properties']:
                            v['properties']['source_volid']=id_of_volume(k)
                    else:
                            v['properties']['source_volid']=id_of_source_volid(v['properties']['source_volid'])

def find_volumes(dict_value):
    for k, v in dict_value.items():
        if  v['type']=='OS::Cinder::Volume':
            if 'image' in v['properties']:
                    del  v['properties']['image']
            if 'source_volid' not in v['properties']:
                    v['properties']['source_volid']=id_of_source_volid(id_of_volume(k))
            else:
                    v['properties']['source_volid']=id_of_source_volid(v['properties']['source_volid'])

##################################################################################################

def print_all_uuid(dict_value):
    for k, v in dict_value.items():
        if type(v) is dict:
            for seekprop in ['port_id','network_id','router_id','subnet_id','value_specs']:
                print find_type_resource_properties('ddict_value',v, seekprop,k)
            for seekprop in ['allocation_pools', 'block_device_mapping', 'fixed_ips','networks']:
                print find_type_resource_properties('dlist',v, seekprop,k)

def get_the_type(v):
    if type(v) is dict:
        return 'dict'
    if type(v) is list:
        return 'list'
    if type(v) is str:
        return 'str '
    if type(v) is int:
        return 'int '
    if type(v) is bool:
        return 'bool'
    return str(type(v))

def stattrav(value,statistics):
    the_type=get_the_type(value)
    if the_type in statistics:
        statistics[the_type]+=1
    else:
        statistics[the_type]=1
    if type(value) is dict:
        for k, v in value.items():
            stattrav(v, statistics)
    elif type(value) is list:
        ivc=1
        for item in value:
            stattrav(item, statistics)
            ivc+=1

def print_the_statistics(value):
    statistics={}
    stattrav(value, statistics)
    the_sum=0
    for k, v in statistics.items():
        the_sum+=v
        print k,':',v
    print 'the_sum:', the_sum

def print_the_count(dict_value):
    count=0
    for k, v in dict_value.items():
        count+=1
    print 'the_count:', count

def find_the_resources(dict_value):
    for k, v in dict_value.items():
        if type(v) is dict:
            if k=='resources':
                return v
    return ""

def print_aliases(tmp_aliases, seekprop):
    for k, v in tmp_aliases.items():
        print 'the_'+seekprop+'_aliases[', k,']:'
        for line in v:
            print "    ",line

def print_debug():
    print str(type(the_resources))
    print_the_count(the_resources)
#   print_all_uuid(the_resources)
    for k, v in type_aliases.items():
        print_aliases(v,k)
    for k, v in ipaddr_by_name.iteritems():
        print v, k

def deep_clean(dictva):
    for k, v in dictva.items():
        if type(v) is dict:
            deep_clean(v)
        del dictva[k]

def deltrav(value, prop):
    if type(value) is dict:
        for k, v in value.items():
            if k==prop:
                if type(v) is dict:
                    deep_clean(v)
                del value[k]
            else:
                deltrav(v, prop)
    elif type(value) is list:
        for item in value:
            deltrav(item, prop)


def topdeltrav(value, tops, prop):
    if type(value) is dict:
        for k, v in value.items():
            for top in tops.split(' '):
                if top in k:
                    print 'selection', k
                    deltrav(v, prop)


def pathproptrav(value, prop, path):
    if type(value) is dict:
        for k, v in value.items():
            if k not in keys:
                if path !='':
                    keys.append(k)
            if k==prop and (type(v) is str or type(v) is str ):
                print  path+"/"+k, ":", v
            pathproptrav(v, prop, path+"/"+k)
    elif type(value) is list:
        ivc=1
        for item in value:
            pathproptrav(item, prop, path+"["+str(ivc)+"]")
            ivc+=1
def pathdepstrav(value, prop, path):
    if type(value) is dict:
        for k, v in value.items():
            if k not in keys:
                if path !='':
                    keys.append(k)
            if k==prop and (type(v) is str or type(v) is str ):
                print  path+"/"+k, ":", v
            pathdepstrav(v, prop, path+"/"+k)
    elif type(value) is list:
        ivc=1
        for item in value:
            pathdepstrav(item, prop, path+"["+str(ivc)+"]")
            ivc+=1

def print_property(dict_value,prop):
    pathproptrav(dict_value, prop,'')

def print_dependency(resources):
    if type(resources) is dict:
        for k, v in resources.items():
            if type(v) is dict:
                for k1, v1 in v.items():
                    if k1 == 'depends_on':
                        print "deps",v1

def link_volumes_dependency(resources):
#    print "link dependency"
    volumes=[]
    root_volumes=[]
    link_volumes=[]
    if type(resources) is dict:
        for k, v in resources.items():
            if type(v) is dict:
                for k1, v1 in v.items():
                    if k1 == 'type':
                        if type (v1) is str:
                            if v1 == 'OS::Cinder::Volume':
                                if k not in volumes:
                                    volumes.append(k)
#    ivc=0
#    print "len", len(volumes)
 #   for volume in volumes:
 #               print "all","%02d" % (ivc),": ",volume
                ivc+=1

    for volume in volumes:
        if 'volume_mn' in volume:
            root_volumes.append(volume)

    for volume in root_volumes:
        volumes.remove(volume)

 #   for volume in root_volumes:
 #               print "rootv",volume

    link_volumes=copy.deepcopy(root_volumes)

    ilc=0
    for volume in volumes:
        print "%02d" % (ilc),"vol:",volume
        if not 'depends_on' in resources[volume]:
            resources[volume]['depends_on']=link_volumes[ilc]
            link_volumes[ilc]=volume
            ilc += 1
        if ilc==len(link_volumes):
            ilc=0

    ivc=0
    if type(resources) is dict:
        for k, v in resources.items():
            if type(v) is dict:
                for k1, v1 in v.items():
                    if k1 == 'depends_on':
#                        print "%02d" % (ivc), k, "deps",v1
                        ivc+=1

##################################################################################################

try:
    if 'v' in debug_level:
        print "in_filename",args.in_filename
    infile=open(args.in_filename,"r")
    mspservers = yaml.load(infile)
    infile.close()
except ValueError:
    error1('no input file')
    exit()

if args.aliases_filename!='':
    try:
        if 'v' in debug_level:
            print "aliases_filename",args.aliases_filename
        infile1=open(args.aliases_filename,"r")
        type_aliases = yaml.load(infile1)
        infile1.close()
    except ValueError:
        error1('no alias file')

the_resources=find_the_resources(mspservers)

find_resources(the_resources)
find_atts(the_resources)

if args.source_volid_filename_noroot!='':
    find_nonroot_volumes(the_resources)

if args.source_volid_filename!='':
    find_volumes(the_resources)

if args.scheduler_hints!='':
    topdeltrav(the_resources, args.scheduler_hints, 'scheduler_hints')

if 's' in debug_level:
    print_lens()
if 't' in debug_level:
    print_the_statistics(the_resources)

if 'l' in debug_level:
    for prop in allkeys:
        print_property(the_resources, prop)

if args.dependecny_kind=='print':
        print_dependency(the_resources)
if args.dependecny_kind=='volumes':
        link_volumes_dependency(the_resources)

#for key in keys:
#   print key

if 'p' in debug_level:
    print_debug()

if False and lu_fixed_ips:
    for k,v in network_pool_start.items():
        netaddr,bits = network_cidr[k].split('/')
        maxval=v
        netali=netaddr.split('.')
        nettop=netali[0]+'.'+netali[1]+'.'+netali[2]
        for k1, v1 in ipaddr_by_name.iteritems():
            if nettop in v1:
                if v1 > maxval:
                    nettmp=v1.split('.')
                    maxval=nettmp[0]+'.'+nettmp[1]+'.'+nettmp[2]+'.'+str(int(nettmp[3])+1)
                    network_pool_start[k]=maxval
        network_pool_start[k]=maxval

    for k,v in network_pool_start.items():
        for k1, v1 in the_resources.items():
            if k1==k:
                v1['properties']['net_pool_start']=v

if  args.out_filename!='':
    try:
        if 'v' in debug_level:
            print "out_filename",args.out_filename
        with open(args.out_filename, 'w') as outfile:
            outfile.write( yaml.dump(mspservers, default_flow_style=False) )
        outfile.close
    except ValueError:
        error1('no out file')
