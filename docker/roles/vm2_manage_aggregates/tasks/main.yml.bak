---
# Copyright (C) 2015 by
# Ericsson AB
# S-164 83 Stockholm
# Sweden
# Tel: +46 10 719 00 00
#
# The program may be used and/or copied only with the written permission
# from Ericsson AB, or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the program
# has been supplied.
#
# All rights reserved.

# start of updating server-groups
- name: nova-server-group-clean
  when: (action == "deploy_openstack") and (manage_networks | default('True') == 'True')
  action:
    module: nova-server-group-clean
    os_auth_url: "{{ os_authurl }}"
    os_password: "{{ os_password }}"
    os_tenant_name: "{{ os_tenant }}"
    os_username: "{{ os_username }}"

- name: nova server-group-create
  when: (action == "deploy_openstack") and (manage_networks | default('True') == 'True')
  shell: nova server-group-create "{{ item }}" anti-affinity
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"
  with_items:
      - "{{ ts_server_group }}"
      - "{{ slb_server_group }}"
      - "{{ vom_server_group }}"
      - "{{ cim_server_group }}"
      - "{{ da_server_group }}"

- name: nova server-group-create
  when: (action == "deploy_openstack") and (number_of_ddc_cabinet == 0) and (manage_networks | default('True') == 'True')
  shell: nova server-group-create "{{ item }}" anti-affinity
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"
  with_items:
      - "{{ ddc_server_group }}"
# end of updating server-groups

# start of updating aggregates
- name: nova-aggregate-clean
  when: (action == "deploy_openstack") and (manage_networks | default('True') == 'True')
  action:
    module: nova-aggregate-clean
    os_auth_url: "{{ os_authurl }}"
    os_password: "{{ os_password }}"
    os_tenant_name: "{{ os_tenant }}"
    os_username: "{{ os_username }}"

- name: nova-host-list
  when: (action == "deploy_openstack") and (manage_networks | default('True') == 'True')
  action:
    module: nova-host-list
    os_auth_url: "{{ os_authurl }}"
    os_password: "{{ os_password }}"
    os_tenant_name: "{{ os_tenant }}"
    os_username: "{{ os_username }}"
  register: output_var_blade

- name: nova aggregate-create ha_zone
  when: (action == "deploy_openstack") and (manage_networks | default('True') == 'True')
  shell: nova aggregate-create {{ ha_zone }} {{ ha_zone }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: nova aggregate-create ddc_zone
  when: (action == "deploy_openstack") and ( {{ item }} <= {{ number_of_ddc_cabinet }} ) and (manage_networks | default('True') == 'True')
  shell: nova aggregate-create {{ ddc_zone }}{{ item }} {{ ddc_zone }}{{ item }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"
  with_sequence: start=1 end={{ number_of_ddc_cabinet | default (0) + 1 }}

- name: nova aggregate-create traffic_zone
  when: (action == "deploy_openstack") and (manage_networks | default('True') == 'True')
  shell: nova aggregate-create {{ traffic_zone }} {{ traffic_zone }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: ha_zone aggregate add hosts
  shell: nova aggregate-add-host {{ ha_zone }} "{{ item.1 }}"
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"
  with_indexed_items: output_var_blade.servers
  when: "(action == 'deploy_openstack') and (manage_networks | default('True') == 'True') and (item.0 < compute_hosts_in_ha_zone)"

- name: ddc-size default
  when: (action == "deploy_openstack") and (manage_networks | default('True') == 'True') and (compute_hosts_in_ddc_zone is undefined )
  set_fact:
    compute_hosts_in_ddc_zone="{{ number_of_ddc_cabinet }}"

- name: ddc_zone aggregate add hosts
  shell: nova aggregate-add-host {{ ddc_zone }}{{ (item.0 - compute_hosts_in_ha_zone) % ( number_of_ddc_cabinet | int ) + 1 }} "{{ item.1 }}"
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"
  with_indexed_items: output_var_blade.servers
  when: "(action == 'deploy_openstack') and (manage_networks | default('True') == 'True') and (item.0 >= compute_hosts_in_ha_zone) and (item.0 < compute_hosts_in_ha_zone + {{ compute_hosts_in_ddc_zone }} ) and ( number_of_ddc_cabinet | int ) > 0"

- name: traffic_zone aggregate add hosts
  shell: nova aggregate-add-host {{ traffic_zone }} "{{ item.1 }}"
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"
  with_indexed_items: output_var_blade.servers
  when: "(action == 'deploy_openstack') and (manage_networks | default('True') == 'True') and (item.0 >= compute_hosts_in_ha_zone + {{ compute_hosts_in_ddc_zone }} )   "
# end updating aggregates

#
# - non will trigger stack update
# - nob will not kick off any stack option

- name: "Check if the expand_site mode is based on an upgraded stack"
  shell: ls {{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}
  when: ( expand_site | default ('False') == 'True')
  register: prev_upgrade_files
  ignore_errors: yes

- name: "Expand site-mode: Move 0.yaml to {{ output_folder_remote }}/heat/"
  shell: mv {{ output_folder_remote }}/heat/temp/0.yaml {{ output_folder_remote }}/heat/
  when: ( deploy_method | default('bulk') == 'bulk') and ( expand_site | default ('False') == 'True') 

- name: "Expand-site mode: copy previous template files for bulk deployment"
  shell: cp {{ output_folder_remote }}/upgrade/2/temp/*.yaml {{ output_folder_remote }}/heat/temp/
  when: ( deploy_method | default('bulk') == 'bulk') and ( expand_site | default ('False') == 'True') and ( prev_upgrade_files.stderr == "")

- name: "Expand site-mode: copy 0.yaml into {{ output_folder_remote }}/heat/temp/"
  shell: cp {{ output_folder_remote }}/heat/0.yaml {{ output_folder_remote }}/heat/temp/
  when: ( deploy_method | default('bulk') == 'bulk') and ( expand_site | default ('False') == 'True') and ( prev_upgrade_files.stderr == "") and ( change_networks | default('False') == 'True')

- name: "assemble stack template files - Bulk Deployment"
  when: ( action == "deploy_openstack" ) and ( deploy_method | default('bulk') == 'bulk')
  action: assemble dest="{{ output_folder_remote }}/heat/{{ os_msptemplate }}" src="{{ output_folder_remote}}/heat/temp"

#- name: "Transfer the depends.py script"
#  copy: src=depends.py dest={{ output_folder_remote }}/heat/ mode=0755
#  when: ( deploy_method | default('bulk') == 'bulk')

#- name: "Add dependency per resource_creation_channels"
#  action: shell python {{ output_folder_remote }}/heat/depends.py -f {{ output_folder_remote }}/heat/{{ os_msptemplate }} -o {{ output_folder_remote }}/heat/{{ os_msptemplate }}.depends -t {{ resource_creation_channels | default('0') }}
#  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk') and ( resource_creation_channels | default('0') != '0')

#- name: "Backup Orig heat template file" 
#  shell: cp {{ output_folder_remote }}/heat/{{ os_msptemplate }} {{ output_folder_remote }}/heat/{{ os_msptemplate }}.orig
#  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk') and ( resource_creation_channels | default('0') != '0')

#- name: "Use {{ os_msptemplate }}.depends as {{ os_msptemplate }}"
#  shell: mv {{ output_folder_remote }}/heat/{{ os_msptemplate }}.depends {{ output_folder_remote }}/heat/{{ os_msptemplate }}
#  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk') and ( resource_creation_channels | default('0') != '0')

- name: "Deploy using python-heatclient heat stack-create - Bulk Deployment"
  when: (action == "deploy_openstack") and (manage_networks | default('True') == 'True') and (vm_boot | default('True') == 'True') and ( system_versiontag_old is not defined ) and ( deploy_method | default('bulk') == 'bulk' ) and ( expand_site | default('False') == 'False')
  action: shell heat stack-create -f {{ output_folder_remote }}/heat/{{ os_msptemplate }} -r {{ os_stackname }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Deploy using python-heatclient heat stack-update - Bulk Deployment"
  when: (action == "deploy_openstack") and (manage_networks | default('True') == 'False') and (vm_boot | default('True') == 'True') and ( system_versiontag_old is not defined ) and (deploy_method | default('bulk') == 'bulk')
  action: shell heat stack-update -f {{output_folder_remote }}/heat/{{ os_msptemplate }} {{ os_stackname }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Wait till the stack update completed - Bulk Deployment" 
  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk') and  (vm_boot | default('True') == 'True') 
  action: shell heat stack-list |grep {{ os_stackname }}
  register: result
  until: result.stdout.find("COMPLETE") !=-1
  retries: 10000
  delay:  5
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Expand site-mode: move 0.yaml back to {{ output_folder_remote }}/heat/temp"
  shell: mv {{ output_folder_remote }}/heat/0.yaml {{ output_folder_remote }}/heat/temp/
  when: ( deploy_method | default('bulk') == 'bulk') and ( expand_site | default ('False') == 'True')

#
# The following code will go for Scaling Deployment
#
- name: "Create directory for scaling deployment"
  shell: mkdir {{ output_folder_remote }}/scaling
  ignore_errors: yes
  when: ( deploy_method | default('bulk') == 'scaling')

- name: "Cleanup the dir"
  shell: rm {{ output_folder_remote }}/scaling/*
  ignore_errors: yes
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'False')

- name: " Create temp sub-dir"
  shell: mkdir {{ output_folder_remote }}/scaling/temp
  when: ( deploy_method | default('bulk') == 'scaling')
  ignore_errors: yes

- name: "Cleanup the dir"
  shell: rm {{ output_folder_remote }}/scaling/temp/*
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'False')
  ignore_errors: yes

- name: "Expand-site mode: cleanup scaling/temp if preivous deployment is upgrade"
  shell:  rm {{ output_folder_remote }}/scaling/temp/*
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'True') and ( prev_upgrade_files.stderr == "")
  ignore_errors: yes

- name: "Expand-site mode: copy previous upgrade template files for Scaling deployment"
  shell: cp {{ output_folder_remote }}/upgrade/2/temp/*.yaml {{ output_folder_remote }}/scaling/temp/
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'True') and ( prev_upgrade_files.stderr == "")

- name: "Search previous deployment files, check if previous deployment is scaling"
  shell: ls {{ output_folder_remote }}/scaling/{{ os_msptemplate }}
  register: prev_scaling_files
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'True') and ( prev_upgrade_files.stderr != "")
  ignore_errors: yes

- name: "Cleanup scaling/temp if the previous deployment is bulk"
  shell: rm {{ output_folder_remote }}/scaling/temp/*
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'True') and ( prev_upgrade_files.stderr != "") and ( prev_scaling_files.stderr != "")
  ignore_errors: yes

- name: "Copy files frm heat/temp_bak if the previous deployment is bulk"
  shell: cp {{ output_folder_remote }}/heat/temp_bak/*.yaml  {{ output_folder_remote }}/scaling/temp/
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'True') and ( prev_upgrade_files.stderr != "") and ( prev_scaling_files.stderr != "")
  ignore_errors: yes

- name: "Copy files from Heat template file to Scaling deployment folder"
  shell: cp {{ output_folder_remote }}/heat/{{ item }} {{ output_folder_remote }}/scaling/
  when: ( deploy_method | default('bulk') == 'scaling')
  with_items:
     - "flavor.yaml"
     - "network.yaml"
     - "network_pool.yaml"

- name: "Copy 0.yaml from heat temp to scaling temp if change_networks"
  shell: cp {{ output_folder_remote }}/heat/temp/0.yaml {{ output_folder_remote }}/scaling/temp/
  when: ( deploy_method | default('bulk') == 'scaling') and (( expand_site | default ('False') == 'False') or ( ( expand_site | default ('False') == 'True') and ( change_networks | default('False') == 'True')))

- name: "Move 0.yaml out from heat temp dir"
  shell: mv {{ output_folder_remote }}/heat/temp/0.yaml {{ output_folder_remote }}/heat/
  when: ( deploy_method | default('bulk') == 'scaling')

- name: "Transfer the Scaling Deployment script"
  copy: src=scaling.sh dest={{ output_folder_remote }}/scaling/ mode=0755
  when: ( deploy_method | default('bulk') == 'scaling')

- name: "keep new VMs file order per hosts_vmnames"
  shell: touch -c {{ output_folder_remote }}/heat/temp/{{ item }}.yaml
  when: ( deploy_method | default('bulk') == 'scaling')
  with_items: vm_base_names
  ignore_errors: yes

- name: "Expand site-mode: Find the flavor.yaml with absolute path in the running stack"
  action: shell heat template-show {{ os_stackname }} |grep -A 2 "mn_flavor:" |grep "file://" | awk -F"file://" '{print $2}' 
  register: flavor_yaml_path_line
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'True')
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Replace the flavor.yaml line in file {{ output_folder_remote }}/scaling/temp/0.yaml"
  action: shell sed 's|".*flavor.yaml"|"{{ flavor_yaml_path_line.stdout }}"|g' {{ output_folder_remote }}/scaling/temp/0.yaml >{{ output_folder_remote }}/scaling/temp/0.yaml.flavor
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'True') 

- name: "Remove 0.yaml in  {{ output_folder_remote }}/scaling/temp/"
  shell: rm {{ output_folder_remote }}/scaling/temp/0.yaml
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'True')

- name: "Move {{ output_folder_remote }}/scaling/temp/0.temp.flavor as 0.temp"
  shell: mv {{ output_folder_remote }}/scaling/temp/0.yaml.flavor {{ output_folder_remote }}/scaling/temp/0.yaml
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'True')

- debug: msg= "Ready for Scaling Deployment Now."
  when: ( deploy_method | default('bulk') == 'scaling')
  
- name: "Sleep a while"
  shell: sleep 60
  when: ( deploy_method | default('bulk') == 'scaling')

- debug: msg="Please watch the status in Atlas VM via heat stack-list, nova list, cinder list etc, or tail -f {{ output_folder_remote }}/scaling/scaling.log"
  when: ( deploy_method | default('bulk') == 'scaling')

- name: "Execute the scaling deployment script, create several VMs to the stack per vms_per_batch"
  command: "{{ output_folder_remote }}/scaling/scaling.sh {{ output_folder_remote }}/heat {{ output_folder_remote }}/scaling {{  vms_per_batch | default(2) }} {{ os_msptemplate}} {{ os_stackname }} {{ expand_site | default('False') }}"
  when: ( deploy_method | default('bulk') == 'scaling') and (vm_boot | default('True') == 'True')
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Move 0.yaml backt to temp dir"
  shell: mv {{ output_folder_remote }}/heat/0.yaml {{ output_folder_remote }}/heat/temp/
  ignore_errors: yes
  when: ( deploy_method | default('bulk') == 'scaling')

- name: "Copy scaling/temp/* to heat/temp/, special handling for scaling expand-site mode after upgrade case"
  shell: cp -R {{ output_folder_remote }}/scaling/temp/* {{ output_folder_remote }}/heat/temp/
  ignore_errors: yes
  when: ( deploy_method | default('bulk') == 'scaling') and ( expand_site | default ('False') == 'True') and ( prev_upgrade_files.stderr == "") 

- debug: msg="The {{ os_stackname }} template file is {{ output_folder_remote }}/scaling/{{ os_msptemplate }}"
  when: (deploy_method | default('bulk') == 'scaling')

- debug: msg="The {{ os_stackname }} template file is {{ output_folder_remote }}/heat/{{ os_msptemplate }}"
  when: (deploy_method | default('bulk') == 'bulk')
     
- debug: msg="The whole deployment is okay!"


  
