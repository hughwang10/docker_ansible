import yaml, re
from optparse import OptionParser

parser = OptionParser()
parser.add_option("-f", "--file", dest="inputfilename",
                  help="input FILE", metavar="FILE")
parser.add_option("-o", "--output", dest="outputfilename",
                  help="write result to FILE", metavar="FILE")
parser.add_option("-t", "--tracks", dest="tracks", default=1,
                  help="parallel track", metavar="Integer")
parser.add_option("-i", "--includefilter", dest="includefilter", default="^.*$",
                  help="inclusion filter", metavar="String")

(options, args) = parser.parse_args()

stream = open(options.inputfilename, 'r')
data = yaml.load(stream)
prevresource = []

for i in range(0, int(options.tracks)):
  prevresource.append( "" )

tracks = int(options.tracks)
resource_number = 0

for resource in data['resources'] :
  if data['resources'][resource]['type'] == "OS::Cinder::Volume" and 'depends_on' not in data['resources'][resource] and re.match(options.includefilter, resource) and (re.match("^.*_mn_.*", resource) or re.match(".*_mon_.*", resource)):
    if prevresource[resource_number % tracks] <> "":
      data['resources'][resource]['depends_on'] = prevresource[resource_number % tracks]
    prevresource[resource_number % tracks] = resource
    resource_number = resource_number + 1

for resource in data['resources'] :
  if data['resources'][resource]['type'] == "OS::Cinder::Volume" and 'depends_on' not in data['resources'][resource] and re.match(options.includefilter, resource) and not re.match(".*_mn_.*", resource) and not re.match(".*_mon_.*", resource):
    if prevresource[resource_number % tracks] <> "":
      data['resources'][resource]['depends_on'] = prevresource[resource_number % tracks]
    prevresource[resource_number % tracks] = resource
    resource_number = resource_number + 1

with open(options.outputfilename, 'w') as yaml_file:
    yaml_file.write( yaml.dump(data, default_flow_style=False))



