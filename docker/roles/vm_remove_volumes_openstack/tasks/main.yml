# Copyright (C) 2015 by
# Ericsson AB
# S-164 83 Stockholm
# Sweden
# Tel: +46 10 719 00 00
#
# The program may be used and/or copied only with the written permission
# from Ericsson AB, or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the program
# has been supplied.
#
# All rights reserved.
# tasks file for roles/vm2_upgrade_vbox

- debug: msg = "Remove the volumes of Old VM after upgrade"

- name: "check if there are volumes in {{ os_stackname }}"
  shell: heat template-show {{ os_stackname }} | grep "OS::Cinder::Volume" | wc -l
  when: cee_dryrun | default('False') == 'False'
  register: old_volumes_in_single_stack
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "check if the new deployment is multi stack"
  shell: ls -F {{ output_folder_remote }}/heat/temp/ | grep "/" | sed 's/.$//'| wc -l
  register: new_multi_stack

- name: "Find vm template files for the running stack"
  shell: ls {{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}
  when: hagroup is not defined and ( old_volumes_in_single_stack.stdout == '0' or new_multi_stack.stdout == '0' ) 

- name: "Transfer the remove_volume script for single stack case"
  copy: src=remove_volumes.sh dest={{ output_folder_remote }}/upgrade/2/ mode=0755
  when: hagroup is not defined and ( old_volumes_in_single_stack.stdout == '0' or new_multi_stack.stdout == '0' )

- name: "Transfer the remove_volume script for single stack case, single -> multi upgrade"
  copy: src=remove_volumes.sh dest={{ output_folder_remote }}/upgrade/1/ mode=0755
  when: hagroup is not defined and old_volumes_in_single_stack.stdout != '0' and  new_multi_stack.stdout != '0'

- name: "Find vm template file for the running stack, {{ hagroup }}"
  shell: ls {{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}_{{ hagroup }}
  when: hagroup is defined and ( hagroup != 'all_groups' )

- name: "Transfer the get_uc_volumes script for {{ hagroup }}"
  copy: src=get_uc_volumes.sh dest={{ output_folder_remote }}/upgrade/2/ mode=0755
  when: hagroup is defined 

- name: "Execute the script to get uc volumes in the running stack, {{ hagroup }}"
  command: "{{ output_folder_remote }}/upgrade/2/get_uc_volumes.sh {{ output_folder_remote }} {{ hagroup }}"
  when: hagroup is defined and ( hagroup != 'all_groups' )

- name: "Remove all old CP volumes in {{ output_folder_remote }}/upgrade/2/temp/{{ hagroup }}/"
  shell: rm -f {{ output_folder_remote }}/upgrade/2/temp/{{ hagroup }}/*-vols.yaml
  when: hagroup is defined and ( hagroup != 'all_groups' )
  ignore_errors: yes

- name: "Assemble template file for upgrade/2, {{ hagroup }}"
  action: assemble dest="{{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}_{{ hagroup }}.orig" src="{{ output_folder_remote}}/upgrade/2/temp/{{ hagroup }}"
  when: ( upgrade_method | default('bulk') == 'bulk') and ( hagroup is defined ) and ( hagroup != 'all_groups' )

# - name: "Transfer the depends.py script"
#  copy: src=depends.py dest={{ output_folder_remote }}/upgrade/2/ mode=0755
#  when: ( upgrade_method | default('bulk') == 'bulk')

- name: "Add dependency per resource_creation_channels"
  action: shell python {{ output_folder_remote }}/upgrade/2/depends.py -f {{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}_{{ hagroup }}.orig -o {{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}_{{ hagroup }}.depends -t {{ resource_creation_channels | default('0') }}
  when: ( upgrade_method | default('bulk') == 'bulk') and ( resource_creation_channels | default('0') != '0') and ( hagroup is defined ) and ( hagroup != "all_groups"  )

- name: "Use {{ os_msptemplate }}_{{ hagroup }}.depends as {{ os_msptemplate }}_{{ hagroup }}"
  shell: mv {{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}_{{ hagroup }}.depends {{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}_{{ hagroup }}
  when: ( upgrade_method | default('bulk') == 'bulk') and ( resource_creation_channels | default('0') != '0') and ( hagroup is defined ) and ( hagroup != "all_groups" )

- name: "Use {{ os_msptemplate }}_{{ hagroup }}.orig as {{ os_msptemplate }}_{{ hagroup }}"
  shell: mv {{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}_{{ hagroup }}.orig {{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}_{{ hagroup }}
  when: ( upgrade_method | default('bulk') == 'bulk') and ( resource_creation_channels | default('0') == '0') and ( hagroup is defined ) and ( hagroup != "all_groups" )

- name: "sleep a while"
  shell: sleep 60
  when: ( hagroup is not defined ) or ( hagroup is defined and hagroup != 'all_groups' ) and ( cee_dryrun | default('False') == 'False' )

- debug: msg="Remove volumes of Old VMs"
  when: ( hagroup is not defined ) or ( hagroup is defined and hagroup != 'all_groups' )

- debug: msg="Please watch the status in Atlas VM via heat stack-list, nova list, cinder list etci, or tail {{ output_folder_remote }}/upgrade/2/remove_volumes.log"
  when: hagroup is not defined 
   
- name: "Execute the remove_volumes script, remove old volumes"
  command: "{{ output_folder_remote }}/upgrade/2/remove_volumes.sh {{ output_folder_remote }}/upgrade/2 {{ os_msptemplate}} {{ os_stackname }}"
  when: hagroup is not defined  and ( old_volumes_in_single_stack.stdout == '0' or new_multi_stack.stdout == '0' )
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Execute the upgrade script, remove old volumes"
  command: "{{ output_folder_remote }}/upgrade/1/remove_volumes.sh {{ output_folder_remote }}/upgrade/1 {{ os_msptemplate}} {{ os_stackname }}"
  when: hagroup is not defined and old_volumes_in_single_stack.stdout != '0' and  new_multi_stack.stdout != '0'
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Wait till the stack update completed - Phase/2"
  action: shell heat stack-list |grep {{ os_stackname }}
  when: hagroup is not defined
  register: result
  until: result.stdout.find("UPDATE_COMPLETE") !=-1
  retries: 1200
  delay:  5 
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "using python-heatclient heat stack-update - Bulk Upgrade, hagroup {{ hagroup }}"
  when: (upgrade_method | default('bulk') == 'bulk') and ( hagroup is defined ) and ( hagroup != "all_groups" ) and ( cee_dryrun | default('False') == 'False') and ( use_heat_env_file | default('False') == 'False')
  action: shell heat stack-update -f {{output_folder_remote }}/upgrade/2/{{ os_msptemplate }}_{{ hagroup }} {{ os_stackname }}_{{ hagroup }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "using python-heatclient heat stack-update - Bulk Upgrade, hagroup {{ hagroup }}"
  when: (upgrade_method | default('bulk') == 'bulk') and ( hagroup is defined ) and ( hagroup != "all_groups" ) and ( cee_dryrun | default('False') == 'False') and ( use_heat_env_file | default('False') == 'True')
  action: shell heat stack-update -f {{output_folder_remote }}/upgrade/2/{{ os_msptemplate }}_{{ hagroup }} -e {{ output_folder_remote }}/heat/{{ os_stackname }}_heat_env_file {{ os_stackname }}_{{ hagroup }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Wait till the stack update completed - Bulk Deployment"
  when: ( upgrade_method | default('bulk') == 'bulk') and ( hagroup is defined ) and ( hagroup != "all_groups" ) and ( cee_dryrun | default('False') == 'False' )
  action: shell heat stack-list |grep {{ os_stackname }}_{{ hagroup }}
  register: result
  until: result.stdout.find("COMPLETE") !=-1
  retries: 10000
  delay:  5
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Transfer the remove_old_vols_all_groups script for all_groups case"
  copy: src=remove_old_vols_all_groups.sh dest={{ output_folder_remote }}/upgrade/ mode=0755
  when: ( upgrade_method | default('bulk') == 'bulk') and ( hagroup is defined ) and ( hagroup == "all_groups" )
  
- name: "Remove old volumes for all hagroups via the remove_old_vols_all_groups script, refer to log file {{ output_folder_remote }}/upgrade/remove_old_vols_all_groups.log"
  command: "{{ output_folder_remote }}/upgrade/remove_old_vols_all_groups.sh {{ output_folder_remote }} {{ resource_creation_channels | default('0') }} {{ os_msptemplate }} {{ os_stackname }} {{ use_heat_env_file | default('False') }} {{ cee_dryrun | default('False') }}" 
  when: ( upgrade_method | default('bulk') == 'bulk')  and ( hagroup is defined ) and ( hagroup == "all_groups" )
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- debug: msg="Remove the volumes of Old VMs is Done"


