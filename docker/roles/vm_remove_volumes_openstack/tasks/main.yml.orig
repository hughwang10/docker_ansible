---
# Copyright (C) 2015 by
# Ericsson AB
# S-164 83 Stockholm
# Sweden
# Tel: +46 10 719 00 00
#
# The program may be used and/or copied only with the written permission
# from Ericsson AB, or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the program
# has been supplied.
#
# All rights reserved.
# tasks file for roles/vm2_upgrade_vbox

- name: "Find vm template files for the running stack"
  shell: ls {{ output_folder_remote_old }}/upgrade/2/{{ os_msptemplate }}
  register: new_template_files_found
  ignore_errors: yes

- name: "Find vm template files for the running stack"
  shell: ls {{ output_folder_remote_old }}/heat/{{ os_msptemplate }}
  register: new_template_files_found2
  when: new_template_files_found.stderr != ""
  ignore_errors: yes

- name: "Create heat template directory for upgrade"
  action: file path={{ output_folder_remote }}/upgrade/0/temp_old state=directory
  ignore_errors: yes

- name: "Create heat template directory for upgrade"
  action: file path={{ output_folder_remote }}/upgrade/0/temp state=directory
  ignore_errors: yes

- name: "Clean temp_old dir"
  shell: rm {{ output_folder_remote }}/upgrade/0/temp_old/*
  ignore_errors: yes

- name: "Clean temp dir"
  shell: rm {{ output_folder_remote }}/upgrade/0/temp/*
  ignore_errors: yes

- name: "Copy vm template files - new style"
  shell: cp -R {{ output_folder_remote_old }}/upgrade/2/* {{ output_folder_remote }}/upgrade/0/
  when: new_template_files_found.stderr == ""

# In case the current running system is CP02, which is upgraded from CP01
# and we need to upgrade to CP03 now
# We will remove CP01 volumes in upgrade/1 when upgrading from CP02 to CP03 

- name: "Remove old CP volumes - new style"
  shell: rm -f {{ output_folder_remote }}/upgrade/0/temp/*vols.yaml
  when: new_template_files_found.stderr == ""
  ignore_errors: yes 

- name: "Copy vm template files - new style"
  shell: cp -R {{ output_folder_remote_old }}/heat/* {{ output_folder_remote }}/upgrade/0/
  when:  new_template_files_found.stderr != "" and new_template_files_found2.stderr == "" 

- name: "Copy vm template files - old style  a bit ugly 0"
  shell: cp /home/atlasadm/temp/* {{ output_folder_remote }}/upgrade/0/temp_old/
  when: new_template_files_found.stderr !="" and new_template_files_found2.stderr !=""

- name: "Merge multiple DDC files - 0"
  shell: rm {{ output_folder_remote }}/upgrade/0/temp_old/ddc*.yaml
  when: new_template_files_found.stderr !="" and new_template_files_found2.stderr !=""

- name: "Merge multiple DDC files - 1"
  shell: cat /home/atlasadm/temp/ddc*.yaml >{{ output_folder_remote }}/upgrade/0/temp_old/ddc-1.yaml
  when: new_template_files_found.stderr !="" and new_template_files_found2.stderr !=""

- name: "Split old style vm template files to new style, a bit ugly"
  shell: awk '/MSP VM mspstack-{{ item | regex_replace('^(.*)-.*$', '\\1') }}-/{close(p".yaml");p=substr($3,index($3,"-")+1,length($3))}{print > "{{ output_folder_remote }}/upgrade/0/temp/"p".yaml"}' {{ output_folder_remote }}/upgrade/0/temp_old/{{ item | regex_replace('^(.*)-.*$', '\\1') }}-1.yaml
  when: new_template_files_found.stderr !="" and new_template_files_found2.stderr !=""
  ignore_errors: yes
  with_items: vm_base_names

- name: " Copy VM template files - old style, a bit ugly 2"
  shell: cp /home/atlasadm/temp/0.yaml {{ output_folder_remote }}/upgrade/0/temp/
  when: new_template_files_found.stderr !="" and  new_template_files_found2.stderr !=""

- name: "Copy vm template files - old style, a bit ugly 3"
  shell: cp /home/atlasadm/{{ item }} {{ output_folder_remote }}/upgrade/0/
  when: new_template_files_found.stderr !="" and  new_template_files_found2.stderr !=""
  with_items:
        - "network.yaml"
        - "network_pool.yaml"
        - "flavor.yaml"
        - "{{ os_msptemplate }}"

- name: "Add a blank in the end of 0.yaml, for merge"
  shell: echo '' >> {{ output_folder_remote }}/upgrade/0/temp/0.yaml  
  
- debug: msg = "Build template file for Upgrade/1"

# All old VM files are in {{ output_folder_remote }}/upgrade/0/, copied from running stack
# All new VM files are in {{ output_folder_remote }}/heat/

- name: "mkdir upgrade/1"
  action: file path={{ output_folder_remote }}/upgrade/1/temp state=directory
  ignore_errors: yes

- name: "clean temp dir"
  shell: rm {{ output_folder_remote }}/upgrade/1/temp/*
  ignore_errors: yes

- name: "Gen the MSP common template file, find root volume"
  shell: sed -n '/.*_volume_[a-zA-Z0-9_]*:/,/^$/p' > '{{ output_folder_remote }}/upgrade/1/temp/{{ item }}-vols.yaml' {{ output_folder_remote }}/upgrade/0/temp/{{ item }}.yaml
  ignore_errors: yes
  with_items: vm_base_names 

- name: "Copy files from old stack to uprgade/1"
  shell: cp {{ output_folder_remote }}/upgrade/0/{{ item }} {{ output_folder_remote }}/upgrade/1/
  with_items:
        - "network.yaml"
        - "network_pool.yaml"
        - "flavor.yaml"

- name: "Copy files from old stack to upgrade/1"
  shell: cp {{ output_folder_remote }}/upgrade/0/temp/0.yaml {{output_folder_remote }}/upgrade/1/temp/0.yaml 

- name: "Assemble template file will be used for upgrade/1"
  action: assemble dest="{{ output_folder_remote }}/upgrade/1/{{ os_msptemplate }}" src="{{ output_folder_remote}}/upgrade/1/temp" 

- debug: msg="template file for upgrade/1 is ready now"

- name: "sleep a while"
  shell: sleep 60

- name: "Update the running stack to remove the old VM - Phase/1"
  when: (action == "deploy_openstack")
  action: shell heat stack-update -f {{output_folder_remote }}/upgrade/1/{{ os_msptemplate }} -t 600 {{ os_stackname }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Wait till the stack update completed - Phase/1"
  when: (action == "deploy_openstack")
  action: shell heat stack-list |grep {{ os_stackname }}
  register: result
  until: result.stdout.find("UPDATE_COMPLETE") !=-1
  retries: 10000
  delay:  5 
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- debug: msg="Upgrade/1 is done"

- name: "sleep a while"
  shell: sleep 60

- debug: msg="Build template file for upgrade/2"

- name: "mkdir upgrade/2"
  action: file path={{ output_folder_remote }}/upgrade/2/temp state=directory
  ignore_errors: yes

- name: "clean the dir"
  shell: rm {{ output_folder_remote }}/upgrade/2/temp/*
  ignore_errors: yes

- name: "Copy template file from upgrade/1 to upgrade/2"
  shell: cp -R {{ output_folder_remote }}/upgrade/1/* {{ output_folder_remote }}/upgrade/2/

- name: "Move 0.yaml in folder {{ output_folder_remote}}/heat/temp"
  shell: mv {{ output_folder_remote }}/heat/temp/0.yaml {{ output_folder_remote }}/heat/
  ignore_errors: yes

- name: "keep new VMs file order per hosts_vmnames"
  shell: touch -c {{ output_folder_remote }}/heat/temp/{{ item }}.yaml
  with_items: vm_base_names
  ignore_errors: yes

- name: "Transfer the upgrade script"
  copy: src=upgrade.sh dest={{ output_folder_remote }}/upgrade/2/ mode=0755

- name: "sleep a while"
  shell: sleep 60

- debug: msg="Please watch the status in Atlas VM via heat stack-list, nova list, cinder list etc"
   
- name: "Execute the upgrade script, add several VMs to the running stack per vms_per_batch"
  command: "{{ output_folder_remote }}/upgrade/2/upgrade.sh {{ output_folder_remote }}/heat {{ output_folder_remote }}/upgrade/2 {{ vms_per_batch | default(2) }} {{ os_msptemplate}} {{ os_stackname }}"
#  args:
#    source_dir: "{{ output_folder_remote }}/heat" 
#    dest_dir: "{{ output_folder_remote }}/upgrade/2" 
#    vms: "{{ vms_per_batch | default(2) }}" 
#    template_file: "{{ os_msptemplate}}" 
#    stack_name: "{{ os_stackname }}"
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Wait till the stack update completed - Phase/2"
  when: (action == "upgrade_openstack") and (vm_boot | default('True') == 'True')
  action: shell heat stack-list |grep {{ os_stackname }}
  register: result
  until: result.stdout.find("UPDATE_COMPLETE") !=-1
  retries: 1200
  delay:  5 
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- debug: msg="The {{ os_stackname }} template file is {{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}"
      
- debug: msg="Upgrade/2 is done, The whole Upgrade process is okay!"

#- name: "add all vms to group vms"
#  local_action: add_host name={{ item }} groups=vms 
#  with_items: vm_base_names

#{% if groups['vms'] is defined %}
#{% for vm in groups['vms'] %}

#- name: "add template for vm {{ vm }} into upgrade/2"
#  shell: cp {{ output_folder_remote }}/heat/temp/{{ vm }}.yaml {{ output_folder_remote }}/upgrade/2/temp/

#{% if loop.index % 2 == 0 %}

#- name: "Assemble template file will be used for upgrade/2"
#  action: assemble dest="{{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}" src="{{ output_folder_remote}}/upgrade/2/temp"

#{% endif %}
#{% endfor %}

#- name: "add template for vm {{ item }} into upgrade/2"
#  shell: cp {{ output_folder_remote }}/heat/temp/{{ item.item }}.yaml {{ output_folder_remote }}/upgrade/2/temp/

#{% if loop.index % ( vms_per_batch | default(2)) = 0 %}

#- name: "Assemble template file will be used for upgrade/2"
#  action: assemble dest="{{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}" src="{{ output_folder_remote}}/upgrade/2/temp"

#- name: "sleep a while"
#  shell: sleep 60

#{% endif %} 

#{% endfor %}

#- name: "Now add new VMs step by step, controlled by VMS_PER_BATCH??"
#  shell: cp -R {{ output_folder_remote }}/heat/temp/{{ item }}.yaml {{ output_folder_remote }}/upgrade/2/temp/
#  with_items: vm_base_names 

#- name: "Assemble template file will be used for upgrade/2"
#  action: assemble dest="{{ output_folder_remote }}/upgrade/2/{{ os_msptemplate }}" src="{{ output_folder_remote}}/upgrade/2/temp"

#- debug: msg="template file for upgrade/2 is ready now"

#- name: "sleep a while"
#  shell: sleep 60

# For MN, we need to take care of extra volumes
#- name: "Edit old MN VM template file, keep volumes only"

# For TS, we need to take care of extra volumes
#- name: "Edit old TS VM template file, keep volumes only 0"
#  shell: shell cat {{ output_folder_remote }}/upgrade/heat/temp/{{ vm_name }}.yaml |grep block_device_mapping | awk -F: '{print $7}'
#  register: result
#  when: (vm_type == "ts")

#- name: "Edit old TS VM template file, keep volumes only 1"
#  set_fact: uc_volume_name = {{ result.stdout | regex_replace('.*(uc_.*) ', '\\1') }}
#  when: (vm_type == "ts")

#- name: "Edit old TS VM template file, keep volumes only 2"
#  shell: sed -n '/{{ uc_volme_name }}:/,/^$/p' > '{{ output_folder_remote }}/upgrade/heat/temp/{{ vm_name}}-vols.yaml' {{ output_folder_remote }}/upgrade/heat/temp/{{ vm_name}}.yaml
#  when: (vm_type == "ts")

#- name: "Remove the Old running VMs template file"
#  shell: rm {{ output_folder_remote }}/upgrade/heat/temp/{{ vm_name}}.yaml

#- name: "Re-assemble VM files"
#  when: action == "upgrade_openstack"
#  action: assemble dest="{{ output_folder_remote }}/upgrade/heat/{{ os_msptemplate }}" src="{{ output_folder_remote }}/upgrade/heat/temp"

#- name: "Update the running stack to remove the old VM"
#  when: (action == "upgrade_openstack") and (vm_boot | default('True') == 'True')
#  action: shell heat stack-update -f {{output_folder_remote }}/upgrade/heat/{{ os_msptemplate }} {{ os_stackname }}
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"

#- name: "Wait till the stack update completed"
#  when: (action == "upgrade_openstack") and (vm_boot | default('True') == 'True')
#  action: shell heat stack-list |grep {{ os_stackname }}
#  register: result
#  until: result.stdout.find("UPDATE_COMPLETE") !=-1
#  retries: 60
#  delay:   10
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"

#- debug: msg = " old {{ vm_name }} has been removed from stack {{ os_stackname }}"

#- name: "Prep template file for the New VMs"
#  shell: cp {{ output_folder_remote }}/heat/temp/{{ vm_name }}.yaml {{ output_folder_remote }}/upgrade/heat/temp/
#  when: (vm_type != "mn") and (vm_type != "ts")

#- name: "Re-assemble VM files"
#  when: action == "upgrade_openstack"
#  action: assemble dest="{{ output_folder_remote }}/upgrade/heat/{{ os_msptemplate }}" src="{{ output_folder_remote }}/upgrade/heat/temp"

#- name: "Update the running stack to add the new VM"
#  when: (action == "upgrade_openstack") and (vm_boot | default('True') == 'True')
#  action: shell heat stack-update -f {{output_folder_remote }}/upgrade/heat/{{ os_msptemplate }} {{ os_stackname }}
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"

#- name: "Wait till the stack update completed"
#  when: (action == "upgrade_openstack") and (vm_boot | default('True') == 'True')
#  action: shell heat stack-list |grep {{ os_stackname }}
#  register: result
#  until: result.stdout.find("UPDATE_COMPLETE") !=-1
#  retries: 60
#  delay:   10
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"

#- debug: msg = " new {{ vm_name }} has been added into stack {{ os_stackname }}"


