---
# Copyright (C) 2015 by
# Ericsson AB
# S-164 83 Stockholm
# Sweden
# Tel: +46 10 719 00 00
#
# The program may be used and/or copied only with the written permission
# from Ericsson AB, or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the program
# has been supplied.
#
# All rights reserved.

- name: "assemble stack template files - {{ hagroup }}"
  when: ( action == "deploy_openstack" ) and ( deploy_method | default('bulk') == 'bulk') and ( hagroup != "all_groups" )
  action: assemble dest="{{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }}.orig" src="{{ output_folder_remote}}/heat/temp/{{ hagroup }}"

- name: "Transfer the depends.py script"
  copy: src=depends.py dest={{ output_folder_remote }}/heat/ mode=0755
  when: ( deploy_method | default('bulk') == 'bulk')

- name: "Add dependency per resource_creation_channels"
  action: shell python {{ output_folder_remote }}/heat/depends.py -f {{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }}.orig -o {{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }}.depends -t {{ resource_creation_channels | default('0') }}
  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk') and ( resource_creation_channels | default('0') != '0') and ( hagroup != "all_groups" )

- name: "Use {{ os_msptemplate }}_{{ hagroup }}.depends as {{ os_msptemplate }}_{{ hagroup }}"
  shell: mv {{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }}.depends {{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }}
  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk') and ( resource_creation_channels | default('0') != '0') and ( hagroup != "all_groups" )

- name: "Use {{ os_msptemplate }}_{{ hagroup }}.orig as {{ os_msptemplate }}_{{ hagroup }}"
  shell: mv {{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }}.orig {{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }}
  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk') and ( resource_creation_channels | default('0') == '0') and ( hagroup != "all_groups" )

- name: "Check if there is a running same stack"
  action: shell heat stack-list |grep -w {{ os_stackname }}_{{ hagroup }}
  when: action == "deploy_openstack" and (hagroup is defined) and ( hagroup != "all_groups" ) and (cee_dryrun | default('False') == 'False')
  register: same_stack_exists
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Assign vars.. stack-create"
  set_fact: stack_method='stack-create'
  when: action == "deploy_openstack" and (hagroup is defined) and ( hagroup != "all_groups" ) and (same_stack_exists.stdout == '')

- name: "Assign vars.. stack-create"
  set_fact: stack_method='stack-update'
  when: action == "deploy_openstack" and (hagroup is defined) and ( hagroup != "all_groups" ) and (same_stack_exists.stdout != '')

- name: "Deploy {{ hagroup }} using python-heatclient heat {{ stack_method }} - Bulk Deployment, Heat Rollback Enabled"
  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk' ) and ( hagroup != "all_groups" ) and ( heat_rollback | default('False') == 'True') and ( use_heat_env_file | default('False') == 'False') and ( cee_dryrun | default('False') == 'False')
  action: shell heat {{ stack_method }} -f {{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }} -r -t 600 {{ os_stackname }}_{{ hagroup }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Deploy {{ hagroup }} using python-heatclient heat {{ stack_method }} - Bulk Deployment, Heat Rollback Enabled"
  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk' ) and ( hagroup != "all_groups" ) and ( heat_rollback | default('False') == 'True') and ( use_heat_env_file | default('False') == 'True') and ( cee_dryrun | default('False') == 'False')
  action: shell heat {{ stack_method }} -f {{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }} -e {{ output_folder_remote }}/heat/{{ os_stackname }}_heat_env_file -r -t 600 {{ os_stackname }}_{{ hagroup }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Deploy {{ hagroup }} using python-heatclient heat {{ stack_method }} - Bulk Deployment, Heat Rollback Enabled"
  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk' ) and ( hagroup != "all_groups" ) and ( heat_rollback | default('False') == 'False') and ( use_heat_env_file | default('False') == 'False') and ( cee_dryrun | default('False') == 'False')
  action: shell heat {{ stack_method }} -f {{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }} -t 600 {{ os_stackname }}_{{ hagroup }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Deploy {{ hagroup }} using python-heatclient heat {{ stack_method }} - Bulk Deployment, Heat Rollback Enabled"
  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk' ) and ( hagroup != "all_groups" ) and ( heat_rollback | default('False') == 'False') and ( use_heat_env_file | default('False') == 'True') and ( cee_dryrun | default('False') == 'False')
  action: shell heat {{ stack_method }} -f {{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }} -e {{ output_folder_remote }}/heat/{{ os_stackname }}_heat_env_file -t 600 {{ os_stackname }}_{{ hagroup }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

#- name: "Deploy using python-heatclient heat stack-update - Bulk Deployment"
#  when: (action == "deploy_openstack") and (manage_networks | default('True') == 'False') and (deploy_method | default('bulk') == 'bulk') and ( hagroup != "all_groups" )
#  action: shell heat stack-update -f {{output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }} {{ os_stackname }}_{{ hagroup }}
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Wait till the stack update completed - Bulk Deployment" 
  when: (action == "deploy_openstack") and ( deploy_method | default('bulk') == 'bulk') and ( hagroup != "all_groups" ) and ( cee_dryrun | default('False') == 'False')
  action: shell heat stack-list |grep -w {{ os_stackname }}_{{ hagroup }}
  register: result
  until: (result.stdout.find("COMPLETE") !=-1) or (result.stdout.find("FAIL") !=-1) 
  retries: 10000
  delay:  5
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- debug: msg="The {{ os_stackname }}_{{ hagroup }} template file is {{ output_folder_remote }}/heat/{{ os_msptemplate }}_{{ hagroup }}"
  when: (deploy_method | default('bulk') == 'bulk') and ( hagroup != "all_groups" )

- name: "Transfer the deploy_all_groups script"
  copy: src=deploy_all_groups.sh dest={{ output_folder_remote }}/heat/ mode=0755
  when: ( deploy_method | default('bulk') == 'bulk')  and ( hagroup == "all_groups" )

- debug: var="{{ output_folder_remote }}/heat/deploy_all_groups.sh {{ output_folder_remote }}/heat {{ resource_creation_channels | default('0') }} {{ os_msptemplate}} {{ os_stackname }} {{ heat_rollback | default('False') }} {{ use_heat_env_file | default('False') }} {{ cee_dryrun | default('False') }}"
  when: ( deploy_method | default('bulk') == 'bulk')  and ( hagroup == "all_groups" )

- name: "Execute the deploy_all_groups script, creating all hagroups automatically"
  command: "{{ output_folder_remote }}/heat/deploy_all_groups.sh {{ output_folder_remote }}/heat {{ resource_creation_channels | default('0') }} {{ os_msptemplate}} {{ os_stackname }} {{ heat_rollback | default('False') }} {{ use_heat_env_file | default('False') }} {{ cee_dryrun | default('False')}}"
  when:  (action == "deploy_openstack") and ( hagroup == "all_groups" ) 
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- debug: msg="The deployment for hagroup {{ hagroup }} is done!"


  
