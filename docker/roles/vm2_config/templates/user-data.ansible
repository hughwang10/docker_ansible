{% extends "user-data-template.ansible" %}
{% block header %}
#cloud-config
{{ super() }}
# \brief   cloud-init template for MSP config
# \version 0.2.50
# \date    2016-05-12
# Configuration created for MSP {{ msp_linux_distro | default("SLES_11") }} {{ vm_type }}
{% endblock header %}

{% block passwd %}
{{ super() }}
 expire: False
#ssh_pwauth: [ True, False, "" or "unchanged" ]
{% endblock passwd %}

{% block bootcmd %}
{{ super() }}{{ self.runcmd_first_boot_issue_file() }}{{ self.runcmd_config_auto_dns() }}
{% endblock bootcmd %}

{% block runcmd %}
{{ super() }}
{{ self.runcmd_grub2() }}
{{ self.runcmd_ntp_client() }}
{{ self.runcmd_remove_unused_ifcfg() }}
{{ self.runcmd_rename_nics() }}
{{ self.runcmds_policy_routing() }}
{% if bnc879921_hack | default(False) %}{{ self.runcmd_nielsen() }}{% endif %}
{{ self.runcmd_customregpasswd() }}
{{ self.runcmd_expandisk() }}
{{ self.runcmd_kerneltuning() }}
{{ self.runcmd_irqbalance_args() }}
{{ self.runcmd_update_bashrc_file() }}
{{ self.runcmd_nic_int_opt() }}
{{ self.runcmd_update_hosts_file() }}
{{ self.runcmd_bindssh() }}
{{ self.runcmd_afg_snmp() }}
{{ self.runcmd_dns() }}
{% if ((vmware_tools == True) or (vmware_tools == 'True') or (deploy_platform == 'deploy_vsphere')) and msp_linux_distro | match("SLES_11.*") %}{{ self.runcmd_vmware_tools() }}{% endif %}
{% if universalcache | default(False) and vm_type in [ "dk", "ts" ] %}{{ self.runcmd_universalcache() }}{% endif %}
{{ self.runcmd_custom_users() }}
{{ self.runcmd_netrestart() }}
{{ self.runcmd_afg_custom_pre() }}
{{ self.runcmd_afg_configure_esa() }}
{{ self.runcmd_afg_configure_ntp() }}
{{ self.runcmd_misc() }}
{% if vm_type == "ts" %}{{ self.insert_ts_extrafile() }}{% endif %}
{% if vm_type == "dk" %}{{ self.insert_ts_extrafile() }}{% endif %}
{% if vm_type != "mn" %}{{ self.runcmd_custom_post() }}{% endif %}
{# {% if vm_type == "slb" %}{{ self.afg_slb_ipv6_ping_gwy() }}{% endif %} #}
{% if vm_type in [ "tools" ] %}{{ self.runcmd_updatepeerarp() }}{% endif %}
{{ self.runcmd_afg_hardening() }}
{{ self.runcmd_ssh_custom_security() }}
{% endblock runcmd %}

{% block scripts_per_once %}
{{ super() }}
{% endblock scripts_per_once %}

{% block passwd_ageing %}
{% for account in [ "root", "miepadm" ] %}
 - [ sh, -xc, "chage -M {{ passwd_ageing | default("60") }} {{ account }};rm -f /etc/shadow-" ]
{% endfor %}
{% endblock passwd_ageing %}

{% block runcmd_config_auto_dns %}{% if dns_ips is defined %}
 - [ sh, -xc, "/bin/sed -i 's/^NETCONFIG_DNS_POLICY=.*/NETCONFIG_DNS_POLICY=\"STATIC\"/' /etc/sysconfig/network/config" ]
{% endif %}
{% endblock runcmd_config_auto_dns %}

{% block runcmd_expandisk %}{% if msp_linux_distro | match("SLES_11.*") %}
 - [ sh, -xc, "[ -f /opt/miep/tools/expandisk.sh ] && /opt/miep/tools/expandisk.sh {{ vm_type }}" ]
{% endif %}{% endblock runcmd_expandisk %}

{% block runcmd_updatepeerarp %}{% if msp_linux_distro | match("SLES_11.*") %}
 - [ sh, -xc, "[ -f /opt/miep/tools/updatepeerarp.sh ] && /opt/miep/tools/updatepeerarp.sh {{ vm_type }}" ]
{% endif %}{% endblock runcmd_updatepeerarp %}

{% block runcmd_remove_unused_ifcfg %}{% for vmnicx in [ 0,1,2,3,4,5 ] %}{% endfor %}{% if vmnic_0 != vmnic_0_edev %}
 - [ sh, -xc, "rm -f /etc/sysconfig/network/ifcfg-eth0" ]
{% endif %}
{% if vmnic_1 != vmnic_1_edev %}
 - [ sh, -xc, "rm -f /etc/sysconfig/network/ifcfg-eth1" ]
{% endif %}
{% if vmnic_2 != vmnic_2_edev %}
 - [ sh, -xc, "rm -f /etc/sysconfig/network/ifcfg-eth2" ]
{% endif %}
{% if vmnic_3 != vmnic_3_edev %}
 - [ sh, -xc, "rm -f /etc/sysconfig/network/ifcfg-eth3" ]
{% endif %}
{% if vmnic_4 != vmnic_4_edev %}
 - [ sh, -xc, "rm -f /etc/sysconfig/network/ifcfg-eth4" ]
{% endif %}
{% if vmnic_5 != vmnic_5_edev %}
 - [ sh, -xc, "rm -f /etc/sysconfig/network/ifcfg-eth5" ]
{% endif %}
{% endblock runcmd_remove_unused_ifcfg %}

{% block runcmd_custom_pre %}{% if custom_repos is defined %} - [ sh, -xc, "mkdir /mnt/customizations" ]
 - [ sh, -xc, "mount -o loop /dev/sr0 /mnt/customizations" ]
{% for repo in custom_repos %} - [ sh, -xc, "wget http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }}/repodata/repomd.xml || ip route" ]
 - [ sh, -xc, "wget http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }}/repodata/repomd.xml && /usr/bin/zypper -n ar -f http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }} {{ repo }}" ]
 - [ sh, -xc, "wget http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }}/repodata/repomd.xml || /usr/bin/zypper -n ar -f /mnt/customizations/{{ repo }} {{ repo }}" ]
{% endfor %}
{% if custom_rpms is defined %} - [ sh, -xc, "/usr/bin/zypper --non-interactive --no-gpg-checks in {% for rpm in custom_rpms %}{% if vm_type in rpm.vm_types | default(all_vm_types) %}{{ rpm.rpm }} {% endif %}{% endfor %}" ]
{% endif %}
 - [ sh, -xc, "umount /mnt/customizations" ]
{% endif %}
{% if system_repo is defined and system_rpms is defined and system_rpms.stdout_lines is defined and system_rpms.stdout_lines | length > 0 %} - [ sh, -xc, "mkdir /mnt/customizations" ]
 - [ sh, -xc, "mount -o loop /dev/sr0 /mnt/customizations" ]
{% for repo in [ "system-repo" ] %} - [ sh, -xc, "wget http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }}/repodata/repomd.xml && /usr/bin/zypper -n ar -t YUM -G -f http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }} {{ repo }}" ]
 - [ sh, -xc, "wget http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }}/repodata/repomd.xml || /usr/bin/zypper -n ar -t YUM -G -f /mnt/customizations/{{ repo }} {{ repo }}" ]
{% endfor %}
{% if system_rpms is defined and system_rpms.stdout_lines is defined and system_rpms.stdout_lines | length > 0 %} - [ sh, -xc, "/usr/bin/zypper --non-interactive --no-gpg-checks in {{ system_rpms.stdout_lines | join(' ') }}" ]
{% endif %}
 - [ sh, -xc, "umount /mnt/customizations" ]
{% endif %}
{% if custom_cmds_pre is defined %}
{% for cmd in custom_cmds_pre %}{% if vm_type in cmd.vm_types | default(all_vm_types) %} - [ sh, -xc, "{{ cmd.cmd }}" ]
{% endif %}{% endfor %}
{% endif %}
{% if custom_files is defined %}
{% for file in custom_files %}{% if vm_type in file.vm_types | default(all_vm_types) %} - [ sh, -xc, "mkdir -p {{ file.dest }}" ]
 - [ sh, -xc, "wget {% if file.recursive is defined %}{{ wget_recursive_opts }} {% endif %}-q --directory-prefix={{ file.dest }} http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-files/{{ file.src }}" ]
{% if file.owner is defined %} - [ sh, -xc, "chown {{ file.owner }} {{ file.dest }}/{{ file.src }}" ]
{% endif %}
{% if file.permission is defined %} - [ sh, -xc, "chmod {{ file.permission }} {{ file.dest }}/{{ file.src }}" ]
{% endif %}
{% endif %}{% endfor %}
{% endif %}{% endblock runcmd_custom_pre %}

{% block runcmd_afg_custom_pre %}
 - [ sh, -xc, "mkdir -p /mnt/customizations2" ]
 - [ sh, -xc, "mount -o loop /dev/sr1 /mnt/customizations2" ]
 - [ sh, -xc, "ln -sf /usr/local/esa/bin/esama /usr/local/bin/" ]
 - [ sh, -xc, "ln -sf /usr/local/esa/bin/esafma /usr/local/bin/" ]
 - [ sh, -xc, "ln -sf /usr/local/esa/bin/esapma /usr/local/bin/" ]
 - [ sh, -xc, "rpm -ivh /mnt/customizations2/software/MSPesaconf*.rpm" ]
 - [ sh, -xc, "sed -i 's/# INSTALL4J_JAVA_HOME_OVERRIDE=/INSTALL4J_JAVA_HOME_OVERRIDE=\\/usr\\/lib64\\/jvm\\/jre-1.8.0-openjdk/g' /usr/local/esa/bin/*" ]
 - [ sh, -xc, "chmod g+r /usr/local/esa/conf/*" ]
 - [ sh, -xc, "chmod o-x /usr/local/esa/bin/*" ]
 - [ sh, -xc, "chown -R miepadm:miepgrp /usr/local/esa/bin/*" ]
 - [ sh, -xc, "chown -R miepadm:miepgrp /usr/local/esa/conf/*" ]
{% if vm_type == "mn" %}
 - [ sh, -xc, "rm -rf /opt/open3ppSource" ]
 - [ sh, -xc, "mkdir /opt/open3ppSource" ]
 - [ sh, -xc, "cp -p /mnt/customizations2/foss_source/*.zip /opt/open3ppSource/." ]
 - [ sh, -xc, "cp -p /opt/miep/tools/mnsetup/config.xml /opt/miep/tools/mnsetup/config.xml.orig" ]
 - [ sh, -xc, "cp -p /mnt/customizations2/mn_setup/config.xml /opt/miep/tools/mnsetup/config.xml" ]
{# TR: artf767920 : AFG MN does not contain AFG_visible_config.xml #}
 - [ sh, -xc, "cp -p /mnt/customizations2/mn_setup/config.xml /opt/miep/tools/mnsetup/AFG_visible_config.xml" ]
 - [ sh, -xc, "cp -p /opt/miep/etc/ddc/distributed_data_cache.cfg /opt/miep/etc/ddc/distributed_data_cache.cfg.orig" ]
 - [ sh, -xc, "cp -p /mnt/customizations2/mn_setup/distributed_data_cache.cfg /opt/miep/etc/ddc/distributed_data_cache.cfg" ]
 - [ sh, -xc, "chown msausr:msagrp /opt/miep/tools/mnsetup/config.xml" ]
 - [ sh, -xc, "rpm -ivh /mnt/customizations2/mn_setup/MSPwfafg*.x86_64.rpm" ]
 - [ sh, -xc, "cp -p /mnt/customizations2/mn_setup/init-bsf-template-dashboard.sql /opt/miep/msaapp/ins/init-bsf-template-dashboard.sql" ]
 - [ sh, -xc, "chown msausr:msagrp /opt/miep/msaapp/ins/init-bsf-template-dashboard.sql" ]
 - [ sh, -xc, "cp -p /mnt/customizations2/mn_setup/init-ap-template-dashboard.sql /opt/miep/msaapp/ins/init-ap-template-dashboard.sql" ]
 - [ sh, -xc, "chown msausr:msagrp /opt/miep/msaapp/ins/init-ap-template-dashboard.sql" ]
{% endif %}
{% if vm_type == "mon" %}
 - [ sh, -xc, "cp -p /mnt/customizations2/scripts/slbspv/* /opt/miep/slbspv/" ]
 - [ sh, -xc, "chown -R miepadm:miepgrp /opt/miep/slbspv" ]
{% endif %}
 - [ sh, -xc, "umount /mnt/customizations2" ]
{% endblock runcmd_afg_custom_pre %}

{% block runcmd_afg_hardening %}
 - [ sh, -xc, "mount -o loop /dev/sr1 /mnt/customizations2" ]
{% if vm_type == "mn" %}
 - [ sh, -xc, "/mnt/customizations2/scripts/hardening.sh NODE_TYPE=mn NB_INTERFACE=2 OAM_IP_ADDRESS={{ oam_ip }} OAM_SUBNET={{ authorized_oam_access }} | tee /var/log/hardening.log" ]
{% endif %}
{% if vm_type == "slb" %}
 - [ sh, -xc, "/mnt/customizations2/scripts/hardening.sh NODE_TYPE=slb NB_INTERFACE=6 OAM_IP_ADDRESS={{ oam_ip }} OAM_SUBNET={{ authorized_oam_access }} | tee /var/log/hardening.log" ]
{% endif %}
{% if vm_type == "ddc" %}
 - [ sh, -xc, "/mnt/customizations2/scripts/hardening.sh NODE_TYPE=ddc NB_INTERFACE=2 OAM_IP_ADDRESS={{ oam_ip }} OAM_SUBNET={{ authorized_oam_access }} INTERNAL_IP_ADDRESS={{ internal_ip }} | tee /var/log/hardening.log" ]
 - [ sh, -xc, "/mnt/customizations2/scripts/workarounds.sh NODE_TYPE=ddc" ]
 - [ sh, -xc, "rm -f /opt/miep/tools/dataCacheMgmt" ]
{% endif %}
{% if vm_type == "mon" %}
 - [ sh, -xc, "/mnt/customizations2/scripts/hardening.sh NODE_TYPE=mon NB_INTERFACE=2 OAM_IP_ADDRESS={{ oam_ip }} OAM_SUBNET={{ authorized_oam_access }} | tee /var/log/hardening.log" ]
{% endif %}
{% if vm_type in [ "dk", "ts" ] %}
 - [ sh, -xc, "/mnt/customizations2/scripts/hardening.sh NODE_TYPE=ts NB_INTERFACE=5 OAM_IP_ADDRESS={{ oam_ip }} OAM_SUBNET={{ authorized_oam_access }} | tee /var/log/hardening.log" ]
{% endif %}
 - [ sh, -xc, "umount /mnt/customizations2" ]
{% endblock runcmd_afg_hardening %}


{% block runcmd_afg_configure_esa %}
 - [ sh, -xc, "cp /usr/local/esa/conf/mainCfg.xml /usr/local/esa/conf/mainCfg.xml.orig" ]
 - [ sh, -xc, "sed -i 's/TAG_OAM_IPV4_TAG/{{ oam_ip }}/g' /usr/local/esa/conf/mainCfg.xml" ]
 - [ sh, -xc, "sed -i 's/TAG_INTERNAL_IPV4_TAG/{{ internal_ip }}/g' /usr/local/esa/conf/mainCfg.xml" ]
{% if vm_type == "mn" %}
 - [ sh, -xc, "sed -i 's/master=\"no\"/master=\"yes\"/g' /usr/local/esa/conf/mainCfg.xml" ]
{% endif %}
 - [ sh, -xc, "sed -i 's/seedNodes=\"dynamic\"/seedNodes=\"static\"/g' /usr/local/esa/conf/mainCfg.xml" ]
 - [ sh, -xc, "cp /usr/local/esa/conf/trapDestCfg.xml /usr/local/esa/conf/trapDestCfg.xml.orig" ]
 - [ sh, -xc, "sed -i 's/TAG_OPERATOR_NMS_IPV4_TAG/{{ nms_ip }}/g' /usr/local/esa/conf/trapDestCfg.xml" ]
 - [ sh, -xc, "cp /usr/local/esa/conf/cluster.conf /usr/local/esa/conf/cluster.conf.orig" ]
 - [ sh, -xc, "sed -i 's/TAG_INTERNAL_IPV4_TAG/{{ internal_ip }}/g' /usr/local/esa/conf/cluster.conf" ]
 - [ sh, -xc, "sed -i 's/TAG_IPV4_ADDRESS_OF_INTERNAL_MN_TAG/{{ mn_internal_ip }}/g' /usr/local/esa/conf/cluster.conf" ]
 - [ sh, -xc, "sed -i 's/TAG_IPV4_ADDRESS_OF_INTERNAL_MON_TAG/{{ mon_internal_ip }}/g' /usr/local/esa/conf/cluster.conf" ]
 - [ sh, -xc, "echo '-Djava.net.preferIPv4Stack=true' >> /usr/local/esa/bin/esafma.vmoptions" ]
 - [ sh, -xc, "sed -i 's/9900/{{ esa_port_1 }}/g' /usr/local/esa/conf/cluster.conf" ]
 - [ sh, -xc, "sed -i 's/9901/{{ esa_port_2 }}/g' /usr/local/esa/conf/cluster.conf" ]
 - [ sh, -xc, "sed -i 's/ESA_MACluster/ESA_MACluster-{{ clusterid }}/g' /usr/local/esa/conf/cluster.conf" ]
 - [ sh, -xc, "sed -i 's/ESA_FMCluster/ESA_FMCluster-{{ clusterid }}/g' /usr/local/esa/conf/cluster.conf" ]
{# For ESA Proxy of counters #}
 - [ sh, -xc, "echo agentaddress 127.0.0.1 >> /etc/snmp/snmpd.conf" ]
{# Adaptation of MN Alarms to AFG #}
{% if vm_type == "mn" %}
 - [ sh, -xc, "sed -i 's/snmptrap -v 1 -c public ${SNMP_IPADDR}:${SNMP_PORT}/snmptrap -v 2c -c publicMiep ${SNMP_IPADDR}:${SNMP_PORT} \"\" $mpeAlarmSet/g' /opt/miep/snmp/tools/MonitorFunctions.sh" ]
 - [ sh, -xc, "sed -i '/$mpeAlarmSet localhost 5 s /d' /opt/miep/snmp/tools/MonitorFunctions.sh" ]
{% endif %}
{% endblock runcmd_afg_configure_esa %}


{% block runcmd_afg_configure_ntp %}
{% if (use_host_for_time_sync is defined) and (use_host_for_time_sync | default(True) == False) %}
 - [ sh, -xc, "cp -a /etc/ntp.conf /etc/ntp.conf.orig" ]
 - [ sh, -xc, "cp /etc/ntp.conf.template /etc/ntp.conf" ]
{# For configuring NTP servers(MN and MON) #}
{% if vm_type in [ "mn", "mon"] %}
{% for ntp_server in ntp_server_ips | default([]) %}
{%- if loop.index == 1 %}
 - [ sh, -xc, "sed -i 's/TAG_NTP_SERVER_IP_ADDRESS_TAG/{{ ntp_server }}/g' /etc/ntp.conf" ]
{% endif %}
{%- if loop.index >= 2 %}
 - [ sh, -xc, "sed -i '/TAG_ALTERNATE_NTP_SERVER_IP_ADDRESS_TAG/aserver {{ ntp_server }}' /etc/ntp.conf" ]
{% endif %}
{% endfor %}
{# For both NTP Servers and Client #}
 - [ sh, -xc, "sed -i 's/TAG_INTERNAL_IPV4_TAG/{{ internal_ip }}/g' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i 's/TAG_OAM_IPV4_TAG/{{ oam_ip }}/g' /etc/ntp.conf" ]
{% endif %}
{# For configuring NTP clients (DDC, SLB, TS and DK) #}
{% if vm_type in [ "ddc", "dk", "ts" ] %}
 - [ sh, -xc, "sed -i 's/TAG_IPV4_ADDRESS_OF_INTERNAL_MN_TAG/{{ mn_internal_ip }}/g' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i 's/TAG_IPV4_ADDRESS_OF_INTERNAL_MON_TAG/{{ mon_internal_ip }}/g' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i 's/TAG_INTERNAL_IPV4_TAG/{{ internal_ip }}/g' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i 's/TAG_OAM_IPV4_TAG/{{ oam_ip }}/g' /etc/ntp.conf" ]
{% endif %}
{% if vm_type in [ "dk", "ts" ] %}
 - [ sh, -xc, "sed -i '/interface ignore wildcard/ainterface ignore {{ access_ip }}' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i '/interface ignore wildcard/ainterface ignore {{ internet_ip }}' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i '/interface ignore wildcard/ainterface ignore {{ controlplanesig_ip }}' /etc/ntp.conf" ]
{% endif %}
{% if vm_type == "slb" and afg_deployment_type == "HA" %}
 - [ sh, -xc, "sed -i 's/TAG_IPV4_ADDRESS_OF_INTERNAL_MN_TAG/{{ mn_internal_ip }}/g' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i 's/TAG_IPV4_ADDRESS_OF_INTERNAL_MON_TAG/{{ mon_internal_ip }}/g' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i 's/TAG_INTERNAL_IPV4_TAG/{{ internal_ip }}/g' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i 's/TAG_OAM_IPV4_TAG/{{ oam_ip }}/g' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i '/interface ignore wildcard/ainterface ignore {{ access_ip }}' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i '/interface ignore wildcard/ainterface ignore {{ internet_ip }}' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i '/interface ignore wildcard/ainterface ignore {{ accessingress_ip }}' /etc/ntp.conf" ]
 - [ sh, -xc, "sed -i '/interface ignore wildcard/ainterface ignore {{ internetingress_ip }}' /etc/ntp.conf" ]
{% endif %}
 - [ sh, -xc, "chkconfig ntpd on" ]
{% endif %}
{% endblock runcmd_afg_configure_ntp %}


{% block runcmd_custom_post %}{% if custom_cmds_post is defined %}
{% for cmd in custom_cmds_post %}{% if vm_type in cmd.vm_types | default(all_vm_types) %} - [ sh, -xc, "{{ cmd.cmd }}" ]
{% endif %}{% endfor %}
{% endif %}{% endblock runcmd_custom_post %}

{% block afg_slb_ipv6_ping_gwy %}
 - [ sh, -xc, "ping6 -c 5 {{ accessingress_gateway_ipv6 }}" ]
{% endblock afg_slb_ipv6_ping_gwy %}

{% block runcmd_custom_users %}{% if custom_users is defined %}
{% for user in custom_users %}{% if vm_type in user.vm_types | default(all_vm_types) %} - [ sh, -xc, "yast2 users add username={{ user.user }} home=/home/{{ user.user }} password={{ user.password }} {% for group in (user.groups | default([])) %}{% if loop.first %}grouplist={% endif %}{{ group }}{% if not loop.last %},{% endif %}{% endfor %}" ]
{% endif %}{% endfor %}
{% endif %}{% endblock runcmd_custom_users %}

{% block insert_ts_extrafile %}{% if ts_extrafile.stat.exists | bool | default(False) == True %} - [ sh, -xc, "mkdir /mnt/customizations" ]
 - [ sh, -xc, "mount -o loop /dev/sr0 /mnt/customizations" ]
 - [ sh, -xc, "cp -f /mnt/customizations/traffic_regulator /opt/miep/bin/traffic_regulator" ]
 - [ sh, -xc, "chmod +x /opt/miep/bin/traffic_regulator" ]
 - [ sh, -xc, "umount /mnt/customizations" ]
{% endif %}{% endblock insert_ts_extrafile %}

{% block runcmd_nielsen %}
{% if (bnc879921_hack | default(False)) and (msp_linux_distro | match("SLES_11.*")) %} - [ sh, -xc, "echo '# Enable the Nilelsen fix'  >> /etc/sysctl.conf" ]
 - [ sh, -xc, "echo net.ipv4.tcp_bnc879921_hack = 2  >> /etc/sysctl.conf" ]
 - [ sh, -xc, "/sbin/sysctl -p" ]
{% endif %}
{% endblock runcmd_nielsen %}

{% block runcmd_kerneltuning %}{% for valuepair in sysctl_configuration | default([]) %}{% if vm_type in valuepair.vm_types | default(all_vm_types) and (msp_linux_distro | search(valuepair.distro | default(msp_linux_distro))) %} - [ sh, -xc, "sed -i 's/{{ valuepair.param | replace(".","\\\.") }}.*//' /etc/sysctl.conf" ]
{% endif %}{% endfor %}
 - [ sh, -xc, "echo \" {% for valuepair in sysctl_configuration | default([]) %}{% if vm_type in valuepair.vm_types | default(all_vm_types) and (msp_linux_distro | search(valuepair.distro | default(msp_linux_distro))) %} {{ valuepair.param }}={{ valuepair.value }}\n{% endif %}{% endfor %}\n\" >> /etc/sysctl.conf" ]
{% endblock runcmd_kerneltuning %}

{% block runcmd_irqbalance_args %}
{% if msp_linux_distro | match("SLES_12.*") %} - [ sh, -xc, "sed -i 's/^\\(IRQBALANCE_ARGS=\\).*$/\\1\"{{ irqbalance_args }}\"/' /etc/sysconfig/irqbalance" ]
{% endif %}
{% endblock runcmd_irqbalance_args %}

{% block runcmds_policy_routing %}
{% if source_based_routing_enabled | default(False) | bool and vm_type in [ 'dk', 'ts' ] and additional_internet_ips is defined and internet_additional_networks is defined %}{% for extranet in internet_additional_networks | default([]) %}
{{ cmd_add_source_routing( vmnic_3, (extranet.network + '/' + '%d' | format(extranet.cidr)), extranet.gateway, 200 + loop.index,True, 'additionalinternet%d' | format(loop.index) ) }}
{% endfor %}{% endif %}
{% endblock runcmds_policy_routing %}

{% block runcmd_nic_int_opt %}
{% for vm in vmnic_rps | default([]) %}
  {% if vm.vmtype == vm_type and vm.enable == "True" %} 
  {% if msp_linux_distro | match("SLES_12.*")  %}
  {% if vm.initfile12 is defined  %} 
 - [ sh, -xc, "echo '# Enable RPS/Multiqueue on selected NICs in node type: {{ vm.vmtype }}'" ]
 - [ sh, -xc, "sed -i 's/^NIC_INT_OPTIMIZE=.*/NIC_INT_OPTIMIZE=\"{% if vm.forcerps is defined and vm.forcerps == "True" %}-rps {% endif %}{% for nic in vm.dev %}{{ nic }}{% if not loop.last %} {% endif %}{% endfor %}\"/'\ {{ vm.initfile12 }} " ]
  {% endif %}
  {% else %} 
 - [ sh, -xc, "echo '# Enable RPS on selected NICs in node type: {{ vm.vmtype }}'" ]
 - [ sh, -xc, "sed -i 's/^NIC_INT_OPTIMIZE=.*/NIC_INT_OPTIMIZE=\"{% for nic in vm.dev %}{{ nic }}{% if not loop.last %} {% endif %}{% endfor %}\"/'\ {{ vm.initfile }} " ]
  {% endif %}
  {% endif %}
{% endfor %}
{% endblock runcmd_nic_int_opt %}

{% block runcmd_ssh_custom_security %}{% if vm_type == "tools" %} - [ sh, -xc, "sed -i 's/^ClientAliveCountMax.*/ClientAliveCountMax '{{ ssh_clientalivecountmax | default(20) }}'/g' /etc/ssh/sshd_config" ]
 - [ sh, -xc, "sed -i 's/^ClientAliveInterval.*/ClientAliveInterval '{{ ssh_clientaliveinterval | default(1800) }}'/g' /etc/ssh/sshd_config" ]
{% else %} - [ sh, -xc, "sed -i 's/^ClientAliveCountMax.*/ClientAliveCountMax '{{ ssh_clientalivecountmax | default(0) }}'/g' /etc/ssh/sshd_config" ]
{% endif %}
 - [ sh, -xc, "sed -i 's/^PermitRootLogin.*/PermitRootLogin '{{ ssh_permitrootlogin | default('no') }}'/g' /etc/ssh/sshd_config" ]
{% if ssh_permitrootlogin | default('no') == "yes" %}
 - [ sh, -xc, "sed -i 's/^DenyUsers.*/#DenyUsers root/g' /etc/ssh/sshd_config" ]
 - [ sh, -xc, "sed -i 's/^DenyGroups.*/#DenyGroups root/g' /etc/ssh/sshd_config" ]
{% endif %}
 - [ sh, -xc, "sed -i 's/^#UseDNS.*/UseDNS '{{ ssh_usedns | default('no') }}'/g' /etc/ssh/sshd_config" ]
 - [ sh, -xc, "echo auth       optional     pam_faildelay.so delay=5000000  >> /etc/pam.d/sshd" ]
{% endblock runcmd_ssh_custom_security %}

{% block runcmd_afg_snmp %} - [ sh, -xc, "echo trap2sink {{ internal_ip }}:8162 ESA-PC >> /etc/snmp/snmpd.conf" ]
{% if snmp_agent_listen_network is defined and snmp_agent_listen_network == "INTERNAL" and product in [ "AFG" ] %}
 - [ sh, -xc, "sed -i 's/^agentaddress.*/agentaddress {{ internal_ip }}/' /etc/snmp/snmpd.conf" ]
{% if vm_type != "mn" %}
 - [ sh, -xc, "sed -i 's/^    IP=.*/    IP=\"{{ internal_ip }}\"/' /opt/miep/snmp/tools/agentmonitor.sh" ]
 - [ sh, -xc, "sed -i 's/^    SNMPCOMMUNITY=.*/    SNMPCOMMUNITY=\"{{ snmpcommunity }}\"/' /opt/miep/snmp/tools/agentmonitor.sh" ]
 - [ sh, -xc, "sed -i 's/^    IP=.*/    IP=\"{{ internal_ip }}\"/' /opt/miep/snmp/tools/agentmonitor_sle12.sh" ]
 - [ sh, -xc, "sed -i 's/^    SNMPCOMMUNITY=.*/    SNMPCOMMUNITY=\"{{ snmpcommunity }}\"/' /opt/miep/snmp/tools/agentmonitor_sle12.sh" ]
 - [ sh, -xc, "sed -i 's|systemctl start snmpd.service|/etc/init.d/snmpd restart|g' /opt/miep/snmp/tools/agentmonitor_sle12.sh" ]
{% endif %}
{% else %}
 - [ sh, -xc, "sed -i 's/^agentaddress.*/agentaddress {{ oam_ip }}/' /etc/snmp/snmpd.conf" ]
{% if vm_type in [ "ddc" ] and product in [ "AFG" ] %}
 - [ sh, -xc, "echo agentaddress udp:{{ internal_ip }}:161 >> /etc/snmp/snmpd.conf" ]
{% endif %}
{% if vm_type != "mn" %}
 - [ sh, -xc, "sed -i 's/^    IP=.*/    IP=\"{{ oam_ip }}\"/' /opt/miep/snmp/tools/agentmonitor.sh" ]
 - [ sh, -xc, "sed -i 's/^    SNMPCOMMUNITY=.*/    SNMPCOMMUNITY=\"{{ snmpcommunity }}\"/' /opt/miep/snmp/tools/agentmonitor.sh" ]
 - [ sh, -xc, "sed -i 's/^    IP=.*/    IP=\"{{ oam_ip }}\"/' /opt/miep/snmp/tools/agentmonitor_sle12.sh" ]
 - [ sh, -xc, "sed -i 's/^    SNMPCOMMUNITY=.*/    SNMPCOMMUNITY=\"{{ snmpcommunity }}\"/' /opt/miep/snmp/tools/agentmonitor_sle12.sh" ]
 - [ sh, -xc, "sed -i 's|systemctl start snmpd.service|/etc/init.d/snmpd restart|g' /opt/miep/snmp/tools/agentmonitor_sle12.sh" ]
{% endif %}
{% endif %}
{% endblock runcmd_afg_snmp %}


{% block runcmd_snmp %} - [ sh, -xc, "echo trap2sink {{ snmptrap_ip }} >> /etc/snmp/snmpd.conf" ]
 - [ sh, -xc, "sed -i 's/^agentaddress.*/agentaddress {{ oam_ip }}/' /etc/snmp/snmpd.conf" ]
 - [ sh, -xc, "sed -i 's/^    IP=.*/    IP=\"{{ oam_ip }}\"/' /opt/miep/snmp/tools/agentmonitor.sh" ]
 - [ sh, -xc, "sed -i 's/^    SNMPCOMMUNITY=.*/    SNMPCOMMUNITY=\"{{ snmpcommunity }}\"/' /opt/miep/snmp/tools/agentmonitor.sh" ]
 - [ sh, -xc, "sed -i 's/^    IP=.*/    IP=\"{{ oam_ip }}\"/' /opt/miep/snmp/tools/agentmonitor_sle12.sh" ]
 - [ sh, -xc, "sed -i 's/^    SNMPCOMMUNITY=.*/    SNMPCOMMUNITY=\"{{ snmpcommunity }}\"/' /opt/miep/snmp/tools/agentmonitor_sle12.sh" ]
 - [ sh, -xc, "sed -i 's|systemctl start snmpd.service|/etc/init.d/snmpd restart|g' /opt/miep/snmp/tools/agentmonitor_sle12.sh" ]
{% endblock runcmd_snmp %}

{% block runcmd_dns %}{% if dns_ip is defined %} - [ sh, -xc, "/sbin/yast2 dns edit nameserver1={{ dns_ip }}" ]
{% endif %}{% if dns_ip2 is defined %} - [ sh, -xc, "/sbin/yast2 dns edit nameserver2={{ dns_ip2 }}" ]
{% endif %}{% for dns in dns_ips | default([]) %}
 - [ sh, -xc, "/sbin/yast2 dns edit nameserver{{ loop.index }}={{ dns }}" ]
{% endfor %}
{% endblock runcmd_dns %}

{% block runcmd_bindssh %}
{% if vm_type in ['tools'] and os_infra_ext_network is defined and infra_ext_ip is defined and deploy_platform == "deploy_openstack" %}
 - [ sh, -xc, "sed -i 's/^ListenAddress.*/ListenAddress {{ infra_ext_ip }}/' /etc/ssh/sshd_config" ]
{% else %}
 - [ sh, -xc, "sed -i 's/^ListenAddress.*/ListenAddress {{ oam_ip }}/' /etc/ssh/sshd_config" ]
{% endif %}
{% endblock runcmd_bindssh %}

{% block runcmd_customregpasswd %}{% if vm_type in [ "mn" ] %} - [ sh, -xc, "sed -i 's/^.*:.*/{{ authusername }}:{{ encpasswd_openssl }}/' /opt/miep/tools/lighttpd/lighttpd_auth.properties" ]
 - [ sh, -xc, "sed -i 's/^.*=.*/{{ authusername }}={{ encpasswd_msa }}/' /opt/miep/register/conf/auth.properties" ]
{% endif %}{% endblock runcmd_customregpasswd %}

{% block runcmd_vmware_tools %}
{% if (vmware_tools == True) or (vmware_tools == 'True') or (deploy_platform == 'deploy_vsphere') %} - [ sh, -xc, "[ -h /opt/miep/tools/vmware-repo ] && /bin/rm /opt/miep/tools/vmware-repo && /bin/ln -s /opt/miep/tools/repos/{% if hypervisor == "vsphere6" %}6.0{% else %}5.5{% endif %} /opt/miep/tools/vmware-repo " ]
 - [ sh, -xc, "[ -f /opt/miep/tools/vmware-repo/repodata/repomd.xml ] && /usr/bin/zypper ar -t YUM -G -f /opt/miep/tools/vmware-repo vmware-repo" ]
 - [ sh, -xc, "/usr/bin/zypper --non-interactive in vmware-tools-core vmware-tools-plugins-powerOps vmware-tools-plugins-timeSync vmware-tools-plugins-autoUpgrade vmware-tools-vmxnet-kmp-default" ]
{% endif %}
{% endblock runcmd_vmware_tools %}

{% block runcmd_rename_nics %}
{% if udevlocalrules is defined and vmnic_devs is defined and msp_linux_distro | match("SLES_11.*") %}
 - [ sh, -xc, "/etc/init.d/network stop" ]
 - [ sh, -xc, "rm -f /etc/udev/rules.d/70-persistent-net.rules" ]
 - [ sh, -xc, "/etc/init.d/boot.udev restart" ]
 - [ sh, -xc, "udevadm trigger" ]
{% endif %}
{% if udevlocalrules is defined and vmnic_devs is defined and msp_linux_distro | match("SLES_12.*") %}
 - [ sh, -xc, "/bin/systemctl stop wickedd" ]
 - [ sh, -xc, "rm -f /etc/udev/rules.d/70-persistent-net.rules" ]
 - [ sh, -xc, "/bin/systemctl restart systemd-udevd" ]
 - [ sh, -xc, "/sbin/udevadm trigger" ]
 - [ sh, -xc, "/bin/systemctl start wickedd" ]
{% endif %}
{% endblock runcmd_rename_nics %}

{% block runcmd_grub2 %}
{% if msp_linux_distro | match("SLES_12.*") %}
 - [ sh, -xc, "sed -i 's/^GRUB_CMDLINE_LINUX=\"\".*/GRUB_CMDLINE_LINUX=\"audit=1\"/' /etc/default/grub" ]
 - [ sh, -xc, "sed -i 's/^GRUB_TIMEOUT.*/GRUB_TIMEOUT=0/' /etc/default/grub" ]
 - [ sh, -xc, "echo GRUB_FORCE_HIDDEN_MENU=true >> /etc/default/grub" ]
 - [ sh, -xc, "echo GRUB_TIMEOUT_STYLE=hidden >> /etc/default/grub" ]
 - [ sh, -xc, "/usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg" ]
{% endif %}
{% endblock runcmd_grub2 %}

{% block power_state %}
power_state:
 mode: reboot
 message: Server will reboot now
 timeout: 5
{% endblock power_state %}

{% block runcmd_universalcache %}
{% if universalcache | default(False) %} - [ sh, -xc, "/opt/miep/tools/ucPart.sh cloud small" ]
{% endif %}
{% endblock runcmd_universalcache %}

{% block runcmd_netrestart %}{% if msp_linux_distro | match("SLES_11.*") %} - [ sh, -xc, "/etc/init.d/network restart" ]
{% endif %}
{% if msp_linux_distro | match("SLES_12.*") %} - [ sh, -xc, "/usr/sbin/wicked ifdown all; /usr/sbin/wicked ifup --timeout 60 {{ vmnic_0 }}; /usr/sbin/wicked ifup --timeout 60 all" ]
{% endif %}
{% endblock runcmd_netrestart %}

{% block runcmd_misc %} - [ sh, -c, "export TERM=vt220 ; yast keyboard set layout={{ keyboardlayout }}" ]{% endblock runcmd_misc %}

{% block timezone %}timezone: '{{ timezone }}'
{% endblock timezone %}

{% block write_files %}
{{ super() }}
{% if vm_type != "mn" %}
 - content: |
    {
    "registrar": "{{ registrar_url }}",
    "clusterid": "{{ clusterid }}",
    "vmname":    "{{ vm_name }}",
    "basicauthuser": "{{ authusername }}",
    "basicauthpwd": "{{ authpasswd }}"{% if cabinet_id is defined %},
    "cabinetid": "{{ cabinet_id }}"{% endif %}

    }
   path: /opt/miep/init/bootstrap.json
   owner: root:root
   permissions: '0640'
{% endif %}
{% if vm_type == "dk" %}
 - content: |
    OAM_TS_IPV4_ADDRESS={{ oam_ip }}
    INTERNAL_TS_IPV4_ADDRESS={{ internal_ip }}
    INTERNAL_MN_IPV4_ADDRESS={{ mn_internal_ip }}
    INTERNAL_MON_IPV4_ADDRESS={{ mon_internal_ip }}
    CLUSTER_ID={{ clusterid }}
    ESA_MA_PORT={{ esa_port_1 }}
    ESA_FM_PORT={{ esa_port_2 }}
    OPERATOR_NMS_IPV4={{ nms_ip }}
   path: /opt/miep/docker/config/ts.txt
   owner: root:root
   permissions: '0640'
{% endif %}
 - content: |
    [
    {
{% if vm_type != "mn" %}
    "interfacename": "{{ vmnic_0 }}", 
{% endif %}
    "networkname": "OAM"
    },
    {
{% if vm_type != "mn" %}
    "interfacename": "{{ vmnic_1 }}", 
{% endif %}
    "networkname": "Internal"
    }{% if vm_type in [ "dk", "ts", "slb", "mn" ] %},
{% if controlplanesig_name is defined and vm_type in [ "da", "cim" ] %}
    {
{% if vm_type != "mn" %}
    "interfacename": "{{ vmnic_2b | default(vmnic_2) }}", 
{% endif %}
    "networkname": "{{ controlplanesig_name }}"
    }{% else %}
{% if custom1_network_name is defined and vm_type in [ "ddc" ] %}
    {
{% if vm_type != "mn" %}
    "interfacename": "{{ vmnic_2c | default(vmnic_2) }}", 
{% endif %}
    "networkname": "{{ custom1_network_name }}"
    }{% else %}
    {
{% if vm_type not in [ "mn", "ddc" ] %}
    "interfacename": "{{ vmnic_2 }}", 
{% endif %}
    "networkname": "Access"
    }{% endif %}{% endif %}
{% endif %}
{% if custom1_network_name is defined and vm_type in [ "mn" ] %},
    {    
    "networkname": "{{ custom1_network_name }}"
    }{% endif %}
{% if vm_type in [ "dk", "ts", "slb", "mn" ] %},
{% if internet_networknames is defined and vm_type in [ "dk", "ts", "mn" ] %}
{% for net in internet_networknames %}
    {
{% if vm_type != "mn" %}
    "interfacename": "{{ vmnic_3 }}",
{% endif %}
    "networkname": "{{ net }}"{% if vm_type != "mn" %},{% endif %}

{% if vm_type != "mn" %}
    "address": {{ internet_networknames[net].address }}
{% endif %}
    }{% if not loop.last %},
{% endif %}{% endfor %}{% if vm_type == "mn" %},
    {
    "networkname": "Internet"
    }{% endif %}
{% else %}
    {
{% if vm_type != "mn" %}
    "interfacename": "{{ vmnic_3 }}", 
{% endif %}
    "networkname": "Internet"
    }{% endif %}
{% endif %}
{% if vm_type in [ "dk", "ts", "slb", "mn" ] %}{% if controlplanesig_name is defined and vm_type in [ "dk", "ts", "mn" ] %},
    {
{% if vm_type != "mn" %}
    "interfacename": "{{ vmnic_4b | default(vmnic_4) }}", 
{% endif %}
    "networkname": "{{ controlplanesig_name }}"
    }{% endif %}
{% if vm_type in [ "slb", "mn" ] and afg_deployment_type == "HA" %},
    {
{% if vm_type != "mn" %}
    "interfacename": "{{ vmnic_4 }}", 
{% endif %}
    "networkname": "{{ accessingress_name }}"
    }{% endif %}
{% endif %}
{% if vm_type in [ "slb", "mn" ] and afg_deployment_type == "HA" %},
    {
{% if vm_type != "mn" %}
    "interfacename": "{{ vmnic_5 }}", 
{% endif %}
    "networkname": "{{ internetingress_name }}"
    }{% endif %}

    ]
   path: /opt/miep/init/networknames.json
   owner: root:root
   permissions: '0644'
{% if vm_type == "mn" %}{{ self.mn_init_properties() }}{% endif %}
{% if vm_type == "mon" %}{{ self.mon_init_properties() }}{% endif %}
{% if bootproto_oam | default(bootproto_oam_i) == "static" or ((vm_type == "mn") and (deploy_platform != "deploy_openstack")) %}
 - content: |
    BOOTPROTO='static'
{% if oam_mtu | default(all_mtu) is defined %}
    MTU='{{ oam_mtu | default(all_mtu) }}'
{% endif %}
{% if  vmnic_0_edev !=  vmnic_0 %}    ETHERDEVICE='{{ vmnic_0_edev }}'
{% endif %}
{% if vm_type in ['tools'] and os_infra_ext_network is defined and infra_ext_ip is defined and deploy_platform == "deploy_openstack" %}
    IPADDR='{{ infra_ext_ip }}/{{ os_infra_ext_cidr }}' 
    NETWORK='{{ os_infra_ext_network | default(oam_network) }}'
    STARTMODE='onboot'{{ bonding_attributes(vmnic_0) }}
    USERCONTROL='no'{{ ifcfg_name(oam_displayname | default(none)) }}
{% else %}
    IPADDR='{{ oam_ip }}' 
    BROADCAST='{{ oam_broadcast }}'
    NETMASK='{{ oam_netmask }}' 
    NETWORK='{{ oam_network }}'
    STARTMODE='onboot'{{ bonding_attributes(vmnic_0) }}
    USERCONTROL='no'{{ ifcfg_name(oam_displayname | default(none)) }}
{% endif %}
{% if (msp_linux_distro | match("SLES_12.*")) %}
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_0 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if ((vm_type == "mn") and (deploy_platform == "deploy_openstack")) %}
 - content: |
    BOOTPROTO='dhcp'
{% if oam_mtu | default(all_mtu) is defined %}
    MTU='{{ oam_mtu | default(all_mtu) }}'
{% endif %}
    DEVICE='{{ vmnic_0 }}'
    ONBOOT='yes'
    STARTMODE='auto'
{% if (msp_linux_distro | match("SLES_12.*")) %}
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'
    DHCLIENT_SET_DEFAULT_ROUTE='yes'    
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_0 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if ((vm_type != "mn") and (deploy_platform == "deploy_openstack") and msp_linux_distro | match("SLES_12.*")) and (bootproto_oam | default(bootproto_oam_i) != "static") %}
 - content: |
    BOOTPROTO='dhcp'
{% if oam_mtu | default(all_mtu) is defined %}
    MTU='{{ oam_mtu | default(all_mtu) }}'
{% endif %}
    DEVICE='{{ vmnic_0 }}'
    ONBOOT='yes'
    STARTMODE='auto'
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'
{% if vm_type != "ts" %}
    DHCLIENT_SET_DEFAULT_ROUTE='yes'    
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_0 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if bootproto_internal | default(bootproto_internal_i) == "static" or ((vm_type == "mn") and (deploy_platform != "deploy_openstack")) %}
 - content: |
    BOOTPROTO='static' 
{% if internal_mtu | default(all_mtu) is defined %}
    MTU='{{ internal_mtu | default(all_mtu) }}'
{% endif %}
{% if  vmnic_1_edev !=  vmnic_1 %}    ETHERDEVICE='{{ vmnic_1_edev }}'
{% endif %}
    IPADDR='{{ internal_ip }}' 
    BROADCAST='{{ internal_broadcast }}'
    NETMASK='{{ internal_netmask }}' 
    NETWORK='{{ internal_network }}'
    STARTMODE='onboot' {{ bonding_attributes(vmnic_1) }}
    USERCONTROL='no'{{ ifcfg_name(internal_displayname | default(none)) }}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_1 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if ((vm_type == "mn") and (deploy_platform == "deploy_openstack")) %}
 - content: |
    BOOTPROTO='dhcp'
{% if internal_mtu | default(all_mtu) is defined %}
    MTU='{{ internal_mtu | default(all_mtu) }}'
{% endif %}
    DEVICE='{{ vmnic_1 }}'
    ONBOOT='yes'
    STARTMODE='auto'
{% if (msp_linux_distro | match("SLES_12.*")) %}
    DEFROUTE='no'
    DHCLIENT_SET_DEFAULT_ROUTE='no'
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_1 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if ((vm_type != "mn") and (deploy_platform == "deploy_openstack")) %}
 - content: |
    BOOTPROTO='dhcp'
{% if internal_mtu | default(all_mtu) is defined %}
    MTU='{{ internal_mtu | default(all_mtu) }}'
{% endif %}
    DEVICE='{{ vmnic_1 }}'
    ONBOOT='yes'
    STARTMODE='auto'
{% if (msp_linux_distro | match("SLES_12.*")) %}
    DEFROUTE='no'
    DHCLIENT_SET_DEFAULT_ROUTE='no'
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_1 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if vm_type in [ "dk", "ts", "da", "slb" ] and (bootproto_access | default(bootproto_access_i) == "static") and (vm_type != "da" or (controlplanesig_network is not defined and controlplanesig_ip is not defined)) and (vm_type != "ddc" or custom1_network is not defined) %}
 - content: |
    BOOTPROTO='static' 
{% if access_mtu | default(all_mtu) is defined %}
    MTU='{{ access_mtu | default(all_mtu) }}'
{% endif %}
{% if  vmnic_2_edev !=  vmnic_2 %}    ETHERDEVICE='{{ vmnic_2_edev }}'
{% endif %}
    IPADDR='{{ access_ip }}' 
    BROADCAST='{{ access_broadcast }}'
    NETMASK='{{ access_netmask }}' 
    NETWORK='{{ access_network }}'
    STARTMODE='onboot' {{ bonding_attributes(vmnic_2) }}
    USERCONTROL='no'{{ ifcfg_name(access_displayname | default(none)) }}
{% if access_ipv6 is defined %}
{% for ipv6i in access_ipv6 %}
    IPADDR{{ if_ipv6_prefix }}{{ loop.index }}{{ if_ipv6_postfix }}='{{ access_network_ipv6_prefix }}:{{access_fixed_ipv6_portion}}:{{ ipv6i }}/{{ access_network_ipv6_cidr }}' 
{% endfor %}
{% endif %}
{% if (msp_linux_distro | match("SLES_12.*")) %}
    DEFROUTE='no'
    DHCLIENT_SET_DEFAULT_ROUTE='no'
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'    
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_2 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if vm_type in [ "dk", "ts", "da", "slb" ] and (bootproto_access | default(bootproto_access_i) == "dhcp") and (deploy_platform == "deploy_openstack") and (vm_type != "da" or (controlplanesig_network is not defined and controlplanesig_ip is not defined)) and (vm_type != "ddc" or custom1_network is not defined) %}
 - content: |
    BOOTPROTO='dhcp' 
{% if access_mtu | default(all_mtu) is defined %}
    MTU='{{ access_mtu | default(all_mtu) }}'
{% endif %}
    DEVICE='{{ vmnic_2 }}'
    ONBOOT='yes'
    STARTMODE='auto'
{% if (msp_linux_distro | match("SLES_12.*")) %}
    DEFROUTE='no'
    DHCLIENT_SET_DEFAULT_ROUTE='no'
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'    
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_2 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if vm_type in [  "da", "cim" ] and (bootproto_controlplanesig | default(bootproto_controlplanesig_i)) == "static" and controlplanesig_network is defined %}
 - content: |
    BOOTPROTO='static' 
{% if controlplanesig_mtu | default(all_mtu) is defined %}
    MTU='{{ controlplanesig_mtu | default(all_mtu) }}'
{% endif %}
{% if vmnic_2b is defined %}    ETHERDEVICE='{{ vmnic_2b_edev }}'
{% elif  vmnic_2_edev !=  vmnic_2 %}    ETHERDEVICE='{{ vmnic_2_edev }}'
{% endif %}
    IPADDR='{{ controlplanesig_ip }}' 
    BROADCAST='{{ controlplanesig_broadcast }}'
    NETMASK='{{ controlplanesig_netmask }}' 
    NETWORK='{{ controlplanesig_network }}'
    STARTMODE='onboot' {{ bonding_attributes(vmnic_2b | default(vmnic_2)) }}
    USERCONTROL='no'{{ ifcfg_name(controlplanesig_displayname | default(none)) }}
{% if controlplanesig_ipv6 is defined %}
{% for ipv6i in controlplanesig_ipv6 %}
    IPADDR{{ if_ipv6_prefix }}{{ loop.index }}{{ if_ipv6_postfix }}='{{ controlplanesig_network_ipv6_prefix }}:{{controlplanesig_fixed_ipv6_portion}}:{{ ipv6i }}/{{ controlplanesig_network_ipv6_cidr }}' 
{% endfor %}
{% endif %}
{% if (msp_linux_distro | match("SLES_12.*")) %}
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'    
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_2b | default(vmnic_2) }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if vm_type in [  "ddc" ] and (bootproto_custom1_network | default(bootproto_custom1_network_i)) == "static" and custom1_network is defined %}
 - content: |
    BOOTPROTO='static' 
{% if custom1_network_mtu | default(all_mtu) is defined %}
    MTU='{{ custom1_network_mtu | default(all_mtu) }}'
{% endif %}
{% if vmnic_2c is defined %}    ETHERDEVICE='{{ vmnic_2c_edev }}'
{% elif  vmnic_2_edev !=  vmnic_2 %}    ETHERDEVICE='{{ vmnic_2_edev }}'
{% endif %}
    IPADDR='{{ custom1_network_ip }}' 
    BROADCAST='{{ custom1_network_broadcast }}'
    NETMASK='{{ custom1_network_netmask }}' 
    NETWORK='{{ custom1_network }}'
    STARTMODE='onboot' {{ bonding_attributes(vmnic_2c | default(vmnic_2)) }}
    USERCONTROL='no'{{ ifcfg_name(custom1_network_displayname | default(none)) }}
{% if custom1_network_ipv6 is defined %}
{% for ipv6i in custom1_network_ipv6 %}
    IPADDR{{ if_ipv6_prefix }}{{ loop.index }}{{ if_ipv6_postfix }}='{{ custom1_network_ipv6_prefix }}:{{custom1_fixed_ipv6_portion}}:{{ ipv6i }}/{{ custom1_network_ipv6_cidr }}' 
{% endfor %}
{% endif %}
{% if (msp_linux_distro | match("SLES_12.*")) %}
    DEFROUTE='no'
    DHCLIENT_SET_DEFAULT_ROUTE='no'
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'    
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_2c | default(vmnic_2) }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if vm_type in [ "dk", "ts", "slb" ] and (bootproto_internet | default(bootproto_internet_i)) == "static" %}
 - content: |
    BOOTPROTO='static' 
{% if internet_mtu | default(all_mtu) is defined %}
    MTU='{{ internet_mtu | default(all_mtu) }}'
{% endif %}
{% if  vmnic_3_edev !=  vmnic_3 %}    ETHERDEVICE='{{ vmnic_3_edev }}'
{% endif %}
{% if internet_ip is defined %}    IPADDR='{{ internet_ip }}'
    NETMASK='{{ internet_netmask }}' 
{% endif %}    BROADCAST='{{ internet_broadcast }}'
{% if internet_ipv4 is defined %}
{% for ipv4 in internet_ipv4 %}
    IPADDR{{ loop.index }}='{{ ipv4 }}' 
    NETMASK{{ loop.index }}='{{ internet_netmask }}' 
{% endfor %}
{% endif %}
{% if internetphantom_ipv4 is defined %}
{% for ipv4 in internetphantom_ipv4 %}
    IPADDR{{ loop.index }}P='{{ ipv4 }}' 
    NETMASK{{ loop.index }}P='{{ internetphantom_netmask }}' 
{% endfor %}
{% endif %}
{% if additional_internet_ips is defined and internet_additional_networks is defined %}
{% for addnet in additional_internet_ips %}
{% for extranet in internet_additional_networks %}
{% if extranet.name == addnet.net %}
{% for extraip in addnet.ips %}
    IPADDR_A{{ addnet.net + '%d' | format(loop.index0) }}='{{ (extranet.network | ipaddr('int') + extraip | int + node_index | int ) | ipaddr('address') }}'
    NETMASK_A{{ addnet.net + '%d' | format(loop.index0) }}='{{ (extranet.network | ipaddr('int') | ipaddr('address') + '/' + '%d' | format(extranet.cidr)) | ipaddr('netmask') }}'
{% if False %}    GATEWAY_A{{ addnet.net + '%d' | format(loop.index0) }}='{{ extranet.gateway }}'{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endfor %}
{% endif %}
    NETWORK='{{ internet_network }}'
    STARTMODE='onboot' 
    USERCONTROL='no'{{ ifcfg_name(internet_displayname | default(none)) }}
{% if internet_ipv6 is defined %}
{% for ipv6i in internet_ipv6 %}
    IPADDR{{ if_ipv6_prefix }}{{ loop.index }}{{ if_ipv6_postfix }}='{{ internet_network_ipv6_prefix }}:{{internet_fixed_ipv6_portion}}:{{ ipv6i }}/{{ internet_network_ipv6_cidr }}' 
{% endfor %}
{% endif %}
{% if (msp_linux_distro | match("SLES_12.*")) %}
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'    
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_3 }}
   owner: root:root
   permissions: '0644'                    
{% endif %}
{% if vm_type in [ "dk", "ts", "slb" ] and (bootproto_internet | default(bootproto_internet_i)) == "dhcp" %}
 - content: |
    DEVICE='{{ vmnic_3 }}'
    BOOTPROTO='{{ bootproto_internet | default(bootproto_internet_i) }}'
{% if internet_mtu | default(all_mtu) is defined %}
    MTU='{{ internet_mtu | default(all_mtu) }}'
{% endif %}
    ONBOOT='yes'
    STARTMODE='auto' 
{% if internet_mtu | default(all_mtu) is defined %}
    MTU='{{ internet_mtu | default(all_mtu) }}'
{% endif %}
{% if  vmnic_3_edev !=  vmnic_3 %}    ETHERDEVICE='{{ vmnic_3_edev }}'
{% endif %}
{% if internet_ipv4 is defined %}
{% for ipv4 in internet_ipv4 %}
    IPADDR{{ loop.index }}='{{ ipv4 }}' 
    NETMASK{{ loop.index }}='{{ internet_netmask }}' 
{% endfor %}
{% endif %}
{% if internetphantom_ipv4 is defined %}
{% for ipv4 in internetphantom_ipv4 %}
    IPADDR{{ loop.index }}P='{{ ipv4 }}' 
    NETMASK{{ loop.index }}P='{{ internetphantom_netmask }}' 
{% endfor %}
{% endif %}
{% if additional_internet_ips is defined and internet_additional_networks is defined %}
{% for addnet in additional_internet_ips %}
{% for extranet in internet_additional_networks %}
{% if extranet.name == addnet.net %}
{% for extraip in addnet.ips %}
    IPADDR_A{{ addnet.net + '%d' | format(loop.index0) }}='{{ (extranet.network | ipaddr('int') + extraip | int + node_index | int ) | ipaddr('address') }}'
    NETMASK_A{{ addnet.net + '%d' | format(loop.index0) }}='{{ (extranet.network | ipaddr('int') | ipaddr('address') + '/' + '%d' | format(extranet.cidr)) | ipaddr('netmask') }}'
{% if False %}    GATEWAY_A{{ addnet.net + '%d' | format(loop.index0) }}='{{ extranet.gateway }}'{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endfor %}
{% endif %}
    USERCONTROL='no'{{ ifcfg_name(internet_displayname | default(none)) }}
{% if internet_ipv6 is defined %}
{% for ipv6i in internet_ipv6 %}
    IPADDR{{ if_ipv6_prefix }}{{ loop.index }}{{ if_ipv6_postfix }}='{{ internet_network_ipv6_prefix }}:{{internet_fixed_ipv6_portion}}:{{ ipv6i }}/{{ internet_network_ipv6_cidr }}' 
{% endfor %}
{% endif %}
{% if (msp_linux_distro | match("SLES_12.*")) %}
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'
{% if vm_type == "ts" %}
    DHCLIENT_SET_DEFAULT_ROUTE='yes'    
{% endif %}
{% if vm_type != "ts" %}
    DEFROUTE='no'
    DHCLIENT_SET_DEFAULT_ROUTE='no'
{% endif %}
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_3 }}
   owner: root:root
   permissions: '0644'                    
{% endif %}
{% if vm_type in [ "slb" ] and (bootproto_accessingress | default(bootproto_accessingress_i)) == "static" %}
 - content: |
    BOOTPROTO='static' 
{% if accessingress_mtu | default(all_mtu) is defined %}
    MTU='{{ accessingress_mtu | default(all_mtu) }}'
{% endif %}
{% if  vmnic_4_edev !=  vmnic_4 %}    ETHERDEVICE='{{ vmnic_4_edev }}'
{% endif %}
    IPADDR='{{ accessingress_ip }}' 
    BROADCAST='{{ accessingress_broadcast }}'
    NETMASK='{{ accessingress_netmask }}' 
    NETWORK='{{ accessingress_network }}'
    STARTMODE='onboot' {{ bonding_attributes(vmnic_4) }}
    USERCONTROL='no'{{ ifcfg_name(accessingress_displayname | default(none)) }}
{% if accessingress_ipv6 is defined %}
{% for ipv6i in accessingress_ipv6 %}
    IPADDR{{ if_ipv6_prefix }}{{ loop.index }}{{ if_ipv6_postfix }}='{{ accessingress_network_ipv6_prefix }}:{{accessingress_fixed_ipv6_portion}}:{{ ipv6i }}/{{ accessingress_network_ipv6_cidr }}' 
{% endfor %}
{% endif %}
{% if (msp_linux_distro | match("SLES_12.*")) %}
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'    
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_4 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if vm_type in [ "slb" ] and deploy_platform == "deploy_openstack" and (bootproto_accessingress | default(bootproto_accessingress_i)) == "dhcp" %}
 - content: |
    BOOTPROTO='dhcp'
{% if accessingress_mtu | default(all_mtu) is defined %}
    MTU='{{ accessingress_mtu | default(all_mtu) }}'
{% endif %}
    DEVICE='{{ vmnic_4 }}'
    ONBOOT='yes'
    STARTMODE='auto'
{% if (msp_linux_distro | match("SLES_12.*")) %}
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_4 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if vm_type in [ "dk", "ts" ] and (bootproto_controlplanesig | default(bootproto_controlplanesig_i)) == "static" and controlplanesig_network is defined %}
 - content: |
    BOOTPROTO='static' 
{% if controlplanesig_mtu | default(all_mtu) is defined %}
    MTU='{{ controlplanesig_mtu | default(all_mtu) }}'
{% endif %}
{% if vmnic_4b is defined %}    ETHERDEVICE='{{ vmnic_4b_edev }}'
{% elif  vmnic_4_edev !=  vmnic_4 %}    ETHERDEVICE='{{ vmnic_4_edev }}'
{% endif %}
    IPADDR='{{ controlplanesig_ip }}' 
    BROADCAST='{{ controlplanesig_broadcast }}'
    NETMASK='{{ controlplanesig_netmask }}' 
    NETWORK='{{ controlplanesig_network }}'
    STARTMODE='onboot'{{ bonding_attributes(vmnic_4b | default(vmnic_4)) }}
    USERCONTROL='no'{{ ifcfg_name(controlplanesig_displayname | default(none)) }}
{% if controlplanesig_ipv6 is defined %}
{% for ipv6i in controlplanesig_ipv6 %}
    IPADDR{{ if_ipv6_prefix }}{{ loop.index }}{{ if_ipv6_postfix }}='{{ controlplanesig_network_ipv6_prefix }}:{{controlplanesig_fixed_ipv6_portion}}:{{ ipv6i }}/{{ controlplanesig_network_ipv6_cidr }}' 
{% endfor %}
{% endif %}
{% if (msp_linux_distro | match("SLES_12.*")) %}
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'    
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_4b | default(vmnic_4) }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if vm_type in [ "dk", "ts", "slb" ] and (bootproto_controlplanesig | default(bootproto_controlplanesig_i)) != "static" and  vm_type == "ts" %}
 - content: |
    DEVICE='{{ vmnic_4 }}'
    BOOTPROTO='{{ bootproto_controlplanesig | default(bootproto_controlplanesig_i) }}'
{% if controlplanesig_mtu | default(all_mtu) is defined %}
    MTU='{{ controlplanesig_mtu | default(all_mtu) }}'
{% endif %}
    ONBOOT='yes'
    STARTMODE='auto'
{% if (msp_linux_distro | match("SLES_12.*")) %}
    DEFROUTE='no'
    DHCLIENT_SET_DEFAULT_ROUTE='no'
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'    
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_4 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if vm_type in [ "slb" ] and (bootproto_internetingress | default(bootproto_internetingress_i)) == "static" %}
 - content: |
    BOOTPROTO='static' 
{% if internetingress_mtu | default(all_mtu) is defined %}
    MTU='{{ internetingress_mtu | default(all_mtu) }}'
{% endif %}
{% if  vmnic_5_edev !=  vmnic_5 %}    ETHERDEVICE='{{ vmnic_5_edev }}'
{% endif %}
    IPADDR='{{ internetingress_ip }}' 
    BROADCAST='{{ internetingress_broadcast }}'
    NETMASK='{{ internetingress_netmask }}' 
    NETWORK='{{ internetingress_network }}'
    STARTMODE='onboot'{{ bonding_attributes(vmnic_5) }}
    USERCONTROL='no'{{ ifcfg_name(internetingress_displayname | default(none)) }}
{% if internetingress_ipv6 is defined %}
{% for ipv6i in internetingress_ipv6 %}
    IPADDR{{ if_ipv6_prefix }}{{ loop.index }}{{ if_ipv6_postfix }}='{{ internetingress_network_ipv6_prefix }}:{{internetingress_fixed_ipv6_portion}}:{{ ipv6i }}/{{ internetingress_network_ipv6_cidr }}' 
{% endfor %}
{% endif %}
{% if (msp_linux_distro | match("SLES_12.*")) %}
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'    
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_5 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if vm_type in [ "slb" ] and deploy_platform == "deploy_openstack" and (bootproto_internetingress | default(bootproto_internetingress_i)) == "dhcp" %}
 - content: |
    BOOTPROTO='dhcp'
{% if internetingress_mtu | default(all_mtu) is defined %}
    MTU='{{ internetingress_mtu | default(all_mtu) }}'
{% endif %}
    DEVICE='{{ vmnic_5 }}'
    ONBOOT='yes'
    STARTMODE='auto'
{% if (msp_linux_distro | match("SLES_12.*")) %}
    DEFROUTE='no'
    DHCLIENT_SET_DEFAULT_ROUTE='no'
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'
{% endif %}
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_5 }}
   owner: root:root
   permissions: '0644'
{% endif %}
{% if vm_type == "mon" %}
{% if (deploy_platform != "deploy_openstack") %} - content: |
{% if ((mon_config_version | default("")) == "v2")  %}    [
{% endif %}
    {
    "username": "{{ vr_control_user }}",
    "password": "{{ vr_control_passwd }}",
    "host": "{{ vr_control_ip }}",
    "port": "{{ vr_control_port }}",
    "routerid_access": "{{ vr_access_name }}{{ pod_name  | default("") }}",
    "routerid_internet": "{{ vr_internet_name | default("") }}{{ pod_name | default("") }}",
    "tenant_name": "{{ vr_tenant }}"
    }{% if vr_control_ip2 is defined %},
    {
    "username": "{{ vr_control_user2 }}",
    "password": "{{ vr_control_passwd2 }}",
    "host": "{{ vr_control_ip2 }}",
    "port": "{{ vr_control_port2 }}",
    "routerid_access": "{{ vr_access_name2 }}{{ pod_name  | default("") }}",
    "routerid_internet": "{{ vr_internet_name2 | default("") }}{{ pod_name | default("") }}",
    "tenant_name": "{{ vr_tenant2 }}"
    }{% endif %}
{% if ((mon_config_version | default("")) == "v2")  %}

    ]{% endif %}
{% else %} - content: |
{% if ((mon_config_version | default("")) == "v2")  %}    [
{% endif %}
    {
    "username": "{{ vr_control_user }}",
    "password": "{{ vr_control_passwd }}",
    "host": "{{ vr_control_ip }}",
    "port": "{{ vr_control_port }}",
    "routerid_access": "{{ os_stackname }}-{{ vr_access_name }}",
    "routerid_internet": "{{ os_stackname }}-{{ vr_internet_name }}",
    "tenant_name": "{{ vr_tenant }}"
    }
{% if ((mon_config_version | default("")) == "v2")  %}
    ]{% endif %}
{% endif %}

   path: /opt/miep/slbspv/SwitchConfig.json
   owner: root:root
   permissions: '0644'
{% endif %}
 - content: |
{{ self.routing() }}
   path: /etc/sysconfig/network/routes
   owner: root:root
   permissions: '0644'
{% if vm_type == "mn" and clusters is defined %}
 - content: {{ clusters_file.stdout | default('') | b64encode }} 
   path: /opt/miep/msaapp/apps/clusteradmin/clusters.json
   encoding: b64
   owner: msausr:msagrp
   permissions: '0640'
{% endif %}
{% if udevlocalrules is defined %}
 - content: {{ udevlocalrules.stdout | default('') | b64encode }} 
   path: /etc/udev/rules.d/10-local.rules
   encoding: b64
   owner: root:root
   permissions: '0640'
{% endif %}
{% for bond in vmnic_bonds | default([]) %}
 {{ ifcfg_bond(bond.dev[0], bond.dev[1], bond.name, bond.args) }}
{% endfor %}
{{ self.xlfile() }}
{% endblock write_files %}
{% block routing %}
{% if vm_type in [ "mn", "mon", "slb", "vom", "jeos", "tools", "custom" ] %}{{ self.afg_routing_simple() }}
{% endif %}
{% if vm_type == "ts" %}{{ self.afg_routing_ts() }}
{% endif %}
{% if vm_type == "dk" %}{{ self.afg_routing_ts() }}
{% endif %}
{% if vm_type == "ddc" %}{{ self.afg_routing_ddc() }}
{% endif %}
{% if vm_type == "da" %}{{ self.routing_da() }}
{% endif %}
{% if vm_type == "cim" %}{{ self.routing_cim() }}
{% endif %}
{% endblock routing %}
{% block afg_routing_simple %}
{% if oamnet_routes is defined %}
{% for route in oamnet_routes %}
    {{ route }} {{ oam_gateway }} - {{ vmnic_0 }}
{% endfor %}
{% endif %}
{% endblock afg_routing_simple %}
{% block routing_simple %}
{% if os_infra_ext_network is defined and vm_type in ['tools'] and deploy_platform == "deploy_openstack" and infra_ext_ip is defined%}
{% if (deploy_platform == "deploy_openstack" and msp_linux_distro | match("SLES_12.*")) %}
    {{ os_infra_ext_gateway }} - - {{ vmnic_0 }}
{% endif %}
    default {{ os_infra_ext_gateway }} - {{ vmnic_0 }}
{% else %}
{% if bootproto_oam | default(bootproto_oam_i) != "dhcp" or deploy_platform != "deploy_openstack" %}
    default {{ oam_gateway }} - {{ vmnic_0 }}
{% endif %}
{% endif %}
{% if internalnet_route is defined %}
{% if (bootproto_internal | default(bootproto_internal_i) == "dhcp" and msp_linux_distro | match("SLES_12.*")) %}
    {{ internal_gateway }} - - {{ vmnic_1 }}
{% endif %}
    {{ internalnet_route }} {{ internal_gateway }} - {{ vmnic_1 }}
{% endif %}
{% endblock routing_simple %}
{% block afg_routing_ts %}
{% if oamnet_routes is defined %}
{% for route in oamnet_routes %}
    {{ route }} {{ oam_gateway }} - {{ vmnic_0 }}
{% endfor %}
{% endif %}
{% if internalnet_route is defined %}
    {{ internalnet_route }} {{ internal_gateway }} - {{ vmnic_1 }}
{% endif %}
{% if clientnet_routes is defined %}
{% for route in clientnet_routes %}
    {{ route }} {{ access_gateway }} - {{ vmnic_2 }}
{% endfor %}
{% endif %}
{% if clientnet_routes_ipv6 is defined %}
{% for route in clientnet_routes_ipv6 %}
    {{ route }} {{ access_gateway_ipv6 }} - {{ vmnic_2 }}
{% endfor %}
{% endif %}
{% if controlplanesig_routes is defined %}
{% for route in controlplanesig_routes %}
    {{ route }} {{ controlplanesig_gateway }} - {{ vmnic_4b | default(vmnic_4) }}
{% endfor %}
{% endif %}
{% if controlplanesig_routes_ipv6 is defined %}
{% for route in controlplanesig_routes_ipv6 %}
    {{ route }} {{ controlplanesig_gateway_ipv6 }} - {{ vmnic_4b | default(vmnic_4) }}
{% endfor %}
{% endif %}
{% if internet_route is defined %}
{% for route in internet_route %}
    {{ route }} {{ internet_gateway }} - {{ vmnic_3 }}
{% endfor %}
{% endif %}
{% if internet_routes_ipv6 is defined %}
{% for route in internet_routes_ipv6 %}
    {{ route }} {{ internet_gateway_ipv6 }} - {{ vmnic_3 }}
{% endfor %}
{% endif %}
{% endblock afg_routing_ts %}
{% block routing_ts %}
{% if (bootproto_access | default(bootproto_access_i) == "dhcp" and msp_linux_distro | match("SLES_12.*")) %}
    {{ access_gateway }} - - {{ vmnic_2 }}
{% endif %}
{% if bootproto_internet | default(bootproto_internet_i) != "dhcp" or deploy_platform != "deploy_openstack" %}
    default {{ internet_gateway }} - {{ vmnic_3 }}
{% elif bootproto_internet | default(bootproto_internet_i) == "dhcp" and msp_linux_distro | match("SLES_11.*") %}
    {{ internet_gateway }} - - {{ vmnic_3 }}
    default {{ internet_gateway }} - {{ vmnic_3 }}
{% endif %}

{% if internet_gateway_ipv6 is defined %}
    default {{ internet_gateway_ipv6 }} - {{ vmnic_3 }}
{% endif %}
{% if (deploy_platform == "deploy_openstack" and msp_linux_distro | match("SLES_12.*")) %}
    {{ oam_gateway }} - - {{ vmnic_0 }}
{% endif %}
{% if oamnet_route is defined %}
    {{ oamnet_route }} {{ oam_gateway }} - {{ vmnic_0 }}
{% endif %}
{% if oamnet_route2 is defined %}
    {{ oamnet_route2 }} {{ oam_gateway }} - {{ vmnic_0 }}
{% endif %}
{% if oamnet_route3 is defined %}
    {{ oamnet_route3 }} {{ oam_gateway }} - {{ vmnic_0 }}
{% endif %}
{% if oamnet_route4 is defined %}
    {{ oamnet_route4 }} {{ oam_gateway }} - {{ vmnic_0 }}
{% endif %}
{% if oamnet_routes is defined %}
{% for route in oamnet_routes %}
    {{ route }} {{ oam_gateway }} - {{ vmnic_0 }}
{% endfor %}
{% endif %}
{% if internalnet_route is defined %}
{% if (bootproto_internal | default(bootproto_internal_i) == "dhcp" and msp_linux_distro | match("SLES_12.*")) %}
    {{ internal_gateway }} - - {{ vmnic_1 }}
{% endif %}
    {{ internalnet_route }} {{ internal_gateway }} - {{ vmnic_1 }}
{% endif %}
{% if clientnet_route is defined %}
    {{ clientnet_route }} {{ access_gateway }}  - {{ vmnic_2 }}
{% endif %}
{% if clientnet_route2 is defined %}
    {{ clientnet_route2 }} {{ access_gateway }} - {{ vmnic_2 }}
{% endif %}
{% if clientnet_route3 is defined %}
    {{ clientnet_route3 }} {{ access_gateway }} - {{ vmnic_2 }}
{% endif %}
{% if ts_extra_route1 is defined %}
    {{ ts_extra_route1 }}
{% endif %}
{% if clientnet_routes is defined %}
{% for route in clientnet_routes %}
    {{ route }} {{ access_gateway }} - {{ vmnic_2 }}
{% endfor %}
{% endif %}
{% if clientnet_routes_ipv6 is defined %}
{% for route in clientnet_routes_ipv6 %}
    {{ route }} {{ access_gateway_ipv6 }} - {{ vmnic_2 }}
{% endfor %}
{% endif %}
{% if controlplanesig_routes is defined %}
{% if (bootproto_controlplanesig | default(bootproto_controlplanesig_i) == "dhcp" and msp_linux_distro | match("SLES_12.*")) %}
    {{ controlplanesig_gateway }} - - {{ vmnic_4b | default(vmnic_4) }}
{% endif %}
{% for route in controlplanesig_routes %}
    {{ route }} {{ controlplanesig_gateway }} - {{ vmnic_4b | default(vmnic_4) }}
{% endfor %}
{% endif %}
{% endblock routing_ts %}
{% block afg_routing_ddc %}
{% if oamnet_routes is defined %}
{% for route in oamnet_routes %}
    {{ route }} {{ oam_gateway }} - {{ vmnic_0 }}
{% endfor %}
{% endif %}
{% endblock afg_routing_ddc %}
{% block routing_ddc %}
{% if bootproto_oam | default(bootproto_oam_i) != "dhcp" or deploy_platform != "deploy_openstack" %}
    default {{ oam_gateway }} - {{ vmnic_0 }}
{% endif %}
{% if internalnet_route is defined and (bootproto_internal | default(bootproto_internal_i) != "dhcp" and deploy_platform != "deploy_openstack") %}
    {{ internalnet_route }} {{ internal_gateway }} - {{ vmnic_1 }}
{% endif %}
{% if (deploy_platform == "deploy_openstack" and msp_linux_distro | match("SLES_12.*")) %}
    {{ access_gateway }} - - {{ vmnic_2 }}
{% endif %}
{% if clientnet_route is defined %}
    {{ clientnet_route }} {{ access_gateway }}  - {{ vmnic_2 }}
{% endif %}
{% if clientnet_route2 is defined %}
    {{ clientnet_route2 }} {{ access_gateway }} - {{ vmnic_2 }}
{% endif %}
{% if clientnet_route3 is defined %}
    {{ clientnet_route3 }} {{ access_gateway }} - {{ vmnic_2 }}
{% endif %}
{% if clientnet_routes is defined %}
{% for route in clientnet_routes %}
    {{ route }} {{ access_gateway }} - {{ vmnic_2 }}
{% endfor %}
{% endif %}
{% if clientnet_routes_ipv6 is defined %}
{% for route in clientnet_routes_ipv6 %}
    {{ route }} {{ access_gateway_ipv6 }} - {{ vmnic_2 }}
{% endfor %}
{% endif %}
{% if custom1_network_routes is defined %}
{% for route in custom1_network_routes %}
    {{ route }} {{ custom1_network_gateway }} - {{ vmnic_2c }}
{% endfor %}
{% endif %}
{% if custom1_network_routes_ipv6 is defined %}
{% for route in custom1_network_routes_ipv6 %}
    {{ route }} {{ custom1_network_gateway_ipv6 }} - {{ vmnic_2c }}
{% endfor %}
{% endif %}
{% endblock routing_ddc %}
{% block routing_da %}
{% if bootproto_oam | default(bootproto_oam_i) != "dhcp" or deploy_platform != "deploy_openstack" %}
    default {{ oam_gateway }} - {{ vmnic_0 }}
{% endif %}
{% if internalnet_route is defined and (bootproto_internal | default(bootproto_internal_i) != "dhcp" and deploy_platform != "deploy_openstack") %}
    {{ internalnet_route }} {{ internal_gateway }} - {{ vmnic_1 }}
{% endif %}
{% if controlplanesig_routes is defined %}
{% if (bootproto_controlplanesig | default(bootproto_controlplanesig_i) == "dhcp" and msp_linux_distro | match("SLES_12.*")) %}
    {{ controlplanesig_gateway }} - - {{ vmnic_2b | default(vmnic_2) }}
{% endif %}
{% for route in controlplanesig_routes %}
    {{ route }} {{ controlplanesig_gateway }} - {{ vmnic_2b | default(vmnic_2) }}
{% endfor %}
{% else %}
{% if clientnet_route is defined %}
    {{ clientnet_route }} {{ access_gateway }}  - {{ vmnic_2 }}
{% endif %}
{% if clientnet_route2 is defined %}
    {{ clientnet_route2 }} {{ access_gateway }} - {{ vmnic_2 }}
{% endif %}
{% if clientnet_route3 is defined %}
    {{ clientnet_route3 }} {{ access_gateway }} - {{ vmnic_2 }}
{% endif %}
{% if clientnet_routes is defined %}
{% if (bootproto_access | default(bootproto_access_i) == "dhcp" and msp_linux_distro | match("SLES_12.*")) %}
    {{ access_gateway }} - - {{ vmnic_2 }}
{% endif %}
{% for route in clientnet_routes %}
    {{ route }} {{ access_gateway }} - {{ vmnic_2 }}
{% endfor %}
{% endif %}
{% endif %}
{% endblock routing_da %}

{% block routing_cim %}
{% if bootproto_oam | default(bootproto_oam_i) != "dhcp" or deploy_platform != "deploy_openstack" %}
    default {{ oam_gateway }} - {{ vmnic_0 }}
{% endif %}
{% if internalnet_route is defined and (bootproto_internal | default(bootproto_internal_i) != "dhcp" and deploy_platform != "deploy_openstack") %}
    {{ internalnet_route }} {{ internal_gateway }} - {{ vmnic_1 }}
{% endif %}
{% if controlplanesig_routes is defined %}
{% for route in controlplanesig_routes %}
    {{ route }} {{ controlplanesig_gateway }} - {{ vmnic_2b | default(vmnic_2) }}
{% endfor %}
{% endif %}
{% endblock routing_cim %}

{% block mn_init_properties %}{% if item.mn_config_type == "firstinstall" %}
{% if ((mn_config_version | default("v1")) == "v1") %}
 - content: |
    CAE_PASSWORD={{ cae_passwd }}
    MSA_PASSWORD={{ msa_passwd }}
    CAPLOG_PASSWORD={{ caplog_passwd }}
    TRACELOG_PASSWORD={{ tracelog_passwd }}
    MN_OAM_IPADDR={{ mn_oam_ip }}
    MN_INTERNAL_IPADDR={{ mn_internal_ip }}
    SNMP_IPADDR={{ mn_internal_ip }}
    SNMP_PORT={{ 8162 }}
    LIGHTTPD_USER={{ lighttpd_user }}
    LIGHTTPD_PW={{ lighttpd_passwd }}
    MN_SERVER_GROUPNAME={{ clusterid }}
    STORAGE_TYPE={{ storage_type }}
    SUPPORT_LANG_LIST={{ lang_list }}
    AUTOSTART=Y
    AUTODBPATCH=Y
    PRODUCT={{ product | default('MSP') }}
   path: /opt/miep/tools/mnsetup/init.properties
   owner: root:root
   permissions: '0640'
{% endif %}
{% if ((mn_config_version | default("")) == "v2") %}
 - content: |
    MN_OAM_IPADDR={{ mn_oam_ip }}
    MN_INTERNAL_IPADDR={{ mn_internal_ip }}
    SNMP_IPADDR={{ mn_internal_ip }}
    SNMP_PORT={{ 8162 }}
    MN_SERVER_GROUPNAME={{ clusterid }}
    STORAGE_TYPE={{ storage_type }}
    SUPPORT_LANG_LIST={{ lang_list }}
    AUTOSTART=Y
    AUTODBPATCH=Y
    PRODUCT={{ product | default('MSP') }}
{% if  mn_to_other_node_network is defined %}
    MN_TO_OTHER_NODE_NETWORK={{ mn_to_other_node_network | default('INTERNAL') }}
{% endif %}
   path: /opt/miep/tools/mnsetup/init.properties
   owner: root:root
   permissions: '0640'
 - content: |
    CAE_PASSWORD={{ cae_passwd }}
    MSA_PASSWORD={{ msa_passwd }}
    CAPLOG_PASSWORD={{ caplog_passwd }}
    TRACELOG_PASSWORD={{ tracelog_passwd }}
   path: /opt/miep/tools/mnsetup/init.properties.sec
   owner: root:root
   permissions: '0640'
{% endif %}
{% endif %}
{% if item.mn_config_type == "upgrade" %}
{% if ((mn_config_version | default("")) == "v2") %}
 - content: |
    CAE_PASSWORD={{ cae_passwd }}
    MSA_PASSWORD={{ msa_passwd }}
    CAPLOG_PASSWORD={{ caplog_passwd }}
    TRACELOG_PASSWORD={{ tracelog_passwd }}
   path: /opt/miep/tools/mnsetup/init.properties.sec
   owner: root:root
   permissions: '0640'
{% endif %}
{% endif %}

{% endblock mn_init_properties %}

# === MON init properties block ===
{% block mon_init_properties %}{% if (vm_upgrade | default(False)) == False %}
{% if ((mn_config_version | default("")) == "v2") %}
 - content: |
    MN_OAM_IPADDR={{ oam_ip }}
    MN_INTERNAL_IPADDR={{ internal_ip }}
    SNMP_IPADDR={{ snmptrap_ip }}
    SNMP_PORT={{ snmp_port }}
    MN_SERVER_GROUPNAME={{ clusterid }}
    STORAGE_TYPE={{ storage_type }}
    SUPPORT_LANG_LIST={{ lang_list }}
    AUTOSTART=Y
    AUTODBPATCH=Y
    PRODUCT={{ product | default('MSP') }}
{% if  mn_to_other_node_network is defined %}
    MN_TO_OTHER_NODE_NETWORK={{ mon_to_other_node_network | default('INTERNAL') }}
{% endif %}
   path: /opt/miep/tools/mnsetup/init.properties
   owner: root:root
   permissions: '0640'
 - content: |
    #CAE_PASSWORD={{ cae_passwd }}
    #MSA_PASSWORD={{ msa_passwd }}
    CAPLOG_PASSWORD={{ caplog_passwd }}
    TRACELOG_PASSWORD={{ tracelog_passwd }}
   path: /opt/miep/tools/mnsetup/init.properties.sec
   owner: root:root
   permissions: '0640'
{% endif %}
{% endif %}
{% if (vm_upgrade | default(False)) == True %}
{% if ((mn_config_version | default("")) == "v2") %}
 - content: |
    #CAE_PASSWORD={{ cae_passwd }}
    #MSA_PASSWORD={{ msa_passwd }}
    CAPLOG_PASSWORD={{ caplog_passwd }}
    TRACELOG_PASSWORD={{ tracelog_passwd }}
   path: /opt/miep/tools/mnsetup/init.properties.sec
   owner: root:root
   permissions: '0640'
{% endif %}
{% endif %}

{% endblock mon_init_properties %}


# ===========================================================================
{% block runcmd_ntp_client %}
{% if (ntp_ips is defined) and (ntp_enable | default(False) == True or ntp_enable | default(False) == "True") %}
{% for ntp_ip in ntp_ips %}
 - [ sh, -xc, "/sbin/yast2 ntp-client add server={{ ntp_ip }}" ]
{% endfor %}
 - [ sh, -xc, "/sbin/yast2 ntp-client enable" ]
{% endif %}
{% endblock runcmd_ntp_client %}

{% block runcmd_update_hosts_file %}
{% for host in  additional_hosts | default([]) %}
{% if vm_type in host.vm_types | default(all_vm_types) %}
 - [ sh, -xc, "echo {{ host.host }} {{ host.fqdn }} {{ host.short }} >> /etc/hosts" ]
{% endif %}
{% endfor %}
{% endblock runcmd_update_hosts_file %}

{% block runcmd_update_bashrc_file %}{% if msp_linux_distro | match("SLES_11.*") %}{% for config in ethtool_configuration | default([]) %}
{% if vm_type in config.vm_types %}
 - [ sh, -xc, "echo \"\n/sbin/ethtool -K {% if config.interface == "nic2" %}{{ vmnic_2 }}{% elif config.interface == "nic3" %}{{ vmnic_3 }}{% endif %} {{ config.params }}\" >> /etc/init.d/boot.local" ]
{% endif %}
{% endfor %}{% endif %}
{% endblock runcmd_update_bashrc_file %}

{% block runcmd_update_tcpproxy_conf %}
{% if vm_type in [ "ts" ] and ethtool_configuration is defined %}
 - [ sh, -xc, "sed -i 's/\\(MaxProcessSize\\s*=\\)\\s*[0-9]*/\\1 {{ tcpproxymem | default("16777216") }}/' /opt/miep/bin/ns/tcpproxy.ns" ]
{% endif %}
{% endblock runcmd_update_tcpproxy_conf %}

{% block xlfile %} 
{% if xlfile_content is defined and vm_type in [ 'dk', 'ts' ] %}
 - content: {{ xlfile_content | default('') }} 
   path: /etc/addr2x.cfg
   encoding: b64
   owner: stackusr:miepgrp
   permissions: '0400'
{% endif %}
{% endblock xlfile %}

{% macro ipv6short(net) -%}{% if not (net | match("^.+:.+:.+:.+:.+:.+:.+"))  %}:{% endif %}{%- endmacro %}

{% macro ifcfg_bond(slave0, slave1, bond, args) -%}
{% if bond not in [ vmnic_0, vmnic_1, vmnic_2, vmnic_3, vmnic_4, vmnic_5 ] %}
- content: |
    STARTMODE='onboot'
    {{ ifcfg_bond_body(slave0, slave1, args | default([])) }}
   path: /etc/sysconfig/network/ifcfg-{{ bond }}
   owner: root:root
   permissions: '0644'{% endif %}
{%- endmacro %}

{% macro ifcfg_bond_body(slave0, slave1, args) -%}
    BONDING_MASTER='yes'   
    BONDING_SLAVE_0='{{ slave0 }}'   
    BONDING_SLAVE_1='{{ slave1 }}'   
    BONDING_MODULE_OPTS='{{ vmbnic_bonding_opts | replace("%1%", args[0]  | default("")) | replace("%2%", slave0 | default(""))}}'
{%- endmacro %}

{% macro bonding_attributes(vmnic_x, args = []) -%}
{% if vmnic_bonds is defined and vmnic_bonds[0].name == vmnic_x %}  
    BONDING_MASTER='yes'   
    BONDING_SLAVE_0='{{ vmnic_bonds[0].dev[0] }}'
    BONDING_SLAVE_1='{{ vmnic_bonds[0].dev[1] }}'
    BONDING_MODULE_OPTS='{{ vmbnic_bonding_opts | replace("%1%", vmnic_bonds[0].args[0]  | default("")) | replace("%2%", vmnic_bonds[0].dev[0] | default("")) }}'{% endif %}
{% if vmnic_bonds is defined and vmnic_bonds[1].name == vmnic_x %}  
    BONDING_MASTER='yes'   
    BONDING_SLAVE_0='{{ vmnic_bonds[1].dev[0] }}'
    BONDING_SLAVE_1='{{ vmnic_bonds[1].dev[1] }}'
    BONDING_MODULE_OPTS='{{ vmbnic_bonding_opts | replace("%1%", vmnic_bonds[1].args[0]  | default("")) | replace("%2%", vmnic_bonds[1].dev[0] | default("")) }}'{% endif %}
{% if vmnic_bonds is defined and vmnic_bonds[2].name == vmnic_x %}  
    BONDING_MASTER='yes'   
    BONDING_SLAVE_0='{{ vmnic_bonds[2].dev[0] }}'
    BONDING_SLAVE_1='{{ vmnic_bonds[2].dev[1] }}'
    BONDING_MODULE_OPTS='{{ vmbnic_bonding_opts | replace("%1%", vmnic_bonds[2].args[0]  | default("")) | replace("%2%", vmnic_bonds[2].dev[0] | default("")) }}'{% endif %}
{%- endmacro %}

{% macro ifcfg_name(name=none) -%}
{% if name != none %}

    NAME='{{ name }}'{% endif %}
{%- endmacro %}

{% macro cmd_add_source_routing(tinterface, tnetwork, tgateway, tnumber = 200, first_time = False, tname = 'multipleinternet') -%}
{% if True %}
{% if (first_time | bool) %}
 - [ sh, -xc, "echo {{ '%d ' | format(tnumber) + tname }} >> /etc/iproute2/rt_tables" ]
{% endif %}
 - [ sh, -xc, "echo ip route add {{ tnetwork + ' dev ' + tinterface + ' table ' + tname }} >> /etc/init.d/boot.local" ]
 - [ sh, -xc, "echo ip route add default via {{ tgateway + ' dev ' + tinterface + ' table ' + tname }} >> /etc/init.d/boot.local" ]
 - [ sh, -xc, "echo ip rule add from {{ tnetwork + ' table ' + tname }} >> /etc/init.d/boot.local" ]
{% endif %}
{%- endmacro %}

{% block runcmd_first_boot_issue_file %}

{% if use_ci_issue_text is defined and use_ci_issue_text and msp_linux_distro | match("SLES_12.*") %}
 - [ sh, -xc, "echo {{ ci_issue_text_1 }} > /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_2 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_3 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_4 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_5 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_6 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_7 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "if [ -f /etc/issue.orig ]; then cp /etc/issue.orig /etc/issue; fi" ]
 - [ sh, -xc, "if [ ! -f /etc/issue.orig ]; then cp /etc/issue /etc/issue.orig; cp /etc/issue.ci /etc/issue; fi" ]
 - [ sh, -xc, "/bin/sed -i 's/^DHCLIENT_SET_DEFAULT_ROUTE=\"yes\".*/DHCLIENT_SET_DEFAULT_ROUTE=\"no\"/' /etc/sysconfig/network/dhcp" ]
{% endif %}

{% endblock runcmd_first_boot_issue_file %}

