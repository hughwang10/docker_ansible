{% extends "user-data-template.ansible" %}
{% block header %}
#cloud-config
{{ super() }}
# \brief   cloud-init template for MSP DEV servers config
# \version 0.1.4
# \date    2016-04-21
# Configuration created for MSP {{ vm_type }}
{% endblock header %}

{% block passwd %}
{{ super() }}
 expire: False
#ssh_pwauth: [ True, False, "" or "unchanged" ]
{% endblock passwd %}

{% block users %}{% endblock users %}
{% block bootcmd %}{% endblock bootcmd %}
{% block runcmd %}
{{ super() }}
 - [ sh, -xc, "/usr/sbin/wicked ifup --timeout 60 eth0" ]
 - [ sh, -xc, "rm -f /root/reserved_space" ]
{{ self.runcmd_grub2() }}{{ self.runcmd_ntp_client() }}
{{ self.runcmd_update_hosts_file() }}{{ self.runcmd_bindssh() }}{{ self.runcmd_ssh_custom_security() }}{{ self.runcmd_dns() }}
{{ self.runcmd_custom_users() }}{{ self.runcmd_custom_pre() }}{{ self.runcmd_misc() }}
{{ self.runcmd_custom_post() }}{{ self.runcmd_git() }}
{% endblock runcmd %}

{% block runcmd_git %}{% if (server_application_git | default(True) | bool == True) and corporate_username is defined and corporate_email is defined %}
 - [ sh, -xc, "export HOME=/root && git config --global user.name {{ corporate_username }} && git config --global user.email {{ corporate_email }}" ]
 - [ sh, -xc, "sed -i 's/^\\(export\\s*USERNAME\\s*=\\).*$/\\1{{ corporate_username | default('your_name') }}/' /etc/profile.local" ]
 - [ sh, -xc, "sed -i 's/^\\(export\\s*GERRITSRV\\s*=\\).*$/\\1{{ gerrit_mirror_internal | default('GERRITSRV2') }}/' /etc/profile.local" ]
 - [ sh, -xc, "sed -i 's/^\\(export\\s*GERRITHOST\\s*=\\).*$/\\1{{ gerrit_host_internal | default('GERRITHOST2') }}/' /etc/profile.local" ]
{% endif %}
{% endblock runcmd_git %}


{% block runcmd_config_auto_dns %}{% if dns_ips is defined %}
 - [ sh, -xc, "/bin/sed -i 's/^NETCONFIG_DNS_POLICY=.*/NETCONFIG_DNS_POLICY=\"STATIC\"/' /etc/sysconfig/network/config" ]
{% endif %}
{% endblock runcmd_config_auto_dns %}

{% block runcmd_custom_pre %}{% if custom_repos is defined %} - [ sh, -xc, "mkdir /mnt/customizations" ]
 - [ sh, -xc, "mount -o loop /dev/sr0 /mnt/customizations" ]
{% for repo in custom_repos %} - [ sh, -xc, "wget http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }}/repodata/repomd.xml && /usr/bin/zypper -n ar -f http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }} {{ repo }}" ]
 - [ sh, -xc, "wget http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }}/repodata/repomd.xml || /usr/bin/zypper -n ar -f /mnt/customizations/{{ repo }} {{ repo }}" ]
{% endfor %}
{% if custom_rpms is defined %} - [ sh, -xc, "/usr/bin/zypper --non-interactive --no-gpg-checks in {% for rpm in custom_rpms %}{% if vm_type in rpm.vm_types | default(all_vm_types) %}{{ rpm.rpm }} {% endif %}{% endfor %}" ]
{% endif %}
 - [ sh, -xc, "umount /mnt/customizations" ]
{% endif %}
{% if system_repo is defined and system_rpms is defined and system_rpms.stdout_lines is defined and system_rpms.stdout_lines | length > 0 %} - [ sh, -xc, "mkdir /mnt/customizations" ]
 - [ sh, -xc, "mount -o loop /dev/sr0 /mnt/customizations" ]
{% for repo in [ "system-repo" ] %} - [ sh, -xc, "wget http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }}/repodata/repomd.xml && /usr/bin/zypper -n ar -t YUM -G -f http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }} {{ repo }}" ]
 - [ sh, -xc, "wget http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-repos/{{ repo }}/repodata/repomd.xml || /usr/bin/zypper -n ar -t YUM -G -f /mnt/customizations/{{ repo }} {{ repo }}" ]
{% endfor %}
{% if system_rpms is defined and system_rpms.stdout_lines is defined and system_rpms.stdout_lines | length > 0 %} - [ sh, -xc, "/usr/bin/zypper --non-interactive --no-gpg-checks in {{ system_rpms.stdout_lines | join(' ') }}" ]
{% endif %}
 - [ sh, -xc, "umount /mnt/customizations" ]
{% endif %}
{% if custom_cmds_pre is defined %}
{% for cmd in custom_cmds_pre %}{% if vm_type in cmd.vm_types | default(all_vm_types) %} - [ sh, -xc, "{{ cmd.cmd }}" ]
{% endif %}{% endfor %}
{% endif %}
{% if custom_files is defined %}
{% for file in custom_files %}{% if vm_type in file.vm_types | default(all_vm_types) %} - [ sh, -xc, "mkdir -p {{ file.dest }}" ]
 - [ sh, -xc, "wget {% if file.recursive is defined %}{{ wget_recursive_opts }} {% endif %}-q --directory-prefix={{ file.dest }} http://{{ msp_tools_vm_ip }}/miit{{ www_rel_output_path }}/custom-files/{{ file.src }}" ]
{% if file.owner is defined %} - [ sh, -xc, "chown {{ file.owner }} {{ file.dest }}/{{ file.src }}" ]
{% endif %}
{% if file.permission is defined %} - [ sh, -xc, "chmod {{ file.permission }} {{ file.dest }}/{{ file.src }}" ]
{% endif %}
{% endif %}{% endfor %}
{% endif %}{% endblock runcmd_custom_pre %}

{% block runcmd_custom_post %}{% if custom_cmds_post is defined %}
{% for cmd in custom_cmds_post %}{% if vm_type in cmd.vm_types | default(all_vm_types) %} - [ sh, -xc, "{{ cmd.cmd }}" ]
{% endif %}{% endfor %}
{% endif %}{% endblock runcmd_custom_post %}

{% block runcmd_custom_users %}{% if custom_users is defined %}
{% for user in custom_users %}{% if vm_type in user.vm_types | default(all_vm_types) %} - [ sh, -xc, "yast2 users add username={{ user.user }} home=/home/{{ user.user }} password={{ user.password }} {% for group in (user.groups | default([])) %}{% if loop.first %}grouplist={% endif %}{{ group }}{% if not loop.last %},{% endif %}{% endfor %}" ]
{% endif %}{% endfor %}
{% endif %}{% endblock runcmd_custom_users %}

{% block runcmd_ssh_custom_security %}
 - [ sh, -xc, "sed -i 's/^ClientAliveCountMax.*/ClientAliveCountMax '{{ ssh_clientalivecountmax | default(20) }}'/g' /etc/ssh/sshd_config" ]
 - [ sh, -xc, "sed -i 's/^ClientAliveInterval.*/ClientAliveInterval '{{ ssh_clientaliveinterval | default(1800) }}'/g' /etc/ssh/sshd_config" ]
 - [ sh, -xc, "sed -i 's/^PermitRootLogin.*/PermitRootLogin '{{ ssh_permitrootlogin | default('no') }}'/g' /etc/ssh/sshd_config" ]
 - [ sh, -xc, "sed -i 's/^#UseDNS.*/UseDNS '{{ ssh_usedns | default('no') }}'/g' /etc/ssh/sshd_config" ]
 - [ sh, -xc, "echo auth       optional     pam_faildelay.so delay=5000000  >> /etc/pam.d/sshd" ]
{% endblock runcmd_ssh_custom_security %}

{% block runcmd_snmp %} - [ sh, -xc, "echo trap2sink {{ snmptrap_ip }} >> /etc/snmp/snmpd.conf" ]
 - [ sh, -xc, "sed -i 's/^agentaddress.*/agentaddress {{ oam_ip }}/' /etc/snmp/snmpd.conf" ]
 - [ sh, -xc, "sed -i 's/^    IP=.*/    IP=\"{{ oam_ip }}\"/' /opt/miep/snmp/tools/agentmonitor.sh" ]
 - [ sh, -xc, "sed -i 's/^    SNMPCOMMUNITY=.*/    SNMPCOMMUNITY=\"{{ snmpcommunity }}\"/' /opt/miep/snmp/tools/agentmonitor.sh" ]
 - [ sh, -xc, "sed -i 's/^    IP=.*/    IP=\"{{ oam_ip }}\"/' /opt/miep/snmp/tools/agentmonitor_sle12.sh" ]
 - [ sh, -xc, "sed -i 's/^    SNMPCOMMUNITY=.*/    SNMPCOMMUNITY=\"{{ snmpcommunity }}\"/' /opt/miep/snmp/tools/agentmonitor_sle12.sh" ]
{% endblock runcmd_snmp %}

{% block runcmd_dns %}{% if dns_ip is defined %} - [ sh, -xc, "/sbin/yast2 dns edit nameserver1={{ dns_ip }}" ]
{% endif %}{% if dns_ip2 is defined %} - [ sh, -xc, "/sbin/yast2 dns edit nameserver2={{ dns_ip2 }}" ]
{% endif %}{% for dns in dns_ips | default([]) %}
 - [ sh, -xc, "/sbin/yast2 dns edit nameserver{{ loop.index }}={{ dns }}" ]
{% endfor %}
{% endblock runcmd_dns %}

{% block runcmd_bindssh %}
 - [ sh, -xc, "sed -i 's/^ListenAddress.*/ListenAddress 0.0.0.0/' /etc/ssh/sshd_config" ]
{% endblock runcmd_bindssh %}

{% block runcmd_grub2 %}
 - [ sh, -xc, "sed -i 's/^GRUB_CMDLINE_LINUX=\"\".*/GRUB_CMDLINE_LINUX=\"audit=1\"/' /etc/default/grub" ]
 - [ sh, -xc, "sed -i 's/^GRUB_TIMEOUT.*/GRUB_TIMEOUT=3/' /etc/default/grub" ]
 - [ sh, -xc, "echo GRUB_FORCE_HIDDEN_MENU=false >> /etc/default/grub" ]
 - [ sh, -xc, "echo #GRUB_TIMEOUT_STYLE=hidden >> /etc/default/grub" ]
 - [ sh, -xc, "/usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg" ]
{% endblock runcmd_grub2 %}

{% block power_state %}
power_state:
 mode: reboot
 message: Server will reboot now
 timeout: 5
{% endblock power_state %}

{% block runcmd_misc %} - [ sh, -c, "export TERM=vt220 ; yast keyboard set layout={{ keyboardlayout }}" ]
{% endblock runcmd_misc %}

{% block timezone %}timezone: '{{ timezone }}'
{% endblock timezone %}

{% block write_files %}
{{ super() }}
 - content: |
    BOOTPROTO='{{ bootproto_oam | default(bootproto_oam_i) }}'
{% if bootproto_oam | default(bootproto_oam_i) == 'static' %}
    IPADDR='{{ oam_ip }}' 
    BROADCAST='{{ oam_broadcast }}'
    NETMASK='{{ oam_netmask }}' 
    NETWORK='{{ oam_network }}'
{% endif %}
    USERCONTROL='no'
    STARTMODE='onboot'
    USERCONTROL='no'
    CHECK_DUPLICATE_IP='yes'
    SEND_GRATUITOUS_ARP='yes'
   path: /etc/sysconfig/network/ifcfg-{{ vmnic_0 }}
   owner: root:root
   permissions: '0644'
 - content: {{ ssh_public_key | default('') | b64encode }} 
   path: /root/.ssh/id_rsa.pub
   encoding: b64
   owner: root:root
   permissions: '0600'
 - content: {{ ssh_private_key | default('') | b64encode }} 
   path: /root/.ssh/id_rsa
   encoding: b64
   owner: root:root
   permissions: '0600'
{% if bootproto_oam | default(bootproto_oam_i) == 'static' %}
 - content: |
    default {{ oam_gateway }} - {{ vmnic_0 }}
   path: /etc/sysconfig/network/routes
   owner: root:root
   permissions: '0644'
{% endif %}
{% endblock write_files %}

{% block runcmd_ntp_client %}
{% if (ntp_ips is defined) and (ntp_enable | default(False) == True or ntp_enable | default(False) == "True") %}
{% for ntp_ip in ntp_ips %}
 - [ sh, -xc, "/sbin/yast2 ntp-client add server={{ ntp_ip }}" ]
{% endfor %}
 - [ sh, -xc, "/sbin/yast2 ntp-client enable" ]
{% endif %}
{% endblock runcmd_ntp_client %}

{% block runcmd_update_hosts_file %}
{% for host in  additional_hosts | default([]) %}
{% if vm_type in host.vm_types | default(all_vm_types) %}
 - [ sh, -xc, "echo {{ host.host }} {{ host.fqdn }} {{ host.short }} >> /etc/hosts" ]
{% endif %}
{% endfor %}
{% endblock runcmd_update_hosts_file %}

{% macro ipv6short(net) -%}{% if not (net | match("^.+:.+:.+:.+:.+:.+:.+"))  %}:{% endif %}{%- endmacro %}

{% macro ifcfg_name(name=none) -%}
{% if name != none %}

    NAME='{{ name }}'{% endif %}
{%- endmacro %}

{% macro cmd_add_source_routing(tinterface, tnetwork, tgateway, tnumber = 200, first_time = False, tname = 'multipleinternet') -%}
{% if True %}
{% if (first_time | bool) %}
 - [ sh, -xc, "echo {{ '%d ' | format(tnumber) + tname }} >> /etc/iproute2/rt_tables" ]
{% endif %}
 - [ sh, -xc, "echo ip route add {{ tnetwork + ' dev ' + tinterface + ' table ' + tname }} >> /etc/init.d/boot.local" ]
 - [ sh, -xc, "echo ip route add default via {{ tgateway + ' dev ' + tinterface + ' table ' + tname }} >> /etc/init.d/boot.local" ]
 - [ sh, -xc, "echo ip rule add from {{ tnetwork + ' table ' + tname }} >> /etc/init.d/boot.local" ]
{% endif %}
{%- endmacro %}

{% block runcmd_first_boot_issue_file %}

{% if use_ci_issue_text is defined and use_ci_issue_text and msp_linux_distro | match("SLES_12.*") %}
 - [ sh, -xc, "echo {{ ci_issue_text_1 }} > /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_2 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_3 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_4 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_5 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_6 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "echo {{ ci_issue_text_7 }} >> /etc/issue.ci" ]
 - [ sh, -xc, "if [ -f /etc/issue.orig ]; then cp /etc/issue.orig /etc/issue; fi" ]
 - [ sh, -xc, "if [ ! -f /etc/issue.orig ]; then cp /etc/issue /etc/issue.orig; cp /etc/issue.ci /etc/issue; fi" ]
 - [ sh, -xc, "/bin/sed -i 's/^DHCLIENT_SET_DEFAULT_ROUTE=\"yes\".*/DHCLIENT_SET_DEFAULT_ROUTE=\"no\"/' /etc/sysconfig/network/dhcp" ]
{% endif %}

{% endblock runcmd_first_boot_issue_file %}

