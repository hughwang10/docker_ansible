---
# Copyright (C) 2015 by
# Ericsson AB
# S-164 83 Stockholm
# Sweden
# Tel: +46 10 719 00 00
#
# The program may be used and/or copied only with the written permission
# from Ericsson AB, or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the program
# has been supplied.
#
# All rights reserved.
# tasks file for roles/vm_remove_vsphere2
#- name

# CEE POD Sanity check before real MSP Deployment
# Generally it will have the following steps:
# 1. The Common MSP Stack is running? (Networks, Virtual Routers, Flavors)
# 2, MSP VM images are in CEE Glance ?
# 3, CEE Nova Quotas - CPUs enough ?
# 4, CEE Nova Quotas - Memorys enough ?
# 5, CEE Nova Quotas - Instances enough ? 
# 6, CEE Nova Quotas - Inject_files enough ?
# 7, CEE Cinder Quotas - gigabytes enough ?
# 8, CEE Cinder Quotas - volumes enough ? 
# 9, CEE Cinder - Create volume based on aonther volume's source_volid works? (for future UPGRADE purpose)

# Check if there ia running msp common stack 
- name: "Check if there is a running msp common stack"
  action: shell heat stack-list |grep -w {{ os_stackname }}
  register: mspstack_exists
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- fail: msg="The MSP Common Stack does not exist"
  when: (mspstack_exists.rc == 1)

# Check MSP VM images are in CEE Glance or not

# CEE Nova quota - Memory enough?
- name: "Check CEE Nova Quotas - CPU enough?"
  action: shell nova quota-show |grep ram | awk -F '|' '{print $3}' | sed 's/^[ ]*//'
  register: nova_quota_memory_
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

# CEE Nova quota - CPUs enough?
- name: "Check CEE Nova Quotas - CPU enough?"
  action: shell nova quota-show |grep cores | awk -F '|' '{print $3}' | sed 's/^[ ]*//'
  register: nova_quota_cores
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"
 
# CEE Nova quota - Instances enough?
- name: "Check CEE Nova Quotas - Instance enough?"
  action: shell nova quota-show |grep instances | awk -F '|' '{print $3}' | sed 's/^[ ]*//'
  register: nova_quota_cores
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

# CEE Nova quota - injected_files enough?
- name: "Check CEE Nova Quotas - injected_files enough?"
  action: shell nova quota-show |grep injected_files | awk -F '|' '{print $3}' | sed 's/^[ ]*//'
  register: nova_quota_cores
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

# CEE Cinder Quota - Volumes enough ?
- name: "Get user id for admin"
  action: shell keystone user-list |grep -w "admin" | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: keystone_user_admin_id
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Get Cinder Quotas - gigabytes for user admin"
  action: shell cinder quota-show {{ keystone_user_admin_id.stdout }} | grep "gigabytes" | awk -F '|' '{print $3}' | sed 's/^[ ]*//'
  register: cinder_quota_gigabytes
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"
 
- name: "Get Cinder Quotas - volumes for user admin"
  action: shell cinder quota-show {{ keystone_user_admin_id.stdout }} | grep "volumes" | awk -F '|' '{print $3}' | sed 's/^[ ]*//'
  register: cinder_quota_volumes
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

# Create volume based on aonther volume's source_volid works?
- name: "Create one DB arch test volume in Cinder"
  action: shell cinder create --display-name {{ os_stackname }}_arch 20 
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Wait till the volume is ready"
  action: shell cinder list | grep -w {{ os_stackname }}_arch | awk -F '|' '{print $3}' | sed 's/^[ ]*//'
  ignore_errors: yes
  register: cinder_volume_status
  until: (cinder_volume_status.stdout.find("available") != -1) or (cinder_volume_status.stdout.find("error") != -1)
  retries: 6000
  delay: 6
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- fail: msg="Can not create the test volume"
  when: (cinder_volume_status.stdout.find("error") != -1)

- name: "Get the volume id"
  action: shell cinder list | grep -w {{ os_stackname }}_arch | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  ignore_errors: yes
  register: arch_volume_id
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- fail: msg="Can not find the test volume" 
  when: arch_volume_id.stdout == ""

- name: "Create a volume base on the test volume"
  action: shell cinder create --display-name {{ os_stackname }}_arch_clone  --source_volid {{ arch_volume_id.stdout }} 20 
  ignore_errors: yes
  register: arch_volume_id
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Wait till the clone volume is ready"
  action: shell cinder list | grep -w {{ os_stackname }}_arch_clone | awk -F '|' '{print $3}' | sed 's/^[ ]*//'
  ignore_errors: yes
  register: cinder_volume_clone_status
  until: (cinder_volume_clone_status.stdout.find("available") != -1) or (cinder_volume_clone_status.stdout.find("error") != -1)
  retries: 6000
  delay: 6
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- fail: msg="Can not create the test volume"
  when: (cinder_volume_clone_status.stdout.find("error") != -1)

- name: "Delete the clone volume"
  action: shell cinder delete {{ os_stackname }}_arch_clone
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Wait till the clone volume is deleted"
  action: shell cinder list | grep -w {{ os_stackname }}_arch_clone | awk -F '|' '{print $3}' | sed 's/^[ ]*//'
  ignore_errors: yes
  register: cinder_volume_clone_status
  until: (cinder_volume_clone_status.stdout == "") or (cinder_volume_clone_status.stdout.find("error") != -1)
  retries: 6000
  delay: 6
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- fail: msg="Can not delete the clone volume"
  when: (cinder_volume_clone_status.stdout.find("error") != -1)

- name: "Delete the test volume"
  action: shell cinder delete {{ os_stackname }}_arch
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Wait till the test volume is deleted"
  action: shell cinder list | grep -w {{ os_stackname }}_arch | awk -F '|' '{print $3}' | sed 's/^[ ]*//'
  ignore_errors: yes
  register: cinder_volume_status
  until: (cinder_volume_status.stdout == "") or (cinder_volume_status.stdout.find("error") != -1)
  retries: 6000
  delay: 6
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- fail: msg="Can not delete the test volume"
  when: (cinder_volume_status.stdout.find("error") != -1)

