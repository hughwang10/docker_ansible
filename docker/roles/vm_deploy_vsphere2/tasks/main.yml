---
# Copyright (C) 2015 by
# Ericsson AB
# S-164 83 Stockholm
# Sweden
# Tel: +46 10 719 00 00
#
# The program may be used and/or copied only with the written permission
# from Ericsson AB, or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the program
# has been supplied.
#
# All rights reserved.
# tasks file for roles/vm_deploy_vsphere2
#- name: Creates  VM {{ template_name }} VM disk directory
#  file: path={{ output_folder_remote }}/vm state=directory

#- name: "Find the latest vmdk"
#  local_action: shell ls -t {{ vm_vmdk }} | head -1
#  register: cmd1_result 

#- name: "Find the latest vmdk, normalize the path"
#  local_action: shell readlink -m {{ cmd1_result.stdout }}
#  register: cmd_result

#- name: "Copy '{{ cmd_result.stdout }}' to deploy host"
#  action: copy src={{ cmd_result.stdout }} dest={{ output_folder_remote }}/vm/{{ template_name }}.vmdk
#- debug: msg="{{ template_name }}"

- set_fact: execution_host="{{ vsphere_esxihostnames[ ((execution_host_index | default('0')) | int) % (vsphere_esxihostnames | length)] }}"
  when: vsphere_esxihostnames is defined

- set_fact: execution_host="{{ vsphere_esxihostnames_advanced[ ((execution_host_index | default('0')) | int) % (vsphere_esxihostnames_advanced | length)].esxi }}"
  when: vsphere_esxihostnames_advanced is defined

- set_fact: execution_host={{ vsphere_esxihostname }}
  when: vsphere_esxihostnames is not defined and vsphere_esxihostnames_advanced is not defined

- set_fact: deploy_datastore="{{ vsphere_esxihostnames_advanced[ ((execution_host_index | default('0')) | int) % (vsphere_esxihostnames_advanced | length)].datastore | default(vsphere_datastore) }}"
  when: vsphere_esxihostnames_advanced is defined

- set_fact: deploy_datastore="{{ vsphere_datastore }}"
  when: vsphere_esxihostnames_advanced is not defined

- set_fact: extra_datastores="{{ vsphere_esxihostnames_advanced[ ((execution_host_index | default('0')) | int) % (vsphere_esxihostnames_advanced | length)].datastores_app | default(vsphere_datastores_app | default([ vsphere_esxihostnames_advanced[ ((execution_host_index | default('0')) | int) % (vsphere_esxihostnames_advanced | length)].datastore ])) | list }}"
#| default(vsphere_datastores_app) }}
  when: vsphere_esxihostnames_advanced is defined and universalcache | bool == True and vm_type == "ts" 

- debug: var="{{ extra_datastores }}"
#"{{ vsphere_esxihostnames_advanced[ ((execution_host_index | default('0')) | int) % (vsphere_esxihostnames_advanced | length)].datastores_app }}"
  when: vsphere_esxihostnames_advanced is defined and universalcache | bool == True and vm_type == "ts" 

- set_fact: extra_disk_sizes="{{ resource_disks_uc | default([resource_disk_uc,10]) }}"
  when: vm_type == "ts" and universalcache | bool == True

- set_fact: template_name="{{ clusterid }}-{{ vm_type }}{{ system_versiontag }}"
  when: afg_deployment_type in ["SA", "ABC"]

- set_fact: template_name="{{ vm_type }}{{ system_versiontag }}-{{ template_postfix | default('template') }}_{{ deployment_index_h }}"
  when: afg_deployment_type == "HA"

- name: "Normalize path to .iso file non MN in SA deployment .. "
  local_action: shell readlink -m "{{ output_folder }}/{{ vm_type }}/seed-{{ deploy_address }}_{{ template_name }}.iso"
  register: cmd_result3
  when: vm_type != "mn" and afg_deployment_type in ["SA", "ABC"]

- name: "Normalize path to .iso file non MN in HA deployment.. "
  local_action: shell readlink -m "{{ output_folder }}/{{ vm_type }}/seed-{{ deploy_address }}_{{ vm_name_deploy }}.iso"
  register: cmd_result31
  when: vm_type != "mn" and afg_deployment_type == "HA"

- name: "Copy data to target server non MN in SA deployment"
  action: copy src={{ cmd_result3.stdout }} dest={{ output_folder_remote }}
  when: vm_type != "mn" and afg_deployment_type in ["SA", "ABC"]

- name: "Copy data to target server non MN in HA deployment"
  action: copy src={{ cmd_result31.stdout }} dest={{ output_folder_remote }}
  when: vm_type != "mn" and afg_deployment_type == "HA"

- name: "Normalize path to .iso file in SA deployment"
  local_action: shell readlink -m {{ output_folder }}/{{ vm_type }}/seed-{{ mn_config_type }}_{{ template_name }}.iso
  register: cmd_result4
  when: vm_type == "mn" and afg_deployment_type in ["SA", "ABC"]

- name: "Normalize path to .iso file in HA deployment"
  local_action: shell readlink -m {{ output_folder }}/{{ vm_type }}/seed-{{ mn_config_type }}_{{ vm_name_deploy }}.iso
  register: cmd_result41
  when: vm_type == "mn" and afg_deployment_type == "HA"

- name: "Copy data to target server MN in SA deployment"
  action: copy src={{ cmd_result4.stdout }} dest={{ output_folder_remote }}
  when: vm_type == "mn" and afg_deployment_type in ["SA", "ABC"]

- name: "Copy data to target server MN in HA deployment"
  action: copy src={{ cmd_result41.stdout }} dest={{ output_folder_remote }}
  when: vm_type == "mn" and afg_deployment_type == "HA"

# - name: "copy afg_supp iso file to server destination "
#   action: copy src={{ output_folder_remote }}/../../system-images/archive/afg_supp.iso dest={{ output_folder_remote }}
#   when: vm_type == "mn"

- name: msg="Remove possible existing VM in SA deployment"
  vsphere_guest:
    vcenter_hostname: "{{ vsphere_vcenter }}"
    username: "{{ vsphere_vcusername }}"
    password: "{{ vsphere_vcpassword }}"
    guest: "{{ template_name }}"
    state: absent
    force: yes
  when: (force_remove | default(False) == True or force_remove | default(False) == "True") and afg_deployment_type in ["SA", "ABC"]

- name: msg="Remove possible existing VM in HA deployment"
  vsphere_guest:
    vcenter_hostname: "{{ vsphere_vcenter }}"
    username: "{{ vsphere_vcusername }}"
    password: "{{ vsphere_vcpassword }}"
    guest: "{{ vm_name_deploy }}"
    state: absent
    force: yes
  when: (force_remove | default(False) == True or force_remove | default(False) == "True") and afg_deployment_type == "HA"

# - name: msg="Upload AFG supplicant .iso"
#   vsphere_loadfile:
#     src: "{{ output_folder_remote }}/afg_supp.iso"
#     dest: "{{ vsphere_file_root_path }}/{{ clusterid }}/afg_supp.iso"
#     vsphere_vcenter: "{{ vsphere_vcenter }}"
#     vsphere_vcusername: "{{ vsphere_vcusername }}"
#     vsphere_vcpassword: "{{ vsphere_vcpassword }}"
#     vsphere_datacenter: "{{ vsphere_datacenter }}"
#     vsphere_datastore: "{{ vsphere_datastore_misc }}"
#     vsphere_esxihostname: "{{ vsphere_esxihostname }}"
#   when: upload_afg_supp == True

- name: msg="Upload IID .iso file to vSphere in SA deployment"
  vsphere_loadfile:
    src: "{{ output_folder_remote }}/seed-{{ mn_config_type }}_{{ template_name }}.iso"
    dest: "{{ vsphere_file_root_path }}/{{ clusterid }}/seed-{{ mn_config_type }}_{{ template_name }}.iso"
    vsphere_vcenter: "{{ vsphere_vcenter }}"
    vsphere_vcusername: "{{ vsphere_vcusername }}"
    vsphere_vcpassword: "{{ vsphere_vcpassword }}"
    vsphere_datacenter: "{{ vsphere_datacenter }}"
    vsphere_datastore: "{{ vsphere_datastore_misc }}"
    vsphere_esxihostname: "{{ vsphere_esxihostname }}"
  when: vm_type == "mn" and afg_deployment_type in ["SA", "ABC"]

- name: msg="Upload IID .iso file to vSphere in HA deployment"
  vsphere_loadfile:
    src: "{{ output_folder_remote }}/seed-{{ mn_config_type }}_{{ vm_name_deploy }}.iso"
    dest: "{{ vsphere_file_root_path }}/{{ clusterid }}/seed-{{ mn_config_type }}_{{ vm_name_deploy }}.iso"
    vsphere_vcenter: "{{ vsphere_vcenter }}"
    vsphere_vcusername: "{{ vsphere_vcusername }}"
    vsphere_vcpassword: "{{ vsphere_vcpassword }}"
    vsphere_datacenter: "{{ vsphere_datacenter }}"
    vsphere_datastore: "{{ vsphere_datastore_misc }}"
    vsphere_esxihostname: "{{ vsphere_esxihostname }}"
  when: vm_type == "mn" and afg_deployment_type == "HA"

- name: msg="Upload IID for {{ template_name }} .iso file to vSphere in SA deployment"
  vsphere_loadfile:
    vsphere_vcenter: "{{ vsphere_vcenter }}"
    vsphere_vcusername: "{{ vsphere_vcusername }}"
    vsphere_vcpassword: "{{ vsphere_vcpassword }}"
    vsphere_datacenter: "{{ vsphere_datacenter }}"
    vsphere_datastore: "{{ vsphere_datastore_misc }}"
    vsphere_esxihostname: "{{ vsphere_esxihostname }}"
#    src: "{{ output_folder_remote }}/seed-{{ deploy_address }}_{{ template_name }}.iso"
    src: "{{ output_folder_remote }}/seed-{{ deploy_address }}_{{ template_name }}.iso"
    dest: "{{ vsphere_file_root_path }}/{{ clusterid }}/seed-{{ deploy_address }}_{{ template_name }}.iso"
#    dest: "mspfiles/demo7/x.vmx"
  when: vm_type != "mn" and afg_deployment_type in ["SA", "ABC"]

- name: msg="Upload IID for {{ vm_name_deploy }} .iso file to vSphere in HA deployment"
  vsphere_loadfile:
    vsphere_vcenter: "{{ vsphere_vcenter }}"
    vsphere_vcusername: "{{ vsphere_vcusername }}"
    vsphere_vcpassword: "{{ vsphere_vcpassword }}"
    vsphere_datacenter: "{{ vsphere_datacenter }}"
    vsphere_datastore: "{{ vsphere_datastore_misc }}"
    vsphere_esxihostname: "{{ vsphere_esxihostname }}"
#    src: "{{ output_folder_remote }}/seed-{{ deploy_address }}_{{ vm_name_deploy }}.iso"
    src: "{{ output_folder_remote }}/seed-{{ deploy_address }}_{{ vm_name_deploy }}.iso"
    dest: "{{ vsphere_file_root_path }}/{{ clusterid }}/seed-{{ deploy_address }}_{{ vm_name_deploy }}.iso"
#    dest: "mspfiles/demo7/x.vmx"
  when: vm_type != "mn" and afg_deployment_type == "HA"


#- debug: msg="{{ execution_host }} ---------------------------------------->"
- name: Create Folder
  action:
    module: vsphere
    host: "{{ vsphere_vcenter }}"
    login: "{{ vsphere_vcusername }}"
    password: "{{ vsphere_vcpassword }}"
    datacenter: "{{ vsphere_datacenter }}"
    timeout: 60
    folder: 
      name: "{{ clusterid }}{{ system_versiontag }}"
      state: "present"
  when: afg_deployment_type == "HA"

- debug: var="{{ execution_host }} - {{ template_name }}"

- name: Clone VM
  action:
    module: vsphere
    host: "{{ vsphere_vcenter }}"
    login: "{{ vsphere_vcusername }}"
    password: "{{ vsphere_vcpassword }}"
    datacenter: "{{ vsphere_datacenter }}"
    timeout: 60
    guest:
      name: "{{ vm_name_deploy }}"
      state: present
      clone_from: "{{ template_name }}"
      folder: "{{ clusterid }}{{ system_versiontag }}"
    spec:
      type: VirtualMachineCloneSpec
      value:
        config:
          VirtualMachineConfigSpec:
            name: "{{ vm_name_deploy }}"
            deviceChange: []
        location:
          VirtualMachineRelocateSpec:
            pool:
              ManagedObjectReference:
                type: ResourcePool
                name: Resources
                limit:
                  type: ComputeResource
                  name: "{{ vsphere_live_hosts.hosts[execution_host].resource_name }}"
            datastore:
              ManagedObjectReference:
                type: Datastore
                name: "{{ vsphere_datastore }}"
            host:
              ManagedObjectReference:
                type: HostSystem
                name: "{{ execution_host }}"
#            transform:
#              VirtualMachineRelocateTransformation:
#                name: sparse
        powerOn: False
        template: False
  ignore_errors: no
  when: vm_type not in ["ts", "ddc" ] and afg_deployment_type == "HA"

- name: Clone VM
  action:
    module: vsphere
    host: "{{ vsphere_vcenter }}"
    login: "{{ vsphere_vcusername }}"
    password: "{{ vsphere_vcpassword }}"
    datacenter: "{{ vsphere_datacenter }}"
    timeout: 60
    guest:
      name: "{{ vm_name_deploy }}"
      state: present
      clone_from: "{{ template_name }}"
      folder: "{{ clusterid }}{{ system_versiontag }}"
    spec:
      type: VirtualMachineCloneSpec
      value:
        config:
          VirtualMachineConfigSpec:
            name: "{{ vm_name_deploy }}"
            deviceChange: []
        location:
          VirtualMachineRelocateSpec:
            datastore:
              ManagedObjectReference:
                type: Datastore
                name: "{{ deploy_datastore }}"
            host:
              ManagedObjectReference:
                type: HostSystem
                name: "{{ execution_host }}"
#            transform:
#              VirtualMachineRelocateTransformation:
#                name: sparse
        powerOn: False
        template: False
  ignore_errors: no
  when: vm_type in ["ts", "ddc" ] and afg_deployment_type == "HA"

     
- name: msg="Replace disks on TS in SA deployment"
  vsphere_replace_disks:
    disk_folder: "{{ vsphere_file_root_path }}/{{ clusterid }}/persistent_disks"
    vcenter: "{{ vsphere_vcenter }}"
    vcusername: "{{ vsphere_vcusername }}"
    vcpassword: "{{ vsphere_vcpassword }}"
    datacenter: "{{ vsphere_datacenter }}"
    datastore: "{{ deploy_datastore }}"
    datastores: "{{ extra_datastores | default(vsphere_datastores_app | default([ vsphere_datastore ])) }}"
    disk_sizes: "{{ extra_disk_sizes }}"    
    esxihostname: "{{ execution_host }}"
    folder_name: "{{ clusterid }}{{ system_versiontag }}"
    vm_name: "{{ template_name }}"
    disk_start_id: "1"
  when: (afg_deployment_type in ["SA", "ABC"]) and (vm_type in ["ts", "dk"]) and (universalcache | bool == True) and not (vm_upgrade | default(False) == True)

- name: msg="Replace disks on TS in HA deployment"
  vsphere_replace_disks:
    disk_folder: "{{ vsphere_file_root_path }}/{{ clusterid }}/persistent_disks"
    vcenter: "{{ vsphere_vcenter }}"
    vcusername: "{{ vsphere_vcusername }}"
    vcpassword: "{{ vsphere_vcpassword }}"
    datacenter: "{{ vsphere_datacenter }}"
    datastore: "{{ deploy_datastore }}"
    datastores: "{{ extra_datastores | default(vsphere_datastores_app | default([ vsphere_datastore ])) }}"
    disk_sizes: "{{ extra_disk_sizes }}"
    esxihostname: "{{ execution_host }}"
    folder_name: "{{ clusterid }}{{ system_versiontag }}"
    vm_name: "{{ vm_name_deploy }}"
    disk_start_id: "1"
  when: (afg_deployment_type == "HA") and (vm_type == "ts") and (universalcache | bool == True) and not (vm_upgrade | default(False) == True)

- action: shell sleep 0.4
 
- name: Mount CD iso on SA VM
  action:
    module: vsphere_cd_iso
    vcenter: "{{ vsphere_vcenter }}"
    vcusername: "{{ vsphere_vcusername | replace('\x40','##at##', 1) }}"
    vcpassword: "{{ vsphere_vcpassword }}"
    vm_name: "{{ template_name }}"
    datacenter: "{{ vsphere_datacenter }}"
    datastore: "{{ vsphere_datastore_misc }}"
    esxihostname: "{{ vsphere_esxihostname }}"
    iso_path: "/{{ vsphere_file_root_path }}/{{ clusterid }}/seed-{{ deploy_address }}_{{ template_name }}.iso"
  when: vm_type != "mn" and afg_deployment_type in ["SA", "ABC"]

- name: Mount CD iso on HA VM
  action:
    module: vsphere_cd_iso
    vcenter: "{{ vsphere_vcenter }}"
    vcusername: "{{ vsphere_vcusername | replace('\x40','##at##', 1) }}"
    vcpassword: "{{ vsphere_vcpassword }}"
    vm_name: "{{ vm_name_deploy }}"
    datacenter: "{{ vsphere_datacenter }}"
    datastore: "{{ vsphere_datastore_misc }}"
    esxihostname: "{{ vsphere_esxihostname }}"
    iso_path: "/{{ vsphere_file_root_path }}/{{ clusterid }}/seed-{{ deploy_address }}_{{ vm_name_deploy }}.iso"
  when: vm_type != "mn" and afg_deployment_type == "HA"

- name: Mount CD iso on SA MN VM
  action:
    module: vsphere_cd_iso
    vcenter: "{{ vsphere_vcenter }}"
    vcusername: "{{ vsphere_vcusername }}"
    vcpassword: "{{ vsphere_vcpassword }}"
    vm_name: "{{ template_name }}"
    datacenter: "{{ vsphere_datacenter }}"
    datastore: "{{ vsphere_datastore_misc }}"
    esxihostname: "{{ vsphere_esxihostname }}"
    iso_path: "/{{ vsphere_file_root_path }}/{{ clusterid }}/seed-{{ mn_config_type }}_{{ template_name }}.iso"
  when: vm_type == "mn" and afg_deployment_type in ["SA", "ABC"]

- name: Mount CD iso on HA MN VM
  action:
    module: vsphere_cd_iso
    vcenter: "{{ vsphere_vcenter }}"
    vcusername: "{{ vsphere_vcusername }}"
    vcpassword: "{{ vsphere_vcpassword }}"
    vm_name: "{{ vm_name_deploy }}"
    datacenter: "{{ vsphere_datacenter }}"
    datastore: "{{ vsphere_datastore_misc }}"
    esxihostname: "{{ vsphere_esxihostname }}"
    iso_path: "/{{ vsphere_file_root_path }}/{{ clusterid }}/seed-{{ mn_config_type }}_{{ vm_name_deploy }}.iso"
  when: vm_type == "mn" and afg_deployment_type == "HA"

- name: Disconnect nics if optimized rollower in SA 
  action:
    module: vsphere_connectstate_nics
    vcenter: "{{ vsphere_vcenter }}"
    vcusername: "{{ vsphere_vcusername }}"
    vcpassword: "{{ vsphere_vcpassword }}"
    vm_name: "{{ template_name }}"
    nics_connected: False
    datacenter: "{{ vsphere_datacenter }}"
    datastore: "{{ deploy_datastore }}"
    esxihostname: "{{ execution_host }}"
  ignore_errors: yes
  when: (afg_deployment_type in ["SA", "ABC"]) and (upgrade_rollover_optimized | default(False) == True or upgrade_rollover_optimized | default('False') == 'True')

- name: Disconnect nics if optimized rollower in HA
  action:
    module: vsphere_connectstate_nics
    vcenter: "{{ vsphere_vcenter }}"
    vcusername: "{{ vsphere_vcusername }}"
    vcpassword: "{{ vsphere_vcpassword }}"
    vm_name: "{{ vm_name_deploye }}"
    nics_connected: False
    datacenter: "{{ vsphere_datacenter }}"
    datastore: "{{ deploy_datastore }}"
    esxihostname: "{{ execution_host }}"
  ignore_errors: yes
  when: (afg_deployment_type == "HA") and (upgrade_rollover_optimized | default(False) == True or upgrade_rollover_optimized | default('False') == 'True')

- name: msg="Expand root disk in SA"
  vsphere_expand_disk:
    vcenter: "{{ vsphere_vcenter }}"
    vcusername: "{{ vsphere_vcusername }}"
    vcpassword: "{{ vsphere_vcpassword }}"
    datacenter: "{{ vsphere_datacenter }}"
    datastore: "{{ deploy_datastore }}"
    disk_id: "0"
    disk_size: "{{ rootdisk_size | default('1') }}"    
    esxihostname: "{{ execution_host }}"
    folder_name: "{{ clusterid }}{{ system_versiontag }}"
    # folder_name: "{{ clusterid }}"
    vm_name: "{{ template_name }}"
  when: afg_deployment_type in ["SA", "ABC"]

- name: msg="Expand root disk in HA"
  vsphere_expand_disk:
    vcenter: "{{ vsphere_vcenter }}"
    vcusername: "{{ vsphere_vcusername }}"
    vcpassword: "{{ vsphere_vcpassword }}"
    datacenter: "{{ vsphere_datacenter }}"
    datastore: "{{ deploy_datastore }}"
    disk_id: "0"
    disk_size: "{{ rootdisk_size | default('1') }}"
    esxihostname: "{{ execution_host }}"
    folder_name: "{{ clusterid }}{{ system_versiontag }}"
    # folder_name: "{{ clusterid }}"
    vm_name: "{{ vm_name_deploy }}"
  when: afg_deployment_type == "HA"
 
- name: msg="Start Server in SA"
  vsphere_guest:
    vcenter_hostname: "{{ vsphere_vcenter }}"
    username: "{{ vsphere_vcusername }}"
    password: "{{ vsphere_vcpassword }}"
    guest: "{{ template_name }}"
    state: powered_on
  when: (afg_deployment_type in ["SA", "ABC"]) and ((vm_boot | default('True')) | bool or upgrade_rollover_optimized | default(False) == True or upgrade_rollover_optimized | default('False') == 'True')

- name: msg="Start Server in HA"
  vsphere_guest:
    vcenter_hostname: "{{ vsphere_vcenter }}"
    username: "{{ vsphere_vcusername }}"
    password: "{{ vsphere_vcpassword }}"
    guest: "{{ vm_name_deploy }}"
    state: powered_on
  when: (afg_deployment_type == "HA") and ((vm_boot | default('True')) | bool or upgrade_rollover_optimized | default(False) == True or upgrade_rollover_optimized | default('False') == 'True')
