---
# Copyright (C) 2015 by
# Ericsson AB
# S-164 83 Stockholm
# Sweden
# Tel: +46 10 719 00 00
#
# The program may be used and/or copied only with the written permission
# from Ericsson AB, or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the program
# has been supplied.
#
# All rights reserved.
# tasks file for roles/vm2_upgrade_vbox

- name: Include variable files
  local_action: include_vars {{ hosts_names_vars_file }}

- debug: msg=" Check if the previous deployment is single stack"

- name: "Check if there is a running msp common stack"
  action: shell heat stack-list |grep -w {{ os_stackname }}
  register: mspstack_exists
  when: ( cee_dryrun | default('False') == 'False' )
  ignore_errors: yes
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Check if it is a single stack case"
  action: shell heat template-show {{ os_stackname }} | grep "OS::Nova::Server" | wc -l
  register: running_vms_in_single_stack
  when: ( cee_dryrun | default('False') == 'False' ) and ( mspstack_exists.stdout != "" )
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- debug: msg="Remove running VMs in the single stack"
  when: ( cee_dryrun | default('False') == 'False' ) and ( mspstack_exists.stdout != "" ) and ( running_vms_in_single_stack.stdout != '0' )

# old volumes still in the single stack when doing single stack -> multi stack upgrade
#- set_fact: old_volumes_in_single_stack="True"
#  when: ( mspstack_exists.stdout != "" ) and ( running_vms_in_single_stack.stdout != '0' )

- name: "mkdir upgrade/1"
  action: file path={{ output_folder_remote }}/upgrade/1/temp state=directory
  ignore_errors: yes
  when: ( cee_dryrun | default('False') == 'False' ) and ( mspstack_exists.stdout != "" ) and ( running_vms_in_single_stack.stdout != '0' )

- name: "clean temp dir"
  shell: rm {{ output_folder_remote }}/upgrade/1/temp/*
  ignore_errors: yes
  when: ( cee_dryrun | default('False') == 'False' ) and ( mspstack_exists.stdout != "" ) and ( running_vms_in_single_stack.stdout != '0' )

- name: "Gen the MSP common template file, find root volume"
  shell: sed -n '/.*_volume_[a-zA-Z0-9_.-]*:/,/^$/p' > '{{ output_folder_remote }}/upgrade/1/temp/{{ item }}-vols.yaml' {{ output_folder_remote_old }}/heat/temp/{{ item }}.yaml
  ignore_errors: yes
  when: ( cee_dryrun | default('False') == 'False' ) and ( mspstack_exists.stdout != "" ) and ( running_vms_in_single_stack.stdout != '0' )
  with_items: hosts_vmnames 

- name: "Copy files from {{ output_folder_remote_old }}/heat/ to  {{ output_folder_remote }}/upgrade/1"
  shell: cp {{ output_folder_remote_old }}/heat/{{ item }} {{ output_folder_remote }}/upgrade/1/
  when: ( cee_dryrun | default('False') == 'False' ) and ( mspstack_exists.stdout != "" ) and ( running_vms_in_single_stack.stdout != '0' )
  with_items:
        - "network.yaml"
        - "network_pool.yaml"
        - "flavor.yaml"

- name: "Copy 0.yaml from {{ output_folder_remote_old }}/heat/temp/ to {{ output_folder_remote }}/upgrade/1/temp/"
  shell: cp {{ output_folder_remote_old }}/heat/temp/0.yaml {{ output_folder_remote }}/upgrade/1/temp/
  when: ( cee_dryrun | default('False') == 'False' ) and ( mspstack_exists.stdout != "" ) and ( running_vms_in_single_stack.stdout != '0' )

- name: "Assemble template file will be used to remove old VMs in the single stack"
  action: assemble dest="{{ output_folder_remote }}/upgrade/1/{{ os_msptemplate }}" src="{{ output_folder_remote}}/upgrade/1/temp/"
  when: ( cee_dryrun | default('False') == 'False' ) and ( mspstack_exists.stdout != "" ) and ( running_vms_in_single_stack.stdout != '0' )

- name: "sleep a while"
  shell: sleep 60
  when: ( cee_dryrun | default('False') == 'False' ) and ( mspstack_exists.stdout != "" ) and ( running_vms_in_single_stack.stdout != '0' )

- name: "Update the running single stack to remove the old VM, but keep old volumes"
  when: ( cee_dryrun | default('False') == 'False' ) and ( mspstack_exists.stdout != "" ) and ( running_vms_in_single_stack.stdout != '0' )
  action: shell heat stack-update -f {{output_folder_remote }}/upgrade/1/{{ os_msptemplate }} -t 600 {{ os_stackname }}
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Wait till the stack update completed"
  when: ( cee_dryrun | default('False') == 'False' ) and ( mspstack_exists.stdout != "" ) and ( running_vms_in_single_stack.stdout != '0' )
  action: shell heat stack-list |grep {{ os_stackname }}
  register: result
  until: result.stdout.find("UPDATE_COMPLETE") !=-1
  retries: 10000
  delay:  5
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

#
#
 
- name: "Check if the current running stack was deployed by toolsvm version >= 7.1 CP04"
  action: shell cinder list | grep arch_{{ vm_name + system_versiontag_old }}
  ignore_errors: True
  register: cinder_result
  when: ( vm_type == "mn" ) and ( cee_dryrun | default('False') == 'False' )
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Get MN arch volume ID when running stack was deployed by toolsvm version >= 7.1cp04"
  action: shell cinder list | grep arch_{{ vm_name + system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when:  ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MN arch volume id when running stack was deployed by toolsvm version >= 7.1cp04"
  local_action: add_host name="arch_vol" groups=vol_id filename={{ volume_id.stdout }}
  when:  ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""
  
- name: "Get MN data volume ID when running stack was deployed by toolsvm version >= 7.1cp04"
  action: shell cinder list | grep data_{{ vm_name + system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when:  ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MN arch volume id when running stack was deployed by toolsvm version >= 7.1cp04"
  local_action: add_host name="data_vol" groups=vol_id filename={{ volume_id.stdout }}
  when:  ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""
  
- name: "Get MN data volume ID when running stack was deployed by toolsvm version >= 7.1cp04"
  action: shell cinder list | grep backup_{{ vm_name + system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when:  ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MN backup volume id when running stack was deployed by toolsvm version >= 7.1cp04"
  local_action: add_host name="backup_vol" groups=vol_id filename={{ volume_id.stdout }}
  when:  ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""

- name: "Get MN misc volume ID when running stack was deployed by toolsvm version >= 7.1cp04"
  action: shell cinder list | grep misc_{{ vm_name + system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when:  ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MN misc volume id when running stack was deployed by toolsvm version >= 7.1cp04"
  local_action: add_host name="misc_vol" groups=vol_id filename={{ volume_id.stdout }}
  when:  ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""

- name: "Check if the current running stack was deployed by toolsvm version < 7.1 CP04"
  action: shell cinder list | grep arch_{{ vm_type }}_{{ vm_name | regex_replace('.*-(.*)$', '\\1') }}_{{ system_versiontag_old }}
  register: cinder_result1
  when:  ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout ==""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Get MN arch volume ID when running stack was deployed by toolsvm version < 7.1cp04"
  action: shell cinder list | grep arch_{{ vm_type }}_{{ vm_name | regex_replace('.*-(.*)$', '\\1') }}_{{ system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout =="" and cinder_result1.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MN arch volume id when running stack was deployed by toolsvm version < 7.1cp04"
  local_action: add_host name="arch_vol" groups=vol_id filename={{ volume_id.stdout }}
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout =="" and cinder_result1.stdout !=""

- name: "Get MN data volume ID when running stack was deployed by toolsvm version < 7.1cp04"
  action: shell cinder list | grep data_{{ vm_type }}_{{ vm_name | regex_replace('.*-(.*)$', '\\1') }}_{{ system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout =="" and cinder_result1.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MN data volume id when running stack was deployed by toolsvm version < 7.1cp04"
  local_action: add_host name="data_vol" groups=vol_id filename={{ volume_id.stdout }}
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout =="" and cinder_result1.stdout !=""
  
- name: "Get MN backup volume ID when running stack was deployed by toolsvm version < 7.1cp04"
  action: shell cinder list | grep backup_{{ vm_type }}_{{ vm_name | regex_replace('.*-(.*)$', '\\1') }}_{{ system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout =="" and cinder_result1.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MN backup volume id when running stack was deployed by toolsvm version < 7.1cp04"
  local_action: add_host name="backup_vol" groups=vol_id filename={{ volume_id.stdout }}
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout =="" and cinder_result1.stdout !=""

- name: "Get MN misc volume ID when running stack was deployed by toolsvm version < 7.1cp02"
  action: shell cinder list | grep misc_{{ vm_type }}_{{ vm_name | regex_replace('.*-(.*)$', '\\1') }}_{{ system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout =="" and cinder_result1.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MN misc volume id when running stack was deployed by toolsvm < 7.1cp04"
  local_action: add_host name="misc_vol" groups=vol_id filename={{ volume_id.stdout }}
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout =="" and cinder_result1.stdout !=""

- name: "Save MN arch volume id for cee_dryrun mode"
  local_action: add_host name="arch_vol" groups=vol_id filename=""
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'True'

- name: "Save MN data volume id for cee_dryrun mode"
  local_action: add_host name="data_vol" groups=vol_id filename=""
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'True'

- name: "Save MN backup volume id for cee_dryrun mode"
  local_action: add_host name="backup_vol" groups=vol_id filename=""
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'True'

- name: "Save MN misc volume id for cee_dryrun mode"
  local_action: add_host name="misc_vol" groups=vol_id filename=""
  when: ( vm_type == "mn" ) and cee_dryrun | default('False') == 'True'

#- name: "Openstack stop vm"
#  action: shell nova stop {{ vm_name_deploy_old }}
#  ignore_errors: True
#  register: result
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"
#
#- name: "Wait few seconds till stop vm completed"
#  action: shell sleep 10
#  when: (result.stderr == "")
#
#- name: "check if the same image already there or not"
#  action: shell glance image-list | grep data_{{ vm_type }}_{{ vm_name | regex_replace('.*-(.*)$', '\\1') }}_{{ system_versiontag_old }}_clone
#  ignore_errors: yes
#  register: data_image_already_exist
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"
#
#- name: "Check if the current running stack is >= 7.1 CP02"
#  action: shell cinder list | grep data_{{ vm_type }}_{{ vm_name | regex_replace('.*-(.*)$', '\\1') }}_{{ system_versiontag_old }}
#  ignore_errors: True
#  register: cinder_result
#  when: vm_type == "mn" 
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"
#
#- name: "upload db volumes to glance which will be used later for upgrade, for stack >= 71cp02"
#  action: shell cinder upload-to-image --force True {{ item }}_{{ vm_type }}_{{ vm_name | regex_replace('.*-(.*)$', '\\1') }}_{{ system_versiontag_old }} {{ item }}_{{ vm_type }}_{{ vm_name | regex_replace('.*-(.*)$', '\\1') }}_{{ system_versiontag_old }}_clone 
#  when:  vm_type == "mn" and cinder_result.stdout != "" and data_image_already_exist.stdout ==""
#  with_items:
#        - "arch"
#        - "data"
#        - "backup"
#        - "misc"
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"
#
#- name: "upload db volumes to glance which will be used later for upgrade, for stack = 7.1 cp01"
#  action: shell cinder upload-to-image --force True {{ item }}_{{ vm_type }}_{{ vm_name | regex_replace('.*-(.*)$', '\\1') }} {{ item }}_{{ vm_type }}_{{ vm_name | regex_replace('.*-(.*)$', '\\1') }}_{{ system_versiontag_old }}_clone
#  when:  vm_type == "mn" and cinder_result.stdout == "" and data_image_already_exist.stdout == ""
#  with_items:
#        - "arch"
#        - "data"
#        - "backup"
#        - "misc"
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"
#
#- name: "Wait till cinder volume uploading is done"
#  action: shell cinder list |grep uploading
#  register: result
#  ignore_errors: yes
#  until: result.stdout == "" 
#  retries: 1000
#  delay:  5 
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"
#
#- name: "Openstack start vm"
#  action: shell nova start {{ vm_name_deploy_old }}
#  ignore_errors: yes
#  environment:
#      OS_PASSWORD: "{{ os_password }}"
#      OS_AUTH_URL: "{{ os_authurl }}"
#      OS_USERNAME: "{{ os_username }}"
#      OS_TENANT_NAME: "{{ os_tenant }}"
#
#- name: "Wait few seconds till start vm completed"
#  action: shell sleep 10
#
- name: "Check if the current running stack was deployed by toolsvm version >= 7.1 CP09"
  action: shell cinder list | grep log_{{ vm_name + system_versiontag_old }}
  ignore_errors: True
  register: cinder_result
  when: ( vm_type == "mon" ) and ( cee_dryrun | default('False') == 'False' )
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Get MON log volume ID when running stack was deployed by toolsvm version >= 7.1cp09"
  action: shell cinder list | grep log_{{ vm_name + system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when: ( vm_type == "mon" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MON log volume id when running stack was deployed by toolsvm version >= 7.1cp09"
  local_action: add_host name="mon_log_vol" groups=vol_id filename={{ volume_id.stdout }}
  when: ( vm_type == "mon" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""

- name: "Get MON data volume ID when running stack was deployed by toolsvm version >= 7.1cp09"
  action: shell cinder list | grep data_{{ vm_name + system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when: ( vm_type == "mon" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MON arch volume id when running stack was deployed by toolsvm version >= 7.1cp09"
  local_action: add_host name="mon_data_vol" groups=vol_id filename={{ volume_id.stdout }}
  when: ( vm_type == "mon" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""

- name: "Get MON data volume ID when running stack was deployed by toolsvm version >= 7.1cp09"
  action: shell cinder list | grep backup_{{ vm_name + system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when: ( vm_type == "mon" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MON backup volume id when running stack was deployed by toolsvm version >= 7.1cp09"
  local_action: add_host name="mon_backup_vol" groups=vol_id filename={{ volume_id.stdout }}
  when: ( vm_type == "mon" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""

- name: "Get MON misc volume ID when running stack was deployed by toolsvm version >= 7.1cp09"
  action: shell cinder list | grep misc_{{ vm_name + system_versiontag_old }} | awk -F '|' '{print $2}' | sed 's/^[ ]*//'
  register: volume_id
  when: ( vm_type == "mon" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""
  environment:
      OS_PASSWORD: "{{ os_password }}"
      OS_AUTH_URL: "{{ os_authurl }}"
      OS_USERNAME: "{{ os_username }}"
      OS_TENANT_NAME: "{{ os_tenant }}"

- name: "Save MON misc volume id when running stack was deployed by toolsvm version >= 7.1cp09"
  local_action: add_host name="mon_misc_vol" groups=vol_id filename={{ volume_id.stdout }}
  when: ( vm_type == "mon" ) and cee_dryrun | default('False') == 'False' and cinder_result.stdout !=""

- name: "Save MON log volume id for cee_dryrun mode"
  local_action: add_host name="mon_log_vol" groups=vol_id filename=""
  when: (vm_type == "mon" ) and (cee_dryrun | default('False') == 'True' or cinder_result.stdout =="")

- name: "Save MON data volume id for cee_dryrun mode"
  local_action: add_host name="mon_data_vol" groups=vol_id filename=""
  when: (vm_type == "mon" ) and (cee_dryrun | default('False') == 'True' or cinder_result.stdout =="")

- name: "Save MON backup volume id for cee_dryrun mode"
  local_action: add_host name="mon_backup_vol" groups=vol_id filename=""
  when: (vm_type == "mon" ) and (cee_dryrun | default('False') == 'True' or cinder_result.stdout =="")

- name: "Save MON misc volume id for cee_dryrun mode"
  local_action: add_host name="mon_misc_vol" groups=vol_id filename=""
  when: (vm_type == "mon" ) and (cee_dryrun | default('False') == 'True' or cinder_result.stdout =="")

